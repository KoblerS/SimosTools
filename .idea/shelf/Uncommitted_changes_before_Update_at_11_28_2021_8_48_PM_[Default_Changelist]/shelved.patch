Index: app/src/main/java/com/app/simostools/PIDs.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport java.lang.Exception\r\n\r\ndata class PIDStruct(var address: Long,\r\n                     var length: Int,\r\n                     var signed: Boolean,\r\n                     var progMin: Float,\r\n                     var progMax: Float,\r\n                     var warnMin: Float,\r\n                     var warnMax: Float,\r\n                     var smoothing: Float,\r\n                     var value: Float,\r\n                     var equation: String,\r\n                     var format: String,\r\n                     var name: String,\r\n                     var unit: String,\r\n                     var enabled: Boolean,\r\n                     var tabs: String,\r\n                     var assignTo: String)\r\n\r\ndata class DATAStruct(var min: Float,\r\n                      var max: Float,\r\n                      var warn: Boolean,\r\n                      var multiplier: Float,\r\n                      var inverted: Boolean)\r\n\r\nobject PIDs {\r\n    private val TAG         = \"PIDs\"\r\n    private var mInited     = false\r\n    private var list22d: Array<PIDStruct?>? = arrayOf(\r\n        PIDStruct(0x2032, 2, false,0f,  2000f,  -1000f, 5000f,  0.0f, 0f,\"x\",                     \"%01.0f\",\"Airflow\",             \"kg/hr\",  true, \"Airflow\", \"f\"),\r\n        PIDStruct(0xffff, 1, false,0f,  2000f,  -1000f, 5000f,  0.0f, 0f,\"f / r * 8333.33333333\", \"%01.0f\",\"Airmass\",             \"mg/stk\", true, \"Airflow\", \"\"),\r\n        PIDStruct(0x13ca, 2, false,50f, 120f,   70f,    120.0f, 0.9f, 0f,\"x / 120.60176665439\",   \"%01.1f\",\"Ambient Press\",       \"kpa\",    true, \"Misc\",    \"a\"),\r\n        PIDStruct(0x1004, 2, true, -40f,50f,    -30f,   50f,    0.7f, 0f,\"x / 128\",               \"%01.1f\",\"Ambient Temp\",        \"°C\",     true, \"Misc\",    \"\"),\r\n        PIDStruct(0x14a6, 1, false,0f,  2f,     8f,     16f,    0.8f, 0f,\"x * 0.1015625\",         \"%01.1f\",\"Battery Voltage\",     \"V\",      true, \"Misc\",    \"\"),\r\n        PIDStruct(0xffff, 1, false,-15f,35f,    -15f,   35f,    0.0f, 0f,\"(m - a) * 0.1450777202\",\"%01.1f\",\"Boost\",               \"psi\",    true, \"Airflow\", \"\"),\r\n        PIDStruct(0xFFFF, 1, false,0f,  300f,   -1000f, 1000f,  0.0f, 0f,\"h\",                     \"%01.0f\",\"Calc HP\",             \"hp\",     true, \"Power\",   \"\"),\r\n        PIDStruct(0xFFFF, 1, false,0f,  500f,   -1000f, 1000f,  0.0f, 0f,\"t\",                     \"%01.0f\",\"Calc TQ\",             \"nm\",     true, \"Power\",   \"\"),\r\n        PIDStruct(0x101e, 1, false,0f,  100f,   -1f,    110f,   0.0f, 0f,\"x * 0.390625\",          \"%01.0f\",\"Cooling Fan\",         \"%\",      true, \"Misc\",    \"\"),\r\n        PIDStruct(0x11cd, 1, false,-50f,120f,   -100f,  130f,   0.0f, 0f,\"x - 40\",                \"%01.1f\",\"Coolant Temp\",        \"°C\",     true, \"Misc\",    \"\"),\r\n        PIDStruct(0x14ec, 2, false,0f,  100f,   -1f,    90f,    0.0f, 0f,\"x * 0.09765625\",        \"%01.1f\",\"CPU Load\",            \"%\",      true, \"Misc\",    \"\"),\r\n        PIDStruct(0xf40C, 2, false,0f,  7000f,  -1f,    6000f,  0.0f, 0f,\"x / 4\",                 \"%01.0f\",\"Engine Speed\",        \"rpm\",    true, \"\",        \"r\"),\r\n        PIDStruct(0xf452, 2, false,0f,  100f,   -50f,   100f,   0.0f, 0f,\"x / 2.55\",              \"%01.1f\",\"Eth Content\",         \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0x201a, 2, true, -10f,10f,    -50f,   50f,    0.0f, 0f,\"(x / 10) - 24\",         \"%01.1f\",\"Exhaust Cam Pos\",     \"°\",      true, \"\",        \"\"),\r\n        PIDStruct(0x2027, 2, false,0f,  250f,   -1f,    300f,   0.0f, 0f,\"x / 10\",                \"%01.0f\",\"FP DI\",               \"bar\",    true, \"\",        \"\"),\r\n        PIDStruct(0x293b, 2, false,0f,  250f,   -1f,    300f,   0.0f, 0f,\"x / 10\",                \"%01.0f\",\"FP DI SP\",            \"bar\",    true, \"\",        \"\"),\r\n        PIDStruct(0x2025, 2, false,0f,  15f,    -1f,    15f,    0.5f, 0f,\"x / 1000\",              \"%01.2f\",\"FP MPI\",              \"bar\",    true, \"Fuel\",    \"\"),\r\n        PIDStruct(0x2932, 2, false,0f,  15f,    -1f,    15f,    0.5f, 0f,\"x / 1000\",              \"%01.2f\",\"FP MPI SP\",           \"bar\",    true, \"Fuel\",    \"\"),\r\n        PIDStruct(0x209a, 2, false,0f,  100f,   -1000f, 100f,   0.0f, 0f,\"x / 100\",               \"%01.1f\",\"HPFP Eff Vol\",        \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0xFFFF, 1, false,-35f,35f,    -1000f, 1000f,  0.0f, 0f,\"s + l\",                 \"%01.0f\",\"Fuel Trim\",           \"%\",      true, \"Fuel\",    \"\"),\r\n        PIDStruct(0x210f, 2, false,0f,  6f,     -1000f, 10f,    0.0f, 0f,\"x\",                     \"%01.0f\",\"Gear\",                \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0x1001, 1, false,-40f,55f,    -35f,   50f,    0.7f, 0f,\"x * 0.75 - 48\",         \"%01.1f\",\"IAT\",                 \"°C\",     true, \"Misc\",    \"\"),\r\n        PIDStruct(0x2004, 2, true, -10f,10f,    -15f,   100f,   0.0f, 0f,\"x / 100\",               \"%01.2f\",\"Ign Avg\",             \"°\",      true, \"Ignition\",\"\"),\r\n        PIDStruct(0x13a0, 2, false,0f,  190000f,-1000f, 10000f, 0.0f, 0f,\"x / 250\",               \"%01.2f\",\"Inj PW DI\",           \"ms\",     true, \"Ignition\",\"\"),\r\n        PIDStruct(0x13ac, 2, false,0f,  190000f,-1000f, 10000f, 0.0f, 0f,\"x / 250\",               \"%01.2f\",\"Inj PW MPI\",          \"ms\",     true, \"Ignition\",\"\"),\r\n        PIDStruct(0x201e, 2, true, -10f,10f,    -50f,   50f,    0.0f, 0f,\"30 - (x / 10)\",         \"%01.1f\",\"Int Cam Pos\",         \"°\",      true, \"\",        \"\"),\r\n        PIDStruct(0x200a, 2, true, 0f,  -5f,    -4f,    1000f,  0.7f, 0f,\"x / 100\",               \"%01.2f\",\"Knock Cyl 1\",         \"°\",      true, \"Ignition\",\"w\"),\r\n        PIDStruct(0x200b, 2, true, 0f,  -5f,    -4f,    1000f,  0.7f, 0f,\"x / 100\",               \"%01.2f\",\"Knock Cyl 2\",         \"°\",      true, \"Ignition\",\"x\"),\r\n        PIDStruct(0x200c, 2, true, 0f,  -5f,    -4f,    1000f,  0.7f, 0f,\"x / 100\",               \"%01.2f\",\"Knock Cyl 3\",         \"°\",      true, \"Ignition\",\"y\"),\r\n        PIDStruct(0x200d, 2, true, 0f,  -5f,    -4f,    1000f,  0.7f, 0f,\"x / 100\",               \"%01.2f\",\"Knock Cyl 4\",         \"°\",      true, \"Ignition\",\"z\"),\r\n        PIDStruct(0x10c0, 2, false,0f,  2f,     0.7f,   1000f,  0.0f, 0f,\"x / 1024\",              \"%01.2f\",\"Lambda\",              \"l\",      true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xf444, 2, false,0f,  2f,     -1000f, 1000f,  0.0f, 0f,\"x / 32768\",             \"%01.2f\",\"Lambda SP\",           \"l\",      true, \"Fuel\",    \"\"),\r\n        PIDStruct(0x2028, 2, false,0f,  100f,   -1.0f,  100f,   0.7f, 0f,\"x / 100\",               \"%01.1f\",\"LPFP Duty\",           \"%\",      true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xf456, 1, false,-25f,25f,    -20f,   20f,    0.7f, 0f,\"x / 1.28 - 100\",        \"%01.1f\",\"LTFT\",                \"%\",      true, \"Fuel\",    \"l\"),\r\n        PIDStruct(0x39c0, 2, false,0f,  300f,   -1000f, 300f,   0.0f, 0f,\"x / 10\",                \"%01.0f\",\"MAP\",                 \"kpa\",    true, \"Airflow\", \"m\"),\r\n        PIDStruct(0x39c1, 2, false,0f,  300f,   -1000f, 300f,   0.0f, 0f,\"x / 10\",                \"%01.0f\",\"MAP SP\",              \"kpa\",    true, \"Airflow\", \"\"),\r\n        PIDStruct(0x2904, 2, false,0f,  20f,    -1000f, 10f,    0.0f, 0f,\"x\",                     \"%01.0f\",\"Misfires\",            \"\",       true, \"Misc\",    \"\"),\r\n        PIDStruct(0x202f, 2, false,-50f,130f,   0f,     120f,   0.9f, 0f,\"(x - 2731.4) / 10\",     \"%01.1f\",\"Oil Temp\",            \"°C\",     true, \"Misc\",    \"\"),\r\n        PIDStruct(0x1070, 2, false,0f,  100f,   -1000f, 1000f,  0.0f, 0f,\"x / 10.24\",             \"%01.0f\",\"Pedal Pos\",           \"kpa\",    true, \"Airflow\", \"\"),\r\n        PIDStruct(0x295c, 1, false,0f,  1f,     -1000f, 1000f,  0.0f, 0f,\"x\",                     \"%01.1f\",\"Port Flap Pos\",       \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0x202a, 2, false,0f,  300f,   -1000f, 300f,   0.0f, 0f,\"x / 10\",                \"%01.1f\",\"PUT\",                 \"kpa\",    true, \"Airflow\", \"p\"),\r\n        PIDStruct(0x2029, 2, false,0f,  300f,   -1000f, 300f,   0.0f, 0f,\"x / 10\",                \"%01.0f\",\"PUT SP\",              \"kpa\",    true, \"Airflow\", \"\"),\r\n        PIDStruct(0xf406, 1, false,-25f,25f,    -20f,   20f,    0.0f, 0f,\"x / 1.28 - 100\",        \"%01.1f\",\"STFT\",                \"%\",      true, \"Fuel\",    \"s\"),\r\n        PIDStruct(0x437C, 2, true, -50f,450f,   -1000f, 500f,   0.0f, 0f,\"x / 10\",                \"%01.2f\",\"Torque\",              \"Nm\",     true, \"Power\",   \"\"),\r\n        PIDStruct(0x4380, 2, true, 0f,  500f,   -1000f, 500f,   0.7f, 0f,\"x / 10\",                \"%01.1f\",\"Torque Req\",          \"Nm\",     true, \"Power\",   \"\"),\r\n        PIDStruct(0x20ba, 2, true, 0f,  100f,   -1000f, 101f,   0.0f, 0f,\"x / 10\",                \"%01.1f\",\"TPS\",                 \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0x1040, 2, false,0f,  190f,   -1000f, 195f,   0.0f, 0f,\"x / 163.84\",            \"%01.0f\",\"Turbo Speed\",         \"rpm\",    true, \"Airflow\", \"\"),\r\n        PIDStruct(0x1041, 2, true, -40f,55f,    -500f,  500f,   0.7f, 0f,\"x * 0.005859375 + 144\", \"%01.1f\",\"Turbo Air Temp\",      \"°C\",     true, \"Airflow\", \"\"),\r\n        PIDStruct(0x167c, 1, false,0f,  1f,     -100f,  100f,   0.0f, 0f,\"x\",                     \"%01.0f\",\"Valve Lift Pos\",      \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0x2033, 2, false,0f,  220f,   -20f,   220f,   0.0f, 0f,\"x / 347.947\",           \"%01.1f\",\"Vehicle Speed\",       \"km/hr\",  true, \"Airflow\", \"\"),\r\n        PIDStruct(0x39a2, 2, false,0f,  100f,   -1000f, 1000f,  0.0f, 0f,\"100 - x / 100\",         \"%01.1f\",\"Wastegate\",           \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0x39a3, 2, false,0f,  100f,   -1000f, 1000f,  0.0f, 0f,\"100 - x / 100\",         \"%01.1f\",\"Wastegate SP\",        \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0x203c, 2, false,0f,  1f,     -1f,    100f,   0.0f, 0f,\"x\",                     \"%01.0f\",\"Cruise\",              \"\",       true, \"\",        \"\"),\r\n    )\r\n\r\n    private var list3Ed: Array<PIDStruct?>? = arrayOf(\r\n        PIDStruct(0xd000ee2a, 1, false,-10f, 10f,    -1000f,1000f,  0.8f, 0f,\"(x - 127) / 10\",    \"%01.2f\",\"Accel. Lat\",          \"m/s2\",   true, \"\",        \"\"),\r\n        PIDStruct(0xd00141ba, 2, false,-10f, 10f,    -1000f,1000f,  0.4f, 0f,\"(x - 512) / 32\",    \"%01.2f\",\"Accel. Long\",         \"m/s2\",   true, \"\",        \"\"),\r\n        PIDStruct(0xd00097b4, 4, false,0f,   2f,     -100f, 1000f,  0.0f, 0f,\"x * 1000\",          \"%01.2f\",\"Airmass\",             \"g/stk\",  true, \"Airflow\", \"\"),\r\n        PIDStruct(0xd00097fc, 4, false,0f,   2f,     -100f, 1000f,  0.0f, 0f,\"x * 1000\",          \"%01.2f\",\"Airmass SP\",          \"g/stk\",  true, \"Airflow\", \"\"),\r\n        PIDStruct(0xd0013c76, 2, false,0f,   110f,   0f,    120f,   0.9f, 0f,\"x / 120.60176665\",  \"%01.2f\",\"Ambient Press\",       \"kpa\",    true, \"Misc\",    \"a\"),\r\n        PIDStruct(0xd000c177, 1, false,-25f, 45f,    -100f, 100f,   0.9f, 0f,\"(x - 64) / 1.33\",   \"%01.2f\",\"Ambient Temp\",        \"°C\",     true, \"Misc\",    \"\"),\r\n        PIDStruct(0xd0015172, 2, true, 10f,  15f,    7f,    16f,    0.7f, 0f,\"x / 51.2\",          \"%01.1f\",\"Battery Volts\",       \"V\",      true, \"Misc\",    \"\"),\r\n        PIDStruct(0xFFFFFFFF, 1, false,-15f, 35f,    -15f,  35f,    0.0f, 0f,\"(m - a) * 0.145077\",\"%01.1f\",\"Boost\",               \"psi\",    true, \"Airflow\", \"\"),\r\n        PIDStruct(0xFFFFFFFF, 1, false,0f,   500f,   -1000f,1000f,  0.0f, 0f,\"t\",                 \"%01.0f\",\"Calc TQ\",             \"nm\",     true, \"Power\",   \"\"),\r\n        PIDStruct(0xFFFFFFFF, 1, false,0f,   300f,   -1000f,1000f,  0.0f, 0f,\"h\",                 \"%01.0f\",\"Calc HP\",             \"hp\",     true, \"Power\",   \"\"),\r\n        PIDStruct(0xd000c36e, 1, false,-10f, 10f,    -100f, 100f,   0.0f, 0f,\"x\",                 \"%01.2f\",\"Comb Mode\",           \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0xd000c6f5, 1, false,-50f, 130f,   -100f, 150f,   0.8f, 0f,\"(x - 64) / 1.33\",   \"%01.0f\",\"Coolant Temp\",        \"°C\",     true, \"Misc\",    \"\"),\r\n        PIDStruct(0xd0013982, 2, false,0f,   720f,   -1000f,1000f,  0.0f, 0f,\"x / 2.6666666667\",  \"%01.0f\",\"EOI Actual\",          \"°\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd001397a, 2, false,0f,   720f,   -1000f,1000f,  0.0f, 0f,\"x / 2.6666666667\",  \"%01.0f\",\"EOI Limit\",           \"°\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd0012400, 2, false,0f,   7000f,  -1.0f, 6000f,  0.0f, 0f,\"x\",                 \"%01.0f\",\"Engine Speed\",        \"rpm\",    true, \"\",        \"\"),\r\n        PIDStruct(0xd000c1d4, 1, false,0f,   100f,   -100f, 100f,   0.0f, 0f,\"x / 2.55\",          \"%01.0f\",\"Eth Content\",         \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd001566e, 2, true, -45f, 45f,    -100f, 100f,   0.0f, 0f,\"x / 128\",           \"%01.1f\",\"Exh Cam Position\",    \"°\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd0011e04, 2, false,0f,   1.5f,   -1f,   10f,    0.0f, 0f,\"x / 16384\",         \"%01.2f\",\"Exh Flow Factor\",     \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0xd0011eba, 2, false,0f,   500f,   -100f, 1000f,  0.0f, 0f,\"x / 120.60176665\",  \"%01.0f\",\"Exh Pres Desired\",    \"kpa\",    true, \"\",        \"\"),\r\n        PIDStruct(0xd00136ac, 2, false,0f,   28000f, 0f,    28000f, 0.0f, 0f,\"x / 1.884402603\",   \"%01.0f\",\"FP DI\",               \"kpa\",    true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd0013640, 2, false,0f,   28000f, -1000f,30000f, 0.0f, 0f,\"x / 1.8844026039\",  \"%01.0f\",\"FP DI SP\",            \"kpa\",    true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd0011b26, 2, false,0f,   1500f,  -1000f,2000f,  0.0f, 0f,\"x / 3.7688052079\",  \"%01.0f\",\"FP MPI\",              \"kpa\",    true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd001360c, 2, false,0f,   1500f,  -1000f,2000f,  0.0f, 0f,\"x / 3.7688052079\",  \"%01.0f\",\"FP MPI SP\",           \"kpa\",    true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd0013636, 2, false,-100f,100f,   -100f, 1000f,  0.0f, 0f,\"x / 47.181425486\",  \"%01.0f\",\"Fuel Flow\",           \"mg/stk\", true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd00135e0, 2, false,-100f,100f,   -100f, 1000f,  0.0f, 0f,\"x / 47.181425486\",  \"%01.0f\",\"Fuel Flow SP\",        \"mg/stk\", true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd00192b1, 1, false,-100f,100f,   -100f, 100f,   0.0f, 0f,\"x / 128\",           \"%01.0f\",\"Fuel Split MPI\",      \"\",       true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xFFFFFFFF, 1, false,-35f, 35f,    -1000f,1000f,  0.0f, 0f,\"s + l\",             \"%01.1f\",\"Fuel Trim\",           \"%\",      true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd000f39a, 1, false,0f,   6f,     -1f,   7f,     0.0f, 0f,\"x\",                 \"%01.0f\",\"Gear\",                \"gear\",   true, \"\",        \"\"),\r\n        PIDStruct(0xd001363c, 2, false,-100f,100f,   -1000f,1000f,  0.0f, 0f,\"x / 655.35999999\",  \"%01.0f\",\"HPFP Eff Vol\",        \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd000c179, 1, false,-50f, 70f,    -20f,  50f,    0.9f, 0f,\"(x - 64) / 1.33\",   \"%01.1f\",\"IAT\",                 \"°C\",     true, \"Misc\",    \"\"),\r\n        PIDStruct(0xd000e57e, 1, false,-5f,  15f,    -100f, 100f,   0.0f, 0f,\"(x - 95) / 2.66667\",\"%01.0f\",\"Ign Table\",           \"°\",      true, \"Ignition\",\"\"),\r\n        PIDStruct(0xd000e59c, 1, false,-5f,  15f,    -100f, 100f,   0.0f, 0f,\"(x - 95) / 2.66667\",\"%01.0f\",\"Ign Avg\",             \"°\",      true, \"Ignition\",\"\"),\r\n        PIDStruct(0xd0013b16, 2, false,-25f, 25f,    -1000f,1000f,  0.0f, 0f,\"x / 250\",           \"%01.1f\",\"Inj PW DI\",           \"ms\",     true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd0013824, 2, false,0f,   100f,   -1000f,1000f,  0.0f, 0f,\"x / 250\",           \"%01.1f\",\"Inj PW MPI\",          \"ms\",     true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd001566c, 2, true, -100f,100f,   -100f, 100f,   0.0f, 0f,\"x / 128\",           \"%01.0f\",\"Intake Cam Pos\",      \"°\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd0011e08, 2, false,0f,   20f,    -1000f,1000f,  0.0f, 0f,\"x / 16384\",         \"%01.0f\",\"Intake Flow Fact\",    \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0xd001988e, 1, false,0f,   -5f,    -3.0f, 3f,     0.8f, 0f,\"(x - 128) / 2.66\",  \"%01.2f\",\"Knock Avg\",           \"°\",      true, \"Ignition\",\"\"),\r\n        PIDStruct(0xd000efb1, 1, false,0f,   -5f,    -5f,   1000f,  0.8f, 0f,\"(x - 128) / 2.6667\",\"%01.2f\",\"Knock Cyl 1\",         \"°\",      true, \"Ignition\",\"\"),\r\n        PIDStruct(0xd000efb2, 1, false,0f,   -5f,    -5f,   1000f,  0.8f, 0f,\"(x - 128) / 2.6667\",\"%01.2f\",\"Knock Cyl 2\",         \"°\",      true, \"Ignition\",\"\"),\r\n        PIDStruct(0xd000efb3, 1, false,0f,   -5f,    -5f,   1000f,  0.8f, 0f,\"(x - 128) / 2.6667\",\"%01.2f\",\"Knock Cyl 3\",         \"°\",      true, \"Ignition\",\"\"),\r\n        PIDStruct(0xd000efb4, 1, false,0f,   -5f,    -5f,   1000f,  0.8f, 0f,\"(x - 128) / 2.6667\",\"%01.2f\",\"Knock Cyl 4\",         \"°\",      true, \"Ignition\",\"\"),\r\n        PIDStruct(0xd00120e2, 2, false,0.5f, 1.5f,   -0.1f, 5f,     0.0f, 0f,\"x / 32767.999999\",  \"%01.2f\",\"Lambda\",              \"l\",      true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd00143f6, 2, false,0f,   2f,     -100f, 500f,   0.0f, 0f,\"x / 1024\",          \"%01.2f\",\"Lambda SP\",           \"l\",      true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd0013600, 2, false,0f,   100f,   -1000f,100f,   0.0f, 0f,\"x / 655.35999999\",  \"%01.0f\",\"LPFP Duty\",           \"%\",      true, \"Fuel\",    \"\"),\r\n        PIDStruct(0xd000f00b, 1, false,-25f, 25f,    -20f,  20f,    0.7f, 0f,\"x / 1.28 - 100.0\",  \"%01.1f\",\"LTFT\",                \"%\",      true, \"Fuel\",    \"l\"),\r\n        PIDStruct(0xd00098cc, 4, false,0f,   300f,   -300f, 300f,   0.0f, 0f,\"x / 1000\",          \"%01.1f\",\"MAP\",                 \"kpa\",    true, \"Airflow\", \"m\"),\r\n        PIDStruct(0xd00098f4, 4, false,0f,   300f,   -300f, 300f,   0.0f, 0f,\"x / 1000\",          \"%01.1f\",\"MAP SP\",              \"kpa\",    true, \"Airflow\", \"\"),\r\n        PIDStruct(0xd000e578, 1, true, 0f,   220f,   -1000f,1000f,  0.0f, 0f,\"(x - 128) / 2.6667\",\"%01.2f\",\"OF Ign Cor\",          \"°CRK\",   true, \"\",        \"\"),\r\n        PIDStruct(0xd001de8d, 1, true, 0f,   7000f,  -1000f,1000f,  0.0f, 0f,\"(x - 128) / 2.6667\",\"%01.2f\",\"OF Ign Max\",          \"°CRK\",   true, \"\",        \"\"),\r\n        PIDStruct(0xd001de8e, 1, false,0f,   3f,     -1000f,1000f,  0.0f, 0f,\"x / 128\",           \"%01.2f\",\"OF Ign Fac\",          \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0xd001de8e, 1, false,0f,   3f,     -1000f,1000f,  0.0f, 0f,\"x / 128\",           \"%01.2f\",\"OF Ign Fac\",          \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0xd0017f52, 2, false,0f,   2f,     -1000f,1000f,  0.0f, 0f,\"x / 32768\",         \"%01.2f\",\"OF Tq Mult\",          \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd000c5ae, 1, false,-25f, 120f,   -1000f,1000f,  0.9f, 0f,\"x - 40\",            \"%01.0f\",\"Oil Temp\",            \"°C\",     true, \"Misc\",    \"\"),\r\n        PIDStruct(0xd0012028, 2, false,0f,   100f,   -1000f,1000f,  0.0f, 0f,\"x / 10.24\",         \"%01.1f\",\"Pedal Pos\",           \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0xd0000aa1, 1, false,0f,   1f,     -1000f,1000f,  0.0f, 0f,\"x\",                 \"%01.0f\",\"Port Flap Pos\",       \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd00098fc, 4, false,0f,   300f,   -1000f,300f,   0.0f, 0f,\"x / 1000\",          \"%01.1f\",\"PUT\",                 \"kpa\",    true, \"Airflow\", \"p\"),\r\n        PIDStruct(0xd0011eee, 2, false,0f,   300f,   -1000f,1000f,  0.0f, 0f,\"x / 120.601766\",    \"%01.1f\",\"PUT SP\",              \"kpa\",    true, \"Airflow\", \"\"),\r\n        PIDStruct(0xd0013a44, 2, false,0f,   720f,   -1000f,1000f,  0.0f, 0f,\"x / 2.666666666667\",\"%01.0f\",\"SOI Actual\",          \"°\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd0013a42, 2, false,0f,   720f,   -1000f,1000f,  0.0f, 0f,\"x / 2.666666666667\",\"%01.0f\",\"SOI Limit\",           \"°\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd000f00c, 1, false,-25f, 25f,    -20f,  20f,    0.8f, 0f,\"x / 1.28 - 100\",    \"%01.0f\",\"STFT\",                \"%\",      true, \"Fuel\",    \"s\"),\r\n        PIDStruct(0xd0015344, 2, true, -40f, 500f,   -1000f,1000f,  0.0f, 0f,\"x / 32\",            \"%01.1f\",\"Torque\",              \"Nm\",     true, \"Power\",   \"\"),\r\n        PIDStruct(0xd0011f0c, 2, false,0f,   512f,   -1000f,1000f,  0.0f, 0f,\"x\",                 \"%01.0f\",\"Torque Lim\",          \"\",       true, \"Power\",   \"\"),\r\n        PIDStruct(0xd0012048, 2, true, -40f, 500f,   -1000f,500f,   0.0f, 0f,\"x / 32\",            \"%01.1f\",\"Torque Req\",          \"Nm\",     true, \"Power\",   \"\"),\r\n        PIDStruct(0xd000f377, 1, false,0f,   100f,   -1000f,1000f,  0.0f, 0f,\"x / 2.142128661087\",\"%01.2f\",\"TPS\",                 \"%\",      true, \"\",        \"\"),\r\n        PIDStruct(0xd000f3c1, 1, false,-100f,100f,   -1000f,120f,   0.9f, 0f,\"x - 40\",            \"%01.0f\",\"Trans Temp\",          \"°C\",     true, \"Misc\",    \"\"),\r\n        PIDStruct(0xd0011e76, 2, false,0f,   195f,   -100f, 190f,   0.0f, 0f,\"x / 163.84\",        \"%01.1f\",\"Turbo Speed\",         \"rpm\",    true, \"Airflow\", \"\"),\r\n        PIDStruct(0xd0019b75, 1, false,0f,   1f,     -1000f,1000f,  0.0f, 0f,\"x\",                 \"%01.0f\",\"Valve Lift Pos\",      \"\",       true, \"\",        \"\"),\r\n        PIDStruct(0xd00155b6, 2, false,0f,   220f,   -1000f,220f,   0.0f, 0f,\"x / 100\",           \"%01.0f\",\"Vehicle Speed\",       \"km/h\",   true, \"\",        \"\"),\r\n        PIDStruct(0xd0011e10, 2, false,0f,   100f,   -1000f,1000f,  0.0f, 0f,\"x / 655.35999997\",  \"%01.1f\",\"Wastegate\",           \"%\",      true, \"Airflow\", \"\"),\r\n        PIDStruct(0xd0015c2c, 2, false,0f,   100f,   -1000f,1000f,  0.0f, 0f,\"x / 655.35999997\",  \"%01.1f\",\"Wastegate SP\",        \"%\",      true, \"Airflow\", \"\"),\r\n        PIDStruct(0xd0015c5e, 2, false,0f,   2f,     -1000f,1000f,  0.0f, 0f,\"x / 32\",            \"%01.1f\",\"Wastegate Flow\",      \"kg/h\",   true, \"\",        \"\"),\r\n        PIDStruct(0xd001b6cd, 1, false,0f,   1f,     -1000f,1000f,  0.0f, 0f,\"x\",                 \"%01.0f\",\"Cruise\",              \"\",       true, \"\",        \"\"),\r\n    )\r\n    var list22: Array<PIDStruct?>? = null\r\n    var list3E: Array<PIDStruct?>? = null\r\n    var data22: Array<DATAStruct?>? = null\r\n    var data3E: Array<DATAStruct?>? = null\r\n    var assign22 = mutableMapOf<String, Int>()\r\n    var assign3E = mutableMapOf<String, Int>()\r\n    var tabs22 = mutableMapOf<String, Boolean>()\r\n    var tabs3E = mutableMapOf<String, Boolean>()\r\n\r\n    fun init() {\r\n        if(!mInited) {\r\n            loadDefaultPIDS(UDSLoggingMode.MODE_22)\r\n            loadDefaultPIDS(UDSLoggingMode.MODE_3E)\r\n\r\n            mInited = true\r\n        }\r\n    }\r\n\r\n    fun loadDefaultPIDS(mode: UDSLoggingMode = UDSLogger.getMode()) {\r\n        when (mode) {\r\n            UDSLoggingMode.MODE_22 -> list22 = list22d?.clone()\r\n            UDSLoggingMode.MODE_3E -> list3E = list3Ed?.clone()\r\n        }\r\n        buildAssign(mode)\r\n        buildData(mode)\r\n        buildTabs(mode)\r\n    }\r\n\r\n    fun resetData() {\r\n        try {\r\n            getData()?.let { dataList ->\r\n                for (i in 0 until dataList.count()) {\r\n                    val data = dataList[i]\r\n                    data?.let {\r\n                        val pid = getList()!![i]\r\n                        pid?.let {\r\n                            data.max = pid.value\r\n                            data.min = pid.value\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            DebugLog.d(TAG, \"Reset min/max list.\")\r\n        } catch (e: Exception)\r\n        {\r\n            DebugLog.e(TAG, \"Unable to reset min/max list.\", e)\r\n        }\r\n    }\r\n\r\n    fun updateData() {\r\n        try {\r\n            getData()?.let { dataList ->\r\n                for (i in 0 until dataList.count()) {\r\n                    val data = dataList[i]\r\n                    data?.let {\r\n                        val pid = getList()!![i]\r\n                        pid?.let {\r\n                            //set min/max\r\n                            if (pid.value > data.max)\r\n                                data.max = pid.value\r\n\r\n                            if (pid.value < data.min)\r\n                                data.min = pid.value\r\n\r\n                            //Check to see if we should be warning user\r\n                            data.warn = (pid.value > pid.warnMax) or (pid.value < pid.warnMin)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (e: Exception) {\r\n            DebugLog.e(TAG, \"Unable to update data.\", e)\r\n        }\r\n    }\r\n\r\n    fun getList(mode: UDSLoggingMode = UDSLogger.getMode()): Array<PIDStruct?>? {\r\n        return when(mode) {\r\n            UDSLoggingMode.MODE_22  -> list22\r\n            UDSLoggingMode.MODE_3E  -> list3E\r\n        }\r\n    }\r\n\r\n    fun getTabs(mode: UDSLoggingMode = UDSLogger.getMode()): MutableMap<String, Boolean> {\r\n        return when(mode) {\r\n            UDSLoggingMode.MODE_22  -> tabs22\r\n            UDSLoggingMode.MODE_3E  -> tabs3E\r\n        }\r\n    }\r\n\r\n    fun getData(mode: UDSLoggingMode = UDSLogger.getMode()): Array<DATAStruct?>? {\r\n        return when(mode) {\r\n            UDSLoggingMode.MODE_22  -> data22\r\n            UDSLoggingMode.MODE_3E  -> data3E\r\n        }\r\n    }\r\n\r\n    fun getAssign(mode: UDSLoggingMode = UDSLogger.getMode()): MutableMap<String, Int> {\r\n        return when(mode) {\r\n            UDSLoggingMode.MODE_22  -> assign22\r\n            UDSLoggingMode.MODE_3E  -> assign3E\r\n        }\r\n    }\r\n\r\n    fun buildTabs(mode: UDSLoggingMode = UDSLogger.getMode()) {\r\n        getList(mode)?.let { list ->\r\n            when (mode) {\r\n                UDSLoggingMode.MODE_22 -> tabs22 = mutableMapOf()\r\n                UDSLoggingMode.MODE_3E -> tabs3E = mutableMapOf()\r\n            }\r\n            val tabs = getTabs(mode)\r\n            for (i in 0 until list.count()) {\r\n                list[i]?.let { pid ->\r\n                    pid.tabs.split(\".\").forEach() {\r\n                        val tabName = it.substringBefore(\"|\")\r\n                        tabs[tabName] = true\r\n                        DebugLog.d(TAG, \"buildTabs: Added $tabName\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun buildAssign(mode: UDSLoggingMode = UDSLogger.getMode()) {\r\n        getList(mode)?.let { list ->\r\n            when (mode) {\r\n                UDSLoggingMode.MODE_22 -> assign22 = mutableMapOf()\r\n                UDSLoggingMode.MODE_3E -> assign3E = mutableMapOf()\r\n            }\r\n            val assign = getAssign(mode)\r\n            for (i in 0 until list.count()) {\r\n                list[i]?.let { pid ->\r\n                    if (pid.assignTo.length == 1 && pid.assignTo[0] >= 'a' && pid.assignTo[0] <= 'z' && pid.assignTo[0] != 'x' && pid.assignTo[0] != 'h' && pid.assignTo[0] != 't') {\r\n                        assign[pid.assignTo] = i\r\n                        DebugLog.d(TAG, \"buildAssign: Added ${pid.name} as ${pid.assignTo}\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun buildData(mode: UDSLoggingMode = UDSLogger.getMode()) {\r\n        getList(mode)?.let { list->\r\n            when (mode) {\r\n                UDSLoggingMode.MODE_22 -> data22 = arrayOfNulls(list.count())\r\n                UDSLoggingMode.MODE_3E -> data3E = arrayOfNulls(list.count())\r\n            }\r\n            val data = getData(mode)\r\n            data?.let {\r\n                for (i in 0 until data.count()) {\r\n                    list[i]?.let { pid ->\r\n                        val newData = DATAStruct(pid.value, pid.value, false, 1.0f, false)\r\n                        //Check for low value PIDS\r\n                        var progMax = pid.progMax\r\n                        var progMin = pid.progMin\r\n\r\n                        //if progress bar is flipped\r\n                        if (pid.progMin > pid.progMax) {\r\n                            progMax = pid.progMin\r\n                            progMin = pid.progMax\r\n                            newData.inverted = true\r\n                        }\r\n\r\n                        //build progress multiplier\r\n                        newData.multiplier = 100.0f / (progMax - progMin)\r\n\r\n                        data[i] = newData\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun setList(mode: UDSLoggingMode = UDSLogger.getMode(), list: Array<PIDStruct?>?) {\r\n        list?.let {\r\n            when (mode) {\r\n                UDSLoggingMode.MODE_22 -> list22 = list\r\n                UDSLoggingMode.MODE_3E -> list3E = list\r\n            }\r\n            buildAssign(mode)\r\n            buildData(mode)\r\n            buildTabs(mode)\r\n        }\r\n    }\r\n\r\n    fun getPID(address: Long, mode: UDSLoggingMode = UDSLogger.getMode()): PIDStruct? {\r\n        getList(mode)?.let { list ->\r\n            for (i in 0 until list.count()) {\r\n                list[i]?.let { pid ->\r\n                    if(pid.address == address) {\r\n                        return pid\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    fun setValue(pid: PIDStruct?, x: Float): Float {\r\n        pid?.let {\r\n            //Used in smoothing calculation\r\n            val previousValue = pid.value\r\n\r\n            //eval expression\r\n            try {\r\n                var equationString = pid.equation.replace(\"x\", x.toString(), true)\r\n                equationString = equationString.replace(\"t\", UDSLogger.getTQ().toString(), true)\r\n                equationString = equationString.replace(\"h\", UDSLogger.getHP().toString(), true)\r\n                getList()?.let { list ->\r\n                    getAssign().forEach {\r\n                        equationString =\r\n                            equationString.replace(it.key, list[it.value]!!.value.toString(), true)\r\n                    }\r\n                }\r\n                pid.value = eval(equationString)\r\n            } catch (e: Exception) {\r\n                pid.value = 0f\r\n            }\r\n\r\n            //Add smoothing\r\n            if (pid.smoothing > 0f && pid.smoothing < 0.9751f)\r\n                pid.value = ((1f - pid.smoothing) * pid.value) + (pid.smoothing * previousValue)\r\n\r\n            return pid.value\r\n        }\r\n\r\n        return 0f\r\n    }\r\n\r\n    fun getValue(pid: PIDStruct?): Float {\r\n        return pid?.value ?: 0f\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/PIDs.kt b/app/src/main/java/com/app/simostools/PIDs.kt
--- a/app/src/main/java/com/app/simostools/PIDs.kt	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/java/com/app/simostools/PIDs.kt	(date 1638128806581)
@@ -176,6 +176,19 @@
         }
     }
 
+    fun clear() {
+        list22 = null
+        list3E = null
+        data22 = null
+        data3E = null
+        assign22.clear()
+        assign3E.clear()
+        tabs22.clear()
+        tabs3E.clear()
+
+        mInited = false
+    }
+
     fun loadDefaultPIDS(mode: UDSLoggingMode = UDSLogger.getMode()) {
         when (mode) {
             UDSLoggingMode.MODE_22 -> list22 = list22d?.clone()
Index: app/src/main/java/com/app/simostools/MainFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport androidx.core.content.ContextCompat.startForegroundService\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.fragment.findNavController\r\n\r\nclass MainFragment : Fragment() {\r\n    private val TAG = \"MainFragment\"\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_main, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        val loggingButton = view.findViewById<SwitchButton>(R.id.buttonMainLogging)\r\n        loggingButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                sendServiceMessage(BTServiceTask.DO_START_LOG.toString())\r\n                findNavController().navigate(R.id.action_MainFragment_to_LoggingFragment)\r\n            }\r\n        }\r\n\r\n        val flashingButton = view.findViewById<SwitchButton>(R.id.buttonMainFlashing)\r\n        flashingButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                findNavController().navigate(R.id.action_MainFragment_to_FlashingFragment)\r\n            }\r\n        }\r\n\r\n        val utilitiesButton = view.findViewById<SwitchButton>(R.id.buttonMainUtilities)\r\n        utilitiesButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                findNavController().navigate(R.id.action_MainFragment_to_UtilitiesFragment)\r\n            }\r\n        }\r\n\r\n        val settingsButton = view.findViewById<SwitchButton>(R.id.buttonMainSettings)\r\n        settingsButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                TempPIDS.reset(context)\r\n                ColorSettings.resetColors()\r\n                findNavController().navigate(R.id.action_MainFragment_to_SettingsFragment)\r\n            }\r\n        }\r\n\r\n        val exitButton = view.findViewById<SwitchButton>(R.id.buttonMainExit)\r\n        exitButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                //Write pid default files\r\n                UDSLoggingMode.values().forEach { mode ->\r\n                    //write current PID list\r\n                    PIDCSVFile.write(\r\n                        getString(R.string.filename_pid_csv, mode.cfgName),\r\n                        requireActivity(),\r\n                        PIDs.getList(mode),\r\n                        true\r\n                    )\r\n                }\r\n\r\n                //Stop our BT Service\r\n                sendServiceMessage(BTServiceTask.DO_DISCONNECT.toString())\r\n                sendServiceMessage(BTServiceTask.STOP_SERVICE.toString())\r\n                requireActivity().finish()\r\n            }\r\n        }\r\n\r\n        //Set background color\r\n        view.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n        view.findViewById<ImageView>(R.id.imageMainLogo).setBackgroundColor(ColorList.BG_NORMAL.value)\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        if(!ConfigSettings.AUTO_LOG.toBoolean())\r\n            sendServiceMessage(BTServiceTask.DO_STOP_TASK.toString())\r\n    }\r\n\r\n    private fun sendServiceMessage(type: String) {\r\n        activity?.let {\r\n            val serviceIntent = Intent(it, BTService::class.java)\r\n            serviceIntent.action = type\r\n            startForegroundService(it, serviceIntent)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/MainFragment.kt b/app/src/main/java/com/app/simostools/MainFragment.kt
--- a/app/src/main/java/com/app/simostools/MainFragment.kt	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/java/com/app/simostools/MainFragment.kt	(date 1638134672006)
@@ -21,6 +21,12 @@
         return inflater.inflate(R.layout.fragment_main, container, false)
     }
 
+    override fun onDestroy() {
+        super.onDestroy()
+
+        DebugLog.d(TAG, "onDestroy")
+    }
+
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
 
@@ -45,6 +51,16 @@
             }
         }
 
+        val playbackButton = view.findViewById<SwitchButton>(R.id.buttonMainPlayback)
+        playbackButton.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                findNavController().navigate(R.id.action_MainFragment_to_PlaybackFragment)
+            }
+        }
+
         val utilitiesButton = view.findViewById<SwitchButton>(R.id.buttonMainUtilities)
         utilitiesButton.apply {
             paintBG.color = ColorList.BT_BG.value
@@ -84,8 +100,15 @@
                     )
                 }
 
+                //clear globals
+                gPlaybackData = null
+                gUtilitiesMsgList = emptyArray()
+                gFlashMsgList = emptyArray()
+
+                //stop timer
+                (activity as MainActivity).stopGUITimer()
+
                 //Stop our BT Service
-                sendServiceMessage(BTServiceTask.DO_DISCONNECT.toString())
                 sendServiceMessage(BTServiceTask.STOP_SERVICE.toString())
                 requireActivity().finish()
             }
@@ -94,6 +117,8 @@
         //Set background color
         view.setBackgroundColor(ColorList.BG_NORMAL.value)
         view.findViewById<ImageView>(R.id.imageMainLogo).setBackgroundColor(ColorList.BG_NORMAL.value)
+
+        DebugLog.d(TAG, "onViewCreated")
     }
 
     override fun onResume() {
@@ -101,6 +126,14 @@
 
         if(!ConfigSettings.AUTO_LOG.toBoolean())
             sendServiceMessage(BTServiceTask.DO_STOP_TASK.toString())
+
+        DebugLog.d(TAG, "onResume")
+    }
+
+    override fun onPause() {
+        super.onPause()
+
+        DebugLog.d(TAG, "onPause")
     }
 
     private fun sendServiceMessage(type: String) {
Index: app/src/main/java/com/app/simostools/UDSflash.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport java.io.InputStream\r\nimport java.lang.Math.round\r\n\r\nobject UDSFlasher {\r\n    private val TAG = \"UDSflash\"\r\n    private var mTask = FLASH_ECU_CAL_SUBTASK.NONE\r\n    private var mCommand: ByteArray = byteArrayOf()\r\n    private var mLastString: String = \"\"\r\n    private var mFullFlash: Boolean = false\r\n    private var flashConfirmed: Boolean = false\r\n    private var cancelFlash: Boolean = false\r\n    private var bin: Array<ByteArray> = arrayOf(byteArrayOf(), byteArrayOf(), byteArrayOf(), byteArrayOf(), byteArrayOf(), byteArrayOf())\r\n    private var inputBin: ByteArray = byteArrayOf()\r\n    private var patchBin: ByteArray = byteArrayOf()\r\n    private var ecuAswVersion: ByteArray = byteArrayOf()\r\n    private var transferSequence = -1\r\n    private var progress = 0\r\n    private var binAswVersion = COMPATIBLE_BOXCODE_VERSIONS._UNDEFINED\r\n    private var clearDTCStart = 0\r\n    private var clearDTCcontinue = 0\r\n    private var currentBlockOperation = 0\r\n    private var patchTransferAddress = 0\r\n\r\n    fun getSubtask(): FLASH_ECU_CAL_SUBTASK{\r\n        return mTask\r\n    }\r\n\r\n    fun getFlashConfirmed(): Boolean{\r\n        return flashConfirmed\r\n    }\r\n\r\n    fun setFlashConfirmed(input: Boolean = false){\r\n        flashConfirmed = input\r\n    }\r\n\r\n    fun cancelFlash(){\r\n        cancelFlash = true\r\n    }\r\n\r\n    fun getInfo(): String {\r\n        val response = mLastString\r\n        //mLastString = \"\"\r\n        return response\r\n    }\r\n\r\n    fun getCommand(): ByteArray {\r\n        val response = mCommand\r\n        //mCommand = byteArrayOf()\r\n        return response\r\n    }\r\n\r\n    fun started(): Boolean {\r\n        return !(mTask == FLASH_ECU_CAL_SUBTASK.NONE)\r\n    }\r\n\r\n    fun getProgress(): Int{\r\n        return progress\r\n    }\r\n\r\n    fun setBinFile(input: InputStream) {\r\n        DebugLog.d(TAG, \"Received BIN stream from GUI\")\r\n        mTask = FLASH_ECU_CAL_SUBTASK.NONE\r\n        flashConfirmed = false\r\n        cancelFlash = false\r\n        progress = 0\r\n        clearDTCStart = 0\r\n        clearDTCcontinue = 0\r\n        inputBin =  input.readBytes()\r\n        patchBin = byteArrayOf()\r\n        currentBlockOperation = 0\r\n    }\r\n\r\n    fun setFullFlash(full: Boolean) {\r\n        DebugLog.d(TAG, \"Set FullFlash to $full\")\r\n        mFullFlash = full\r\n    }\r\n\r\n    fun getFullFlash(): Boolean {\r\n        return mFullFlash\r\n    }\r\n\r\n    fun startTask(ticks: Int): ByteArray {\r\n\r\n        if(inputBin.size < 500000){\r\n            mLastString = \"Selected file too small...\"\r\n            return byteArrayOf()\r\n        }\r\n        else if(inputBin.size > 500000 && inputBin.size < 4000000){\r\n            //Read box code from ECU\r\n            mTask = FLASH_ECU_CAL_SUBTASK.GET_ECU_BOX_CODE\r\n\r\n            DebugLog.d(TAG, \"Initiating Calibration Flash subroutine: \" + mTask.toString())\r\n            mLastString = \"Initiating calibration flash routines\"\r\n            //Reading inputBin into block position 5 of the bin array\r\n            bin[5] = inputBin\r\n\r\n            return UDS_COMMAND.READ_IDENTIFIER.bytes + ECUInfo.PART_NUMBER.address\r\n        }\r\n        else if(inputBin.size <= 0x400000){\r\n            //It's a full bin flash....\r\n            mLastString = \"Full flash file selected...\"\r\n            mTask = FLASH_ECU_CAL_SUBTASK.GET_ECU_BOX_CODE\r\n\r\n            bin = FlashUtilities.splitBinBlocks(inputBin)\r\n            return UDS_COMMAND.READ_IDENTIFIER.bytes + ECUInfo.PART_NUMBER.address\r\n        }\r\n        else{\r\n            mLastString = \"UNLOCK FLASH SELECTED!!!\"\r\n            mTask = FLASH_ECU_CAL_SUBTASK.GET_ECU_BOX_CODE\r\n            bin = FlashUtilities.splitBinBlocks(inputBin)\r\n            \r\n            patchBin = inputBin.copyOfRange(0x400000, inputBin.size)\r\n            return UDS_COMMAND.READ_IDENTIFIER.bytes + ECUInfo.PART_NUMBER.address\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    fun processFlashCAL(ticks: Int, buff: ByteArray?): UDSReturn {\r\n\r\n        buff?.let {\r\n\r\n\r\n\r\n            //DebugLog.d(TAG, \"Flash subroutine: \" + mTask)\r\n            if(checkResponse(buff) == UDS_RESPONSE.NEGATIVE_RESPONSE){\r\n                //DebugLog.w(TAG,\"Negative response received from ECU!\")\r\n                //mCommand = sendTesterPresent()\r\n                //return UDSReturn.COMMAND_QUEUED\r\n            }\r\n\r\n            when(mTask){\r\n                FLASH_ECU_CAL_SUBTASK.GET_ECU_BOX_CODE ->{\r\n\r\n                    //If we can't get a good response from the ECU, we'll\r\n                    // Skip to the force option\r\n                    //if(....){\r\n                    //    mLastString = \"NO VALID RESPONSE, FORCE FLASH???\\n\" +\r\n                    //            \"NO INTEGRITY CHECK POSSIBLE!!!\"\r\n                    //    mTask = FLASH_ECU_CAL_SUBTASK.CLEAR_DTC\r\n                    //}\r\n\r\n\r\n                    //If we're in here with a response to our PID request\r\n                    when(checkResponse(buff)){\r\n\r\n                        UDS_RESPONSE.READ_IDENTIFIER ->{\r\n                            ecuAswVersion = buff.copyOfRange(3, buff.size)\r\n                            DebugLog.d(TAG, \"Received ASW version ${ecuAswVersion.toHex()} from ecu\")\r\n\r\n                            mLastString = \"Read box code from ECU: \" + String(ecuAswVersion)\r\n                            mTask = mTask.next()\r\n\r\n                            mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n\r\n                        UDS_RESPONSE.POSITIVE_RESPONSE -> {\r\n                            mCommand = UDS_COMMAND.READ_IDENTIFIER.bytes + ECUInfo.PART_NUMBER.address\r\n                            mLastString = \"Initiating flash routines\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        else -> {\r\n                            DebugLog.d(TAG, \"Error with ECU Response: \" + buff.toHex())\r\n                            mLastString = \"Error with ECU Response: \" + String(buff)\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.CHECK_FILE_COMPAT -> {\r\n\r\n\r\n                    //val binAswVersion = bin.copyOfRange(0x60, 0x6B)\r\n                    binAswVersion = FlashUtilities.getBoxCodeFromBin(inputBin) ?: COMPATIBLE_BOXCODE_VERSIONS._UNDEFINED\r\n\r\n                    if(patchBin.size > 0){\r\n                        //We're patching the ECU, so make sure the bin is the right H version\r\n                        if(binAswVersion != COMPATIBLE_BOXCODE_VERSIONS._8V0906259H){\r\n                            mLastString = \"Wrong box code provided for patching: $binAswVersion\" +\r\n                                    \"\\n Exiting!!!\"\r\n                            return UDSReturn.ERROR_RESPONSE\r\n                        }\r\n\r\n                        mLastString = mTask.toString() + \"\\nValid unlock file provided... continuing with flash unlock\"\r\n                        mTask = mTask.next()\r\n                        mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                        return UDSReturn.COMMAND_QUEUED\r\n                    }\r\n\r\n                    //Compare the two strings:\r\n                    if (String(ecuAswVersion).trim() != binAswVersion.str) {\r\n                        DebugLog.d(TAG,\"ECU software version: ${ecuAswVersion.toHex()}, and file\" +\r\n                                \" software version: $binAswVersion\")\r\n                        mLastString = \"Box code on selected BIN file: $binAswVersion\" +\r\n                                \"\\n File mismatch!!!\"\r\n                        return UDSReturn.ERROR_RESPONSE\r\n                    }\r\n\r\n                    mLastString = mTask.toString() + \"\\nBox code on selected BIN file: $binAswVersion\" +\r\n                            \"\\nPlease confirm flash procedure\"\r\n                    mTask = mTask.next()\r\n                    mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                    return UDSReturn.COMMAND_QUEUED\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.CONFIRM_PROCEED -> {\r\n                    mLastString = \"\"\r\n                    if(cancelFlash){\r\n                        mLastString = \"Flash has been canceled\"\r\n                        bin = arrayOf(byteArrayOf(), byteArrayOf(), byteArrayOf(), byteArrayOf(), byteArrayOf(), byteArrayOf())\r\n                        patchBin = byteArrayOf()\r\n                        mTask = FLASH_ECU_CAL_SUBTASK.NONE\r\n                        return UDSReturn.ABORTED\r\n                    }\r\n\r\n                    if(!flashConfirmed){\r\n\r\n                        return UDSReturn.FLASH_CONFIRM\r\n                    }\r\n                    else{\r\n                        mLastString = \"Flash confirmed! Proceeding\"\r\n                        mTask = mTask.next()\r\n                        mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                        return UDSReturn.OK\r\n                    }\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.CHECKSUM_BIN ->{\r\n                    mLastString = \"\"\r\n                    if(currentBlockOperation == bin.size){\r\n                        currentBlockOperation = 0\r\n\r\n                        mTask = mTask.next()\r\n\r\n\r\n                        mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                        return UDSReturn.COMMAND_QUEUED\r\n                    }\r\n\r\n                    if(bin[currentBlockOperation].size != 0){\r\n\r\n                        mLastString = mTask.toString() + \"\\n\"\r\n                        mLastString += \"Block identifier: $currentBlockOperation\" + \"\\n\"\r\n                        DebugLog.d(TAG,\"Checksumming block: $currentBlockOperation\")\r\n\r\n                        var checksummed = FlashUtilities.checksumSimos18(bin[currentBlockOperation],\r\n                            binAswVersion.software.baseAddresses[currentBlockOperation],\r\n                            binAswVersion.software.checksumLocations[currentBlockOperation]\r\n\r\n                            )\r\n                        mLastString += \"Original checksum: \" + checksummed.fileChecksum + \"\\n\"\r\n                        mLastString += \"Calculatated checksum: \" + checksummed.calculatedChecksum + \"\\n\"\r\n                        if (checksummed.updated) mLastString += \"    Checksum corrected\\n\"\r\n                        else mLastString += \"    Checksum not updated\\n\"\r\n\r\n                        if(currentBlockOperation == 5) {\r\n                            checksummed = FlashUtilities.checksumECM3(checksummed.bin, binAswVersion.ecm3Range)\r\n                            mLastString += \"Original ECM3: \" + checksummed.fileChecksum + \"\\n\"\r\n                            mLastString += \"    Calculated ECM3: \" + checksummed.calculatedChecksum + \"\\n\"\r\n                            if (checksummed.updated) mLastString += \"Checksum corrected\\n\"\r\n                            else mLastString += \"    Checksum not updated\\n\"\r\n\r\n                            bin[currentBlockOperation] = checksummed.bin\r\n                        }\r\n\r\n                    }\r\n\r\n                    currentBlockOperation++\r\n\r\n                    mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                    return UDSReturn.COMMAND_QUEUED\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.COMPRESS_BIN ->{\r\n                    mLastString = \"\"\r\n                    if(currentBlockOperation == bin.size){\r\n                        currentBlockOperation = 0\r\n\r\n                        mTask = mTask.next()\r\n                        mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                        return UDSReturn.COMMAND_QUEUED\r\n                    }\r\n\r\n                    if(bin[currentBlockOperation].size != 0) {\r\n                        mLastString = mTask.toString() + \"\\n\"\r\n\r\n                        var uncompressedSize = bin[currentBlockOperation].size\r\n                        bin[currentBlockOperation] = FlashUtilities.encodeLZSS(bin[currentBlockOperation])\r\n\r\n                        var compressedSize = bin[currentBlockOperation].size\r\n\r\n                        mLastString += \"Uncompressed bin size: $uncompressedSize\\n\"\r\n                        mLastString += \"Compressed bin size: $compressedSize\"\r\n                    }\r\n\r\n                    currentBlockOperation++\r\n\r\n                    mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                    return UDSReturn.COMMAND_QUEUED\r\n\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.ENCRYPT_BIN -> {\r\n                    mLastString = \"\"\r\n                    if(currentBlockOperation == bin.size){\r\n                        currentBlockOperation = 0\r\n\r\n                        if(patchBin.size > 0){\r\n                            mLastString = mTask.toString() + \"\\n\"\r\n                            var unencryptedSize = patchBin.size\r\n\r\n                            patchBin = FlashUtilities.encrypt(patchBin, binAswVersion.software.cryptoKey, binAswVersion.software.cryptoIV)\r\n\r\n                            var encryptedSize = patchBin.size\r\n\r\n                            mLastString += \"Unencrypted PATCH size: $unencryptedSize \\n\"\r\n                            mLastString += \"Encrypted PATCH size: $encryptedSize \\n\"\r\n                        }\r\n\r\n                        mTask = mTask.next()\r\n                        mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                        return UDSReturn.COMMAND_QUEUED\r\n                    }\r\n\r\n                    if(bin[currentBlockOperation].size != 0) {\r\n                        mLastString = mTask.toString() + \"\\n\"\r\n                        var unencryptedSize = bin[currentBlockOperation].size\r\n\r\n                        bin[currentBlockOperation] = FlashUtilities.encrypt(bin[currentBlockOperation], binAswVersion.software.cryptoKey, binAswVersion.software.cryptoIV)\r\n\r\n                        var encryptedSize = bin[currentBlockOperation].size\r\n\r\n                        mLastString += \"Unencrypted bin size: $unencryptedSize \\n\"\r\n                        mLastString += \"Encrypted bin size: $encryptedSize \\n\"\r\n\r\n                        if (bin.isEmpty()) {\r\n                            mLastString = \"Error encrypting BIN\"\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n\r\n                    }\r\n\r\n                    currentBlockOperation++\r\n                    mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n\r\n                    return UDSReturn.COMMAND_QUEUED\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.CLEAR_DTC -> {\r\n                    //We should enter this function after a 3e response\r\n                    when(checkResponse(buff)){\r\n                        UDS_RESPONSE.EXTENDED_DIAG_ACCEPTED -> {\r\n                            mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                            mLastString = \"Extended diagnostic 03 accepted\"\r\n                            mTask = mTask.next()\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.CLEAR_DTC_SUCCESSFUL -> {\r\n                            mCommand = (UDS_COMMAND.EXTENDED_DIAGNOSTIC.bytes) + byteArrayOf(0x03.toByte())\r\n                            mLastString = \"Entering extended diagnostic 03\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.NEGATIVE_RESPONSE ->{\r\n                            mCommand = byteArrayOf()\r\n                            mLastString = \"Waiting for CLEAR DTC successful\"\r\n                            //Move the ticks counter out of the way since it should actually be in ASW\r\n                            clearDTCcontinue = ticks + 15\r\n                            return UDSReturn.OK\r\n                        }\r\n                        UDS_RESPONSE.POSITIVE_RESPONSE ->{\r\n                            //There's a chance we're stuck in CBOOT... if that's the case\r\n                            // when we try to clear DTCs it'll give us a positive response, but\r\n                            // will never actually succeed\r\n                            if(clearDTCStart == 0){\r\n                                mLastString = \"Attempting to clear DTC\"\r\n                                clearDTCStart = ticks\r\n                                clearDTCcontinue = ticks + 15\r\n                            }\r\n                            else{\r\n                                mLastString = \"\"\r\n                            }\r\n                            if(ticks > clearDTCcontinue){\r\n                                mCommand = (UDS_COMMAND.EXTENDED_DIAGNOSTIC.bytes) + byteArrayOf(0x03.toByte())\r\n                                mLastString = \"Entering extended diagnostic 03\"\r\n                                return UDSReturn.COMMAND_QUEUED\r\n                            }\r\n                            else{\r\n                                DebugLog.d(TAG,\"Received \" + buff.toHex() + \"for $ticks\")\r\n                                mLastString = \"\"\r\n\r\n                                return UDSReturn.CLEAR_DTC_REQUEST\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            mCommand = byteArrayOf()\r\n                            return UDSReturn.OK\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.CHECK_PROGRAMMING_PRECONDITION -> {\r\n\r\n                    when(checkResponse(buff)) {\r\n                        UDS_RESPONSE.ROUTINE_ACCEPTED -> {\r\n                            //Open extended diagnostic session\r\n                            mCommand = UDS_COMMAND.EXTENDED_DIAGNOSTIC.bytes + byteArrayOf(0x02.toByte())\r\n                            mLastString = \"Entering extended diagnostics 02\"\r\n                            mTask = mTask.next()\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n\r\n                        else -> {\r\n                            //Check programming precondition, routine 0x0203\r\n                            mCommand = UDS_COMMAND.START_ROUTINE.bytes + UDS_ROUTINE.CHECK_PROGRAMMING_PRECONDITION.bytes\r\n                            mLastString = mTask.toString()\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.OPEN_EXTENDED_DIAGNOSTIC -> {\r\n                    when(checkResponse(buff)) {\r\n\r\n                        UDS_RESPONSE.NEGATIVE_RESPONSE -> {\r\n                            //mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                            mLastString = \"Waiting for Seed\"\r\n                            //return UDSReturn.COMMAND_QUEUED\r\n                            return UDSReturn.OK\r\n                        }\r\n\r\n                        UDS_RESPONSE.EXTENDED_DIAG_ACCEPTED -> {\r\n                            if(buff[1] == 0x02.toByte()){\r\n                                mCommand = UDS_COMMAND.SECURITY_ACCESS.bytes + byteArrayOf(0x11.toByte())\r\n                                mLastString = \"Asking for seedkey exhange\"\r\n                                mTask = mTask.next()\r\n                                return UDSReturn.COMMAND_QUEUED\r\n                            }\r\n                        }\r\n\r\n                        else -> {\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.SA2SEEDKEY -> {\r\n                    //Pass SA2SeedKey unlock_security_access(17)\r\n                    when(checkResponse(buff)){\r\n                        UDS_RESPONSE.SECURITY_ACCESS_GRANTED -> {\r\n                            if(buff[1] == 0x11.toByte()){\r\n                                var challenge = buff.copyOfRange(2,buff.size)\r\n\r\n                                var vs = FlashUtilities.Sa2SeedKey(binAswVersion.software.sa2Script, challenge)\r\n                                var response = vs.execute()\r\n\r\n                                mCommand = UDS_COMMAND.SECURITY_ACCESS.bytes + byteArrayOf(0x12.toByte()) + response\r\n                                mLastString = \"Passing SeedKey challenge\"\r\n                                return UDSReturn.COMMAND_QUEUED\r\n                            }\r\n                            else if(buff[1] == 0x12.toByte()){\r\n                                mLastString = \"Passed SeedKey Challenge\"\r\n                                mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                                mTask = mTask.next()\r\n                                return UDSReturn.COMMAND_QUEUED\r\n                            }\r\n                        }\r\n                        else ->{\r\n                            mLastString = \"\"\r\n                            return UDSReturn.OK\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.WRITE_WORKSHOP_LOG -> {\r\n                    when(checkResponse(buff)){\r\n                        UDS_RESPONSE.POSITIVE_RESPONSE -> {\r\n                            //Write workshop tool log\r\n                            //  0x 2E 0xF15A = 0x20, 0x7, 0x17, 0x42,0x04,0x20,0x42,0xB1,0x3D,\r\n                            mCommand = byteArrayOf(0x2E.toByte(),\r\n                                0xF1.toByte(), 0x5A.toByte(), 0x20.toByte(), 0x07.toByte(), 0x17.toByte(),\r\n                                0x42.toByte(),0x04.toByte(),0x20.toByte(),0x42.toByte(),0xB1.toByte(),0x3D.toByte())\r\n                            mLastString = \"Writing workshop code\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.WRITE_IDENTIFIER_ACCEPTED -> {\r\n                            if(buff[1] == 0xF1.toByte() && buff[2] == 0x5A.toByte()) {\r\n                                mLastString = \"Wrote workshop code\"\r\n                                mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n\r\n                                //DEBUG ONLY\r\n                                //mTask = FLASH_ECU_CAL_SUBTASK.PATCH_BLOCK\r\n                                //currentBlockOperation = 5\r\n\r\n                                //This is real\r\n                                mTask = mTask.next()\r\n\r\n                                return UDSReturn.COMMAND_QUEUED\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.FLASH_BLOCK -> {\r\n                    mLastString = \"\"\r\n                    //If we're done flashing all the blocks, pass off into the\r\n                    //  Reset ecu stage\r\n                    if(currentBlockOperation == bin.size){\r\n                        currentBlockOperation = 0\r\n\r\n                        mTask = FLASH_ECU_CAL_SUBTASK.RESET_ECU\r\n                        mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                        return UDSReturn.COMMAND_QUEUED\r\n                    }\r\n\r\n                    if(bin[currentBlockOperation].size == 0){\r\n                        currentBlockOperation++\r\n                        mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                        return UDSReturn.COMMAND_QUEUED\r\n                    }\r\n\r\n                    when(checkResponse(buff)){\r\n                        //We should enter here from a tester present.\r\n                        UDS_RESPONSE.POSITIVE_RESPONSE -> {\r\n                            //erase block: 31 01 FF 00 01 BLOCKID\r\n                            mCommand = UDS_COMMAND.START_ROUTINE.bytes +\r\n                                    UDS_ROUTINE.ERASE_BLOCK.bytes +\r\n                                    0x01.toByte() +\r\n                                    binAswVersion.software.blockNumberMap[currentBlockOperation].toByte()\r\n\r\n                            DebugLog.d(TAG, \"Executing ERASE block command: ${mCommand.toHex()}\")\r\n                            mLastString = \"Erasing block: $currentBlockOperation to prepare for flashing\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        //We should have a 71 in response to the erase command we just sent....\r\n                        UDS_RESPONSE.ROUTINE_ACCEPTED -> {\r\n                            //Request download 34 AA 41 05 00 07 FC 00\r\n\r\n                            mCommand = UDS_COMMAND.REQUEST_DOWNLOAD.bytes +\r\n                                    UDS_DOWNLOAD_PROPERTIES.ENCRYPTED_COMPRESSED.bytes +\r\n                                    //UDS_DOWNLOAD_PROPERTIES.ENCRYPTED_UNCOMPRESSED.bytes +\r\n                                    UDS_DOWNLOAD_PROPERTIES.FOUR_ONE_ADDRESS_LENGTH.bytes +\r\n                                    binAswVersion.software.blockNumberMap[currentBlockOperation].toByte() +\r\n                                    FlashUtilities.intToByteArray(binAswVersion.software.blockLengths[binAswVersion.software.blockNumberMap[currentBlockOperation]])\r\n\r\n                            DebugLog.d(TAG, \"Executing Request download command: ${mCommand.toHex()}\")\r\n                            mLastString = \"Requesting block download\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.DOWNLOAD_ACCEPTED -> {\r\n                            transferSequence = 1\r\n\r\n\r\n\r\n                            progress = round(transferSequence.toFloat() / (bin[currentBlockOperation].size / CAL_BLOCK_TRANSFER_SIZE) * 100)\r\n\r\n                            //Send bytes, 0x36 [frame number]\r\n                            //Break the whole bin into frames of FFD size, and\r\n                            // we'll use that array.\r\n                            mCommand = UDS_COMMAND.TRANSFER_DATA.bytes +  byteArrayOf(transferSequence.toByte()) + bin[currentBlockOperation].copyOfRange(0, CAL_BLOCK_TRANSFER_SIZE)\r\n                            mLastString = \"Transfer Started\"\r\n\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.TRANSFER_DATA_ACCEPTED -> {\r\n                            val totalFrames: Int = bin[currentBlockOperation].size / CAL_BLOCK_TRANSFER_SIZE\r\n\r\n\r\n                            //If the last frame we sent was acked, increment the transfer counter\r\n                            // set the progress bar.  Check to see if we're at the total number\r\n                            // of frames that we should be (and if we are, request an exit from\r\n                            // the transfer\r\n                            if(buff[1] == transferSequence.toByte()){\r\n                                transferSequence++\r\n                                progress = round(transferSequence.toFloat() / (bin[currentBlockOperation].size / CAL_BLOCK_TRANSFER_SIZE) * 100)\r\n\r\n                                mLastString = \"\"\r\n                                //if the current transfer sequence number is larger than the max\r\n                                // number that we need for the payload, send a 'transfer exit'\r\n                                if(transferSequence > totalFrames + 1){\r\n                                    mCommand = UDS_COMMAND.TRANSFER_EXIT.bytes\r\n\r\n                                    return UDSReturn.COMMAND_QUEUED\r\n                                }\r\n                            }\r\n\r\n                            //otherwise, we get here\r\n                            // start is frame size + transfer sequence\r\n                            // end is start + frame size *OR* the end of the bin\r\n                            var start = CAL_BLOCK_TRANSFER_SIZE * (transferSequence - 1)\r\n                            var end = start + CAL_BLOCK_TRANSFER_SIZE\r\n                            if(end > bin[currentBlockOperation].size) end = bin[currentBlockOperation].size\r\n\r\n                            mCommand = UDS_COMMAND.TRANSFER_DATA.bytes + byteArrayOf(transferSequence.toByte()) + bin[currentBlockOperation].copyOfRange(start, end)\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n\r\n                        UDS_RESPONSE.TRANSFER_EXIT_ACCEPTED -> {\r\n                            progress = 0\r\n                            mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                            mTask = mTask.next()\r\n                            mLastString = \"Transfer Done\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n\r\n                        UDS_RESPONSE.NEGATIVE_RESPONSE -> {\r\n\r\n                            if(buff[2] == 0x78.toByte() ){\r\n\r\n                                mLastString = \"\"\r\n                                //just a wait message, return OK\r\n                                return UDSReturn.OK\r\n                            }\r\n                        }\r\n\r\n                        else -> {\r\n                            mLastString = buff.toHex()\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n                    }\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.PATCH_BLOCK -> {\r\n                    mLastString = \"\"\r\n\r\n                    //In the patch block stage, we're going to erase the next block (which\r\n                    // is actually the 'currentBlockOperation', and then we're going to\r\n                    // request download to the currentBlockOperation - 1... transfer the patch\r\n\r\n                    when(checkResponse(buff)){\r\n                        //We should enter here from a tester present.\r\n                        UDS_RESPONSE.POSITIVE_RESPONSE -> {\r\n                            //erase block: 31 01 FF 00 01 BLOCKID\r\n                            mCommand = UDS_COMMAND.START_ROUTINE.bytes +\r\n                                    UDS_ROUTINE.ERASE_BLOCK.bytes +\r\n                                    0x01.toByte() +\r\n                                    binAswVersion.software.blockNumberMap[currentBlockOperation].toByte()\r\n\r\n                            DebugLog.d(TAG, \"Executing ERASE block command: ${mCommand.toHex()}\")\r\n                            mLastString = \"Erasing block: $currentBlockOperation to prepare for PATCHING\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        //We should have a 71 in response to the erase command we just sent....\r\n                        UDS_RESPONSE.ROUTINE_ACCEPTED -> {\r\n                            //Request download 34 A0 41 05 00 07 FC 00\r\n\r\n                            mCommand = UDS_COMMAND.REQUEST_DOWNLOAD.bytes +\r\n                                    UDS_DOWNLOAD_PROPERTIES.ENCRYPTED_UNCOMPRESSED.bytes +\r\n                                    UDS_DOWNLOAD_PROPERTIES.FOUR_ONE_ADDRESS_LENGTH.bytes +\r\n                                    binAswVersion.software.blockNumberMap[currentBlockOperation - 1].toByte() +\r\n                                    FlashUtilities.intToByteArray(binAswVersion.software.blockLengths[binAswVersion.software.blockNumberMap[currentBlockOperation - 1]])\r\n\r\n                            DebugLog.d(TAG, \"Executing Request download command: ${mCommand.toHex()}\")\r\n                            mLastString = \"Requesting block download FOR PATCHING\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.DOWNLOAD_ACCEPTED -> {\r\n                            transferSequence = 1\r\n                            patchTransferAddress = 0\r\n                            progress = round(patchTransferAddress.toFloat() / (patchBin.size) * 100)\r\n\r\n                            //Send bytes, 0x36 [frame number]\r\n                            //Break the whole bin into frames of PATCH_TRANSFER_SIZE size, and\r\n                            // we'll use that array.\r\n                            var transferSize = patchTransferSize(patchTransferAddress)\r\n                            //patchTransferAddress += transferSize\r\n\r\n                            mCommand = UDS_COMMAND.TRANSFER_DATA.bytes +  byteArrayOf(transferSequence.toByte()) + patchBin.copyOfRange(0, transferSize)\r\n                            mLastString = \"PATCHING Started, be patient...\"\r\n                            DebugLog.d(TAG, \"transferring: $patchTransferAddress\")\r\n\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.TRANSFER_DATA_ACCEPTED -> {\r\n                            //If the last frame we sent was acked, increment the transfer counter\r\n                            // set the progress bar.  Check to see if we're at the total number\r\n                            // of frames that we should be (and if we are, request an exit from\r\n                            // the transfer\r\n                            if(buff[1] == transferSequence.toByte()){\r\n                                transferSequence++\r\n                                patchTransferAddress += patchTransferSize(patchTransferAddress)\r\n                                progress = round(patchTransferAddress.toFloat() / (patchBin.size) * 100)\r\n\r\n                                mLastString = \"\"\r\n                                //if the current transfer sequence number is larger than the max\r\n                                // number that we need for the payload, send a 'transfer exit'\r\n                                if(patchTransferAddress >= patchBin.size){\r\n                                    mCommand = UDS_COMMAND.TRANSFER_EXIT.bytes\r\n\r\n                                    return UDSReturn.COMMAND_QUEUED\r\n                                }\r\n                            }\r\n\r\n                            //otherwise, we get here\r\n                            // start is frame size + transfer sequence\r\n                            // end is start + frame size *OR* the end of the bin\r\n                            var start = patchTransferAddress\r\n                            var end = start + patchTransferSize(patchTransferAddress)\r\n\r\n                            //DebugLog.d(TAG, \"transferring patch between $start and $end\")\r\n\r\n                            if(end > patchBin.size) end = patchBin.size\r\n\r\n                            mCommand = UDS_COMMAND.TRANSFER_DATA.bytes + byteArrayOf(transferSequence.toByte()) + patchBin.copyOfRange(start, end)\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n\r\n                        UDS_RESPONSE.TRANSFER_EXIT_ACCEPTED -> {\r\n                            progress = 0\r\n                            mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                            //When we're patching, after we exit we actually want to jump back\r\n                            // up to the flash step so we can actually flash the CAL\r\n                            mTask = FLASH_ECU_CAL_SUBTASK.FLASH_BLOCK\r\n                            mLastString = \"PATCHING Done, continuing flash\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n\r\n                        UDS_RESPONSE.NEGATIVE_RESPONSE -> {\r\n                            if(buff[2] == 0x78.toByte()){\r\n                                mLastString = \"\"\r\n                                //just a wait message, return OK\r\n                                return UDSReturn.OK\r\n                            }\r\n                            else if (buff[2] == 0x72.toByte()){\r\n                                transferSequence++\r\n                                mLastString = \"\"\r\n                                DebugLog.d(TAG, \"Negative response, try again.....\")\r\n                                var start = patchTransferAddress\r\n                                var end = start + patchTransferSize(patchTransferAddress)\r\n\r\n\r\n\r\n                                if(end > patchBin.size) end = patchBin.size\r\n\r\n                                mCommand = UDS_COMMAND.TRANSFER_DATA.bytes + byteArrayOf(transferSequence.toByte()) + patchBin.copyOfRange(start, end)\r\n                                return UDSReturn.COMMAND_QUEUED\r\n                            }\r\n                        }\r\n\r\n                        else -> {\r\n                            mLastString = buff.toHex()\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n\r\n                FLASH_ECU_CAL_SUBTASK.CHECKSUM_BLOCK -> {\r\n                    when(checkResponse(buff)){\r\n\r\n                        UDS_RESPONSE.POSITIVE_RESPONSE -> {\r\n                            mCommand = UDS_COMMAND.START_ROUTINE.bytes +\r\n                                    UDS_ROUTINE.CHECKSUM_BLOCK.bytes +\r\n                                    0x01.toByte() +\r\n                                    binAswVersion.software.blockNumberMap[currentBlockOperation].toByte() +\r\n                                    0x00.toByte() + 0x04.toByte() + 0x00.toByte() + 0x00.toByte() + 0x00.toByte() + 0x00.toByte()\r\n                            mLastString = \"Checksumming block $currentBlockOperation\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.ROUTINE_ACCEPTED -> {\r\n                            mLastString = \"Block: $currentBlockOperation Checksummed OK\"\r\n                            mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n\r\n                            currentBlockOperation++\r\n\r\n                            //If there's a patch bin loaded up and we're about to flash the CAL\r\n                            //  We're going to set the flashAction to PATCH\r\n                            if(patchBin.size > 0 && currentBlockOperation == 5){\r\n                                mTask = FLASH_ECU_CAL_SUBTASK.PATCH_BLOCK\r\n                            }\r\n                            else {\r\n                                mTask = FLASH_ECU_CAL_SUBTASK.FLASH_BLOCK\r\n                            }\r\n\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.NEGATIVE_RESPONSE -> {\r\n                            if(buff[2] == 0x78.toByte()){\r\n                                mLastString = \"\"\r\n                                //just a wait message, return OK\r\n                                return UDSReturn.OK\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.VERIFY_PROGRAMMING_DEPENDENCIES -> {\r\n                    //Verify programming dependencies, routine 0xFF01\r\n                    when(checkResponse(buff)){\r\n                        UDS_RESPONSE.POSITIVE_RESPONSE -> {\r\n                            mCommand = UDS_COMMAND.START_ROUTINE.bytes + byteArrayOf(0xFF.toByte(), 0x01.toByte())\r\n                            mLastString = \"Verifying Programming Dependencies\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n\r\n                        UDS_RESPONSE.ROUTINE_ACCEPTED -> {\r\n                            mCommand = UDS_COMMAND.TESTER_PRESENT.bytes\r\n                            mTask = mTask.next()\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.NEGATIVE_RESPONSE -> {\r\n                            if(buff[2] == 0x78.toByte()){\r\n                                mLastString = \"\"\r\n                                //just a wait message, return OK\r\n                                return UDSReturn.OK\r\n                            }\r\n                        }\r\n\r\n                        else -> {\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                FLASH_ECU_CAL_SUBTASK.RESET_ECU -> {\r\n                    DebugLog.d(TAG,\"Response during reset ecu request: \" + buff.toHex())\r\n                    when(checkResponse(buff)){\r\n                        UDS_RESPONSE.POSITIVE_RESPONSE -> {\r\n                            mCommand = UDS_COMMAND.RESET_ECU.bytes\r\n                            mLastString = \"Resetting ECU!!!!\"\r\n                            return UDSReturn.COMMAND_QUEUED\r\n                        }\r\n                        UDS_RESPONSE.ECU_RESET_ACCEPTED -> {\r\n                            mLastString = \"Resetting ECU Complete, Please cycle Key\"\r\n                            bin = arrayOf(byteArrayOf(), byteArrayOf(), byteArrayOf(),\r\n                                byteArrayOf(), byteArrayOf(), byteArrayOf())\r\n                            mTask = FLASH_ECU_CAL_SUBTASK.NONE\r\n                            return UDSReturn.FLASH_COMPLETE\r\n                        }\r\n                        UDS_RESPONSE.NEGATIVE_RESPONSE -> {\r\n                            if (buff[2] == 0x78.toByte()) {\r\n                                mLastString = \"\"\r\n                                //just a wait message, return OK\r\n                                return UDSReturn.OK\r\n                            }\r\n                            else {\r\n                                return UDSReturn.ERROR_UNKNOWN\r\n                            }\r\n                        }\r\n                        else -> {\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n                    }\r\n                }\r\n\r\n                else -> {\r\n                    return UDSReturn.ERROR_UNKNOWN\r\n                }\r\n            }\r\n        }\r\n\r\n        DebugLog.d(TAG, \"Flash subroutine: $mTask \" + buff!!.toHex())\r\n        return UDSReturn.ERROR_NULL\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    private fun checkResponse(input: ByteArray): UDS_RESPONSE{\r\n        return UDS_RESPONSE.values().find {it.udsByte == input[0]} ?: UDS_RESPONSE.NO_RESPONSE\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/UDSflash.kt b/app/src/main/java/com/app/simostools/UDSflash.kt
--- a/app/src/main/java/com/app/simostools/UDSflash.kt	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/java/com/app/simostools/UDSflash.kt	(date 1638130116405)
@@ -23,6 +23,14 @@
     private var currentBlockOperation = 0
     private var patchTransferAddress = 0
 
+    fun clear() {
+        mCommand = byteArrayOf()
+        inputBin = byteArrayOf()
+        patchBin = byteArrayOf()
+        ecuAswVersion = byteArrayOf()
+        bin = arrayOf(byteArrayOf(), byteArrayOf(), byteArrayOf(), byteArrayOf(), byteArrayOf(), byteArrayOf())
+    }
+
     fun getSubtask(): FLASH_ECU_CAL_SUBTASK{
         return mTask
     }
Index: app/src/main/res/layout/fragment_playback_tabs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_playback_tabs.xml b/app/src/main/res/layout/fragment_playback_tabs.xml
new file mode 100644
--- /dev/null	(date 1638136074827)
+++ b/app/src/main/res/layout/fragment_playback_tabs.xml	(date 1638136074827)
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".PlaybackTabsFragment"
+    android:id="@+id/PlaybackTabsLayout">
+
+    <ScrollView
+        android:id="@+id/playbackLayoutScrollMain"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginBottom="64dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <LinearLayout
+            android:id="@+id/playbackLayoutScroll"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+
+        </LinearLayout>
+    </ScrollView>
+
+    <LinearLayout
+        android:id="@+id/playbackEnabledButtons"
+        android:layout_width="match_parent"
+        android:layout_height="64dp"
+        android:orientation="horizontal"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/playbackLayoutScrollMain">
+
+        <com.app.simostools.SwitchButton
+            android:id="@+id/buttonOk"
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:text="@string/button_ok"
+            android:textSize="24sp" />
+
+        <com.app.simostools.SwitchButton
+            android:id="@+id/buttonBack"
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:text="@string/button_back"
+            android:textSize="24sp" />
+
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/app/simostools/PlaybackTabsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/PlaybackTabsFragment.kt b/app/src/main/java/com/app/simostools/PlaybackTabsFragment.kt
new file mode 100644
--- /dev/null	(date 1638137835876)
+++ b/app/src/main/java/com/app/simostools/PlaybackTabsFragment.kt	(date 1638137835876)
@@ -0,0 +1,137 @@
+package com.app.simostools
+
+import android.graphics.Color
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.LinearLayout
+import androidx.fragment.app.Fragment
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.ViewModelProvider
+import androidx.navigation.fragment.findNavController
+
+class PlaybackTabsViewModel : ViewModel() {
+}
+
+class PlaybackTabsFragment: Fragment() {
+    private var TAG                                                         = "PlaybackLayoutFragment"
+    private var mTabsList:Array<androidx.appcompat.widget.SwitchCompat?>? = null
+    private lateinit var mViewModel: PlaybackTabsViewModel
+
+    override fun onDestroy() {
+        super.onDestroy()
+
+        mTabsList = null
+
+        DebugLog.d(TAG, "onDestroy")
+    }
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+
+        return inflater.inflate(R.layout.fragment_playback_tabs, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        mViewModel = ViewModelProvider(this).get(PlaybackTabsViewModel::class.java)
+
+        val setButton = view.findViewById<SwitchButton>(R.id.buttonOk)
+        setButton.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                gPlaybackData?.let { playbackData ->
+                    mTabsList?.let { tabsList ->
+                        playbackData.forEachIndexed() { i, pid ->
+                            pid?.enabled = false
+                            tabsList.forEachIndexed() { l, layout ->
+                                if(layout!!.isChecked && pid?.tabs!!.contains(layout.text))
+                                    pid.enabled = true
+                            }
+                        }
+                    }
+                }
+                findNavController().navigateUp()
+            }
+        }
+
+        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)
+        backButton.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                findNavController().navigateUp()
+            }
+        }
+
+        gPlaybackData?.let { playbackData ->
+            val lLayout = view.findViewById<LinearLayout>(R.id.playbackLayoutScroll)
+            var tabStrings:Array<String> = arrayOf()
+            playbackData.forEachIndexed() { i, pid ->
+                pid?.tabs?.split(".")?.forEach { tab ->
+                    val actualTab = tab.substringBefore("|")
+                    if (actualTab.isNotEmpty() && tabStrings.find { it == actualTab } == null) {
+                        DebugLog.d(TAG, "New Tab: $actualTab")
+                        tabStrings += actualTab
+                    }
+                }
+            }
+
+            mTabsList = arrayOfNulls(tabStrings.count())
+            mTabsList?.let { enableList ->
+                tabStrings.forEachIndexed() { i, tab ->
+                    val pidLayout = androidx.appcompat.widget.SwitchCompat(requireContext())
+                    pidLayout.text = tab
+                    pidLayout.setTextColor(ColorList.TEXT.value)
+                    pidLayout.textSize = 24f
+                    pidLayout.isChecked = false
+                    pidLayout.setTextColor(Color.WHITE)
+                    enableList[i] = pidLayout
+                    lLayout.addView(pidLayout)
+                }
+            }
+        }
+
+        DebugLog.d(TAG, "onViewCreated")
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+
+        DebugLog.d(TAG, "onDestroyView")
+    }
+
+    override fun onResume() {
+        super.onResume()
+
+        //Set background color
+        view?.setBackgroundColor(ColorList.BG_NORMAL.value)
+
+        DebugLog.d(TAG, "onResume")
+    }
+
+    override fun onPause() {
+        super.onPause()
+
+        DebugLog.d(TAG, "onPause")
+    }
+
+    override fun onStart() {
+        super.onStart()
+
+        DebugLog.d(TAG, "onStart")
+    }
+
+    override fun onStop() {
+        super.onStop()
+
+        DebugLog.d(TAG, "onStop")
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout-sw600dp/fragment_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainFragment\"\r\n    android:id=\"@+id/MainLayout\">\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imageMainLogo\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        android:src=\"@drawable/simostools\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/imageMainButtons\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/imageMainButtons\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_weight=\"1\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/imageMainLogo\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <LinearLayout\r\n            android:layout_weight=\"1\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"0dp\"\r\n            android:orientation=\"horizontal\">\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainLogging\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_weight=\"1\"\r\n                android:text=\"@string/button_logging\"\r\n                android:textSize=\"42sp\" />\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainFlashing\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:text=\"@string/button_flashing\"\r\n                android:textSize=\"42sp\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_weight=\"1\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"0dp\"\r\n            android:orientation=\"horizontal\">\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainUtilities\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:text=\"@string/button_utilities\"\r\n                android:textSize=\"42sp\" />\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainSettings\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:text=\"@string/button_settings\"\r\n                android:textSize=\"42sp\" />\r\n\r\n        </LinearLayout>\r\n        <com.app.simostools.SwitchButton\r\n            android:id=\"@+id/buttonMainExit\"\r\n            android:layout_marginHorizontal=\"64dp\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"128dp\"\r\n            android:text=\"@string/button_exit\"\r\n            android:textSize=\"42sp\" />\r\n\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp/fragment_main.xml b/app/src/main/res/layout-sw600dp/fragment_main.xml
--- a/app/src/main/res/layout-sw600dp/fragment_main.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/layout-sw600dp/fragment_main.xml	(date 1637980490161)
@@ -58,6 +58,14 @@
             android:layout_height="0dp"
             android:orientation="horizontal">
 
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonMainPlayback"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_playback"
+                android:textSize="42sp" />
+
             <com.app.simostools.SwitchButton
                 android:id="@+id/buttonMainUtilities"
                 android:layout_weight="1"
@@ -66,6 +74,13 @@
                 android:text="@string/button_utilities"
                 android:textSize="42sp" />
 
+        </LinearLayout>
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:orientation="horizontal">
+
             <com.app.simostools.SwitchButton
                 android:id="@+id/buttonMainSettings"
                 android:layout_weight="1"
@@ -74,14 +89,14 @@
                 android:text="@string/button_settings"
                 android:textSize="42sp" />
 
-        </LinearLayout>
-        <com.app.simostools.SwitchButton
-            android:id="@+id/buttonMainExit"
-            android:layout_marginHorizontal="64dp"
-            android:layout_width="match_parent"
-            android:layout_height="128dp"
-            android:text="@string/button_exit"
-            android:textSize="42sp" />
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonMainExit"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_exit"
+                android:textSize="42sp" />
 
+        </LinearLayout>
     </LinearLayout>
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable-v24/ic_launcher_foreground.xml\" value=\"0.3026041666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable/circle_shape.xml\" value=\"0.4036458333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable/circular_progress_bar.xml\" value=\"0.4036458333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable/circular_progress_bar_land.xml\" value=\"0.3098958333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable/ic_launcher_background.xml\" value=\"0.3026041666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout-land/fragment_first.xml\" value=\"0.24250440917107582\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout-land/fragment_logging.xml\" value=\"0.328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/activity_main.xml\" value=\"0.21822916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/content_main.xml\" value=\"0.21822916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_color.xml\" value=\"0.2765625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_color_picker.xml\" value=\"0.348731884057971\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom.xml\" value=\"0.2921875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom1.xml\" value=\"0.2916666666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom2.xml\" value=\"0.2916666666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom3.xml\" value=\"0.2916666666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom4.xml\" value=\"0.2916666666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_first.xml\" value=\"0.2864583333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_flashing.xml\" value=\"0.36231884057971014\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_logging.xml\" value=\"0.30052083333333335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_main.xml\" value=\"0.29322916666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_settings.xml\" value=\"0.2859375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_settings_color.xml\" value=\"0.2859375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_settings_main.xml\" value=\"0.2859375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/mode_22.xml\" value=\"0.2421875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_land.xml\" value=\"0.30052083333333335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_land_bar.xml\" value=\"0.29322916666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_land_round.xml\" value=\"0.3713768115942029\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_portrait.xml\" value=\"0.30052083333333335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_portrait_bar.xml\" value=\"0.29322916666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_portrait_round.xml\" value=\"0.3713768115942029\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/menu/menu_main.xml\" value=\"0.30052083333333335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\" value=\"0.3026041666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_color.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_flashing.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_logging_full.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_logging_layout.xml\" value=\"0.2328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_logging_main.xml\" value=\"0.2292768959435626\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_main.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_pid.xml\" value=\"0.23192239858906524\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_settings.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_settings_logging.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_settings_main.xml\" value=\"0.328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_utilities.xml\" value=\"0.328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_color.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_flashing.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_logging_main.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_main.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_pid.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_settings_main.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_utilities.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_color.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_flashing.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_logging_main.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_main.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_message.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_pid.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_settings_main.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_settings_mode22.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_settings_pid.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_utilities.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/pid_land.xml\" value=\"0.22109375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/pid_portrait.xml\" value=\"0.22109375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/settings_pid.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/activity_main.xml\" value=\"0.34103260869565216\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/flashing_message.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_color.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_custom1.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_flashing.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_custom1.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_custom2.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_custom3.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_custom4.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_full.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_layout.xml\" value=\"0.275\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_main.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_main.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_message.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_pid.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings.xml\" value=\"0.28541666666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_car.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_general.xml\" value=\"0.28633405639913234\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_main.xml\" value=\"0.34103260869565216\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_mode22.xml\" value=\"0.34103260869565216\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_mode3E.xml\" value=\"0.34103260869565216\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_mode3e.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_pid.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_utilities.xml\" value=\"0.37681159420289856\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/message.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/pid_land.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/pid_portrait.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/settings_pid.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/settings_pid_small.xml\" value=\"0.2708333333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\" value=\"0.3109375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout-land/fragment_first.xml\" value=\"0.328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout-land/fragment_logging.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/PIDland.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/activity_main.xml\" value=\"0.21979166666666666\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/content_main.xml\" value=\"0.21927083333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/fragment_first.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/fragment_flashing.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/fragment_logging.xml\" value=\"0.296875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/fragment_settings.xml\" value=\"0.335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/message.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/pid_land.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/pid_portrait.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/menu/menu_main.xml\" value=\"0.30104166666666665\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/.idea/misc.xml	(date 1638153270901)
@@ -42,6 +42,7 @@
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_logging_main.xml" value="0.2292768959435626" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_main.xml" value="0.2495590828924162" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_pid.xml" value="0.23192239858906524" />
+        <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_playback.xml" value="0.328042328042328" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_settings.xml" value="0.2495590828924162" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_settings_logging.xml" value="0.2495590828924162" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_settings_main.xml" value="0.328042328042328" />
@@ -51,6 +52,7 @@
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_logging_main.xml" value="0.17603748326639893" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_main.xml" value="0.17603748326639893" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_pid.xml" value="0.17603748326639893" />
+        <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_playback.xml" value="0.178714859437751" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_settings_main.xml" value="0.17603748326639893" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_utilities.xml" value="0.17603748326639893" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_color.xml" value="0.20546875" />
@@ -59,6 +61,7 @@
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_main.xml" value="0.20546875" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_message.xml" value="0.20546875" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_pid.xml" value="0.20546875" />
+        <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_playback.xml" value="0.20859375" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_settings_main.xml" value="0.20546875" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_settings_mode22.xml" value="0.20546875" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_settings_pid.xml" value="0.20546875" />
@@ -82,6 +85,9 @@
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_main.xml" value="0.2890625" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_message.xml" value="0.27395833333333336" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_pid.xml" value="0.27395833333333336" />
+        <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_playback.xml" value="0.27395833333333336" />
+        <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_playback_enabled.xml" value="0.27395833333333336" />
+        <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_playback_tabs.xml" value="0.36684782608695654" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings.xml" value="0.28541666666666665" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_car.xml" value="0.27395833333333336" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_general.xml" value="0.28633405639913234" />
Index: app/src/main/java/com/app/simostools/DebugLog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.Context\r\nimport android.util.Log\r\nimport java.io.*\r\nimport java.lang.Exception\r\nimport java.time.Instant\r\nimport java.time.ZoneOffset\r\nimport java.time.format.DateTimeFormatter\r\n\r\nobject DebugLog {\r\n    private val TAG = \"DebugLog\"\r\n    private var mBufferedWriter: BufferedWriter? = null\r\n    private var mFlags: Int = ConfigSettings.DEBUG_LOG.toInt()\r\n\r\n    fun setFlags(flags: Int) {\r\n        if(flags in 0 .. 32) {\r\n            mFlags = flags\r\n            d(TAG,\"Set debug flags to: $flags\")\r\n        }\r\n    }\r\n\r\n    fun getFlags(): Int {\r\n        return mFlags\r\n    }\r\n\r\n    fun create(fileName: String?, context: Context?) {\r\n        context?.let {\r\n            close()\r\n\r\n            try {\r\n                val path = it.getExternalFilesDir(\"\")\r\n                val logFile = File(path, \"/$fileName\")\r\n                if (!logFile.exists()) {\r\n                    logFile.createNewFile()\r\n                }\r\n                mBufferedWriter = BufferedWriter(FileWriter(logFile, true))\r\n            } catch(e: Exception) {\r\n                Log.e(TAG, \"Error opening debug log\", e)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun close() {\r\n        try {\r\n            mBufferedWriter?.close()\r\n            mBufferedWriter = null\r\n        } catch (e: Exception) {\r\n            Log.e(TAG, \"File already closed\", e)\r\n        }\r\n    }\r\n\r\n    fun i(tag: String, text: String) {\r\n        Log.i(tag, text)\r\n\r\n        if((mFlags and DEBUG_LOG_INFO) == 0)\r\n            return\r\n\r\n        add(\"${timeStamp()} [I] $tag: $text\")\r\n        newLine()\r\n    }\r\n\r\n    fun w(tag: String, text: String) {\r\n        Log.w(tag, text)\r\n\r\n        if((mFlags and DEBUG_LOG_WARNING) == 0)\r\n            return\r\n\r\n        add(\"${timeStamp()} [W] $tag: $text\")\r\n        newLine()\r\n    }\r\n\r\n    fun d(tag: String, text: String) {\r\n        Log.d(tag, text)\r\n\r\n        if((mFlags and DEBUG_LOG_DEBUG) == 0)\r\n            return\r\n\r\n        add(\"${timeStamp()} [D] $tag: $text\")\r\n        newLine()\r\n    }\r\n\r\n    fun e(tag: String, text: String, e: Exception) {\r\n        Log.e(tag, text, e)\r\n\r\n        if((mFlags and DEBUG_LOG_EXCEPTION) == 0)\r\n            return\r\n\r\n        add(\"${timeStamp()} [E] $tag: $text\")\r\n        newLine()\r\n    }\r\n\r\n    fun c(tag: String, buff: ByteArray?, from: Boolean) {\r\n        buff?.let {\r\n            if ((mFlags and DEBUG_LOG_COMMUNICATIONS) == 0)\r\n                return\r\n\r\n            val dirString = if (from) \"${it.count()} ->\"\r\n                else \"${it.count()}  <-\"\r\n\r\n            add(\"${timeStamp()} [C] $tag: [$dirString] ${it.toHex()}\")\r\n            newLine()\r\n        }\r\n    }\r\n\r\n    private fun newLine() {\r\n        try {\r\n            mBufferedWriter?.let {\r\n                it.newLine()\r\n                it.flush()\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.e(TAG, \"Error starting new debug line\", e)\r\n        }\r\n    }\r\n\r\n    private fun add(text: String) {\r\n        if(mFlags == DEBUG_LOG_NONE)\r\n            return\r\n\r\n        try {\r\n            mBufferedWriter?.append(text)\r\n        } catch (e: Exception) {\r\n            Log.e(TAG, \"Error appending debug log\", e)\r\n        }\r\n    }\r\n\r\n    private fun timeStamp(): String {\r\n        return DateTimeFormatter\r\n            .ofPattern(\"yyyy-MM-dd HH:mm:ss.SSS\")\r\n            .withZone(ZoneOffset.systemDefault())\r\n            .format(Instant.now())\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/DebugLog.kt b/app/src/main/java/com/app/simostools/DebugLog.kt
--- a/app/src/main/java/com/app/simostools/DebugLog.kt	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/java/com/app/simostools/DebugLog.kt	(date 1638022383216)
@@ -35,6 +35,7 @@
                     logFile.createNewFile()
                 }
                 mBufferedWriter = BufferedWriter(FileWriter(logFile, true))
+                i(TAG, "Log open.")
             } catch(e: Exception) {
                 Log.e(TAG, "Error opening debug log", e)
             }
@@ -43,6 +44,7 @@
 
     fun close() {
         try {
+            i(TAG, "Closing log.")
             mBufferedWriter?.close()
             mBufferedWriter = null
         } catch (e: Exception) {
Index: app/src/main/java/com/app/simostools/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.app.Activity\r\nimport android.bluetooth.BluetoothAdapter\r\nimport android.bluetooth.BluetoothManager\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.content.IntentFilter\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.pm.PackageManager\r\nimport android.os.*\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.ViewModel\r\nimport android.graphics.drawable.ColorDrawable\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport java.util.*\r\n\r\n\r\nclass MainViewModel : ViewModel() {\r\n    var started: Boolean                    = false\r\n    var connectionState: BLEConnectionState = BLEConnectionState.NONE\r\n    var currentTask: UDSTask                = UDSTask.NONE\r\n    var guiTimer: Timer?                    = null\r\n    var writeLog: Boolean                   = false\r\n}\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private val TAG = \"MainActivity\"\r\n    private var mAskingPermission = false\r\n    private lateinit var mViewModel: MainViewModel\r\n\r\n    var resultBTLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n        if (result.resultCode == Activity.RESULT_OK) {\r\n            doConnect()\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        mViewModel = ViewModelProvider(this).get(MainViewModel::class.java)\r\n\r\n        if (!mViewModel.started) {\r\n            //Start debuglog\r\n            DebugLog.create(getString(R.string.filename_debug_log), applicationContext)\r\n\r\n            //Read config file\r\n            ConfigFile.read(getString(R.string.filename_config), applicationContext)\r\n\r\n            //Build default PID data in case we don't load a csv\r\n            PIDs.init()\r\n\r\n            //Write pid default files\r\n            UDSLoggingMode.values().forEach { mode ->\r\n                //write default\r\n                PIDCSVFile.write(getString(R.string.filename_pid_csv, mode.cfgName), applicationContext, PIDs.getList(mode), false)\r\n\r\n                //Read pid files\r\n                val pidList = PIDCSVFile.read(getString(R.string.filename_pid_csv, mode.cfgName), applicationContext, mode.addressMin, mode.addressMax)\r\n                if (pidList != null)\r\n                    PIDs.setList(mode, pidList)\r\n            }\r\n\r\n            //Start our BT Service\r\n            sendServiceMessage(BTServiceTask.START_SERVICE.toString())\r\n\r\n            //get permissions\r\n            getPermissions()\r\n\r\n            //start GUI timer\r\n            if(mViewModel.guiTimer == null) {\r\n                // creating timer task, timer\r\n                mViewModel.guiTimer = Timer()\r\n\r\n                val task = object : TimerTask() {\r\n                    override fun run() {\r\n                        timerCallback()\r\n                    }\r\n                }\r\n                mViewModel.guiTimer?.scheduleAtFixedRate(task, 1000, 1000)\r\n            }\r\n\r\n            //Save started\r\n            mViewModel.started = true\r\n        }\r\n\r\n        setContentView(R.layout.activity_main)\r\n        setSupportActionBar(findViewById(R.id.toolbar))\r\n        window.statusBarColor = ColorList.BT_BG.value\r\n        window.navigationBarColor = ColorList.BT_BG.value\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        setStatus()\r\n\r\n        val filter = IntentFilter()\r\n        filter.addAction(GUIMessage.STATE_CONNECTION.toString())\r\n        filter.addAction(GUIMessage.STATE_TASK.toString())\r\n        filter.addAction(GUIMessage.WRITE_LOG.toString())\r\n        filter.addAction(GUIMessage.TOAST.toString())\r\n        registerReceiver(mBroadcastReceiver, filter)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        unregisterReceiver(mBroadcastReceiver)\r\n    }\r\n\r\n    private val mBroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            when (intent.action) {\r\n                GUIMessage.STATE_TASK.toString() -> {\r\n                    mViewModel.currentTask = intent.getSerializableExtra(GUIMessage.STATE_TASK.toString()) as UDSTask\r\n                    setStatus()\r\n                }\r\n                GUIMessage.STATE_CONNECTION.toString() -> {\r\n                    val connectionState = intent.getSerializableExtra(GUIMessage.STATE_CONNECTION.toString()) as BLEConnectionState\r\n                    mViewModel.connectionState = connectionState\r\n                    mViewModel.currentTask = UDSTask.NONE\r\n                    setStatus()\r\n                }\r\n                GUIMessage.WRITE_LOG.toString() -> {\r\n                    if(intent.getBooleanExtra(GUIMessage.WRITE_LOG.toString(), false)) {\r\n                        mViewModel.writeLog = true\r\n                        setStatus()\r\n                    } else {\r\n                        mViewModel.writeLog = false\r\n                        setStatus()\r\n                    }\r\n                }\r\n                GUIMessage.TOAST.toString() -> {\r\n                    val nToast = intent.getStringExtra(GUIMessage.TOAST.toString())\r\n                    Toast.makeText(context, nToast, Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun timerCallback() {\r\n        when(mViewModel.connectionState) {\r\n            BLEConnectionState.ERROR      -> doConnect()\r\n            BLEConnectionState.NONE       -> doConnect()\r\n            BLEConnectionState.CONNECTING -> { }\r\n            BLEConnectionState.CONNECTED  -> {\r\n                if(ConfigSettings.AUTO_LOG.toBoolean() && mViewModel.currentTask == UDSTask.NONE) {\r\n                    sendServiceMessage(BTServiceTask.DO_START_LOG.toString())\r\n                }\r\n            }\r\n        }\r\n        sendServiceMessage(BTServiceTask.REQ_STATUS.toString())\r\n    }\r\n\r\n    private fun sendServiceMessage(type: String) {\r\n        applicationContext?.let {\r\n            val serviceIntent = Intent(it, BTService::class.java)\r\n            serviceIntent.action = type\r\n            startForegroundService(serviceIntent)\r\n        }\r\n    }\r\n\r\n    private fun doConnect() {\r\n        //If we are already connecting abort\r\n        if(mViewModel.connectionState > BLEConnectionState.NONE)\r\n            return\r\n\r\n        //if BT is off ask to enable\r\n        if (!(getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager).adapter.isEnabled) {\r\n            val intent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)\r\n            resultBTLauncher.launch(intent)\r\n            return\r\n        }\r\n\r\n        //check permissions\r\n        var havePermissions = true\r\n        RequiredPermissions.values().forEach {\r\n            if(it.required && it.result == PackageManager.PERMISSION_DENIED)\r\n                havePermissions = false\r\n        }\r\n\r\n        if(havePermissions) {\r\n            //Tell service to connect\r\n            sendServiceMessage(BTServiceTask.DO_CONNECT.toString())\r\n        } else {\r\n            checkNextPermission(0, true)\r\n        }\r\n    }\r\n\r\n    private fun doDisconnect() {\r\n        sendServiceMessage(BTServiceTask.DO_DISCONNECT.toString())\r\n    }\r\n\r\n    private fun setStatus() {\r\n        var newString = \"\"\r\n        when(mViewModel.currentTask) {\r\n            UDSTask.NONE -> {\r\n                when(mViewModel.connectionState) {\r\n                    BLEConnectionState.ERROR -> {\r\n                        newString = getString(R.string.title_error, mViewModel.connectionState.errorMessage)\r\n                        setActionBarColor(ColorList.ST_ERROR.value)\r\n                    }\r\n                    BLEConnectionState.NONE -> {\r\n                        newString = getString(R.string.title_not_connected)\r\n                        setActionBarColor(ColorList.ST_NONE.value)\r\n                    }\r\n                    BLEConnectionState.CONNECTING -> {\r\n                        newString = getString(R.string.title_connecting)\r\n                        setActionBarColor(ColorList.ST_CONNECTING.value)\r\n                    }\r\n                    BLEConnectionState.CONNECTED -> {\r\n                        newString = getString(R.string.title_connected_to, mViewModel.connectionState.deviceName)\r\n                        setActionBarColor(ColorList.ST_CONNECTED.value)\r\n                    }\r\n                }\r\n            }\r\n            UDSTask.LOGGING -> {\r\n                if(mViewModel.writeLog) {\r\n                    newString = \"Logging\"\r\n                    setActionBarColor(ColorList.ST_WRITING.value)\r\n                } else {\r\n                    newString = \"Polling\"\r\n                    setActionBarColor(ColorList.ST_LOGGING.value)\r\n                }\r\n            }\r\n            UDSTask.FLASHING -> {\r\n                newString = \"Flashing\"\r\n                setActionBarColor(ColorList.ST_LOGGING.value)\r\n            }\r\n            UDSTask.INFO        -> newString = \"Getting ECU Info\"\r\n            UDSTask.DTC_GET     -> newString = \"Getting DTC\"\r\n            UDSTask.DTC_CLEAR   -> newString = \"Clearing DTC\"\r\n            UDSTask.SET_ADAPTER -> newString = \"Setting Adapter Name\"\r\n        }\r\n        supportActionBar?.title = getString(R.string.app_name) + \" - \" + newString\r\n    }\r\n\r\n    private fun setActionBarColor(color: Int) {\r\n        val colorDrawable = ColorDrawable(color)\r\n        supportActionBar?.setBackgroundDrawable(colorDrawable)\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n\r\n        mAskingPermission = false\r\n\r\n        if(requestCode < RequiredPermissions.values().count())\r\n        {\r\n            RequiredPermissions.values()[requestCode].result = grantResults.firstOrNull() ?: PackageManager.PERMISSION_DENIED\r\n            if(RequiredPermissions.values()[requestCode].required && RequiredPermissions.values()[requestCode].result == PackageManager.PERMISSION_DENIED) {\r\n                DebugLog.i(TAG, \"Permission was denied and is required ${RequiredPermissions.values()[requestCode].permission}.\")\r\n                checkNextPermission(requestCode)\r\n            } else {\r\n                if (requestCode == RequiredPermissions.values().count() - 1) {\r\n                    doConnect()\r\n                } else {\r\n                    checkNextPermission(requestCode + 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Function to check and request permission.\r\n    private fun checkPermission(permission: String, requestCode: Int): Boolean {\r\n        if(mAskingPermission)\r\n            return false\r\n\r\n        if (Build.VERSION.SDK_INT >= RequiredPermissions.values()[requestCode].version &&\r\n            ContextCompat.checkSelfPermission(this@MainActivity, permission) == PackageManager.PERMISSION_DENIED) {\r\n            // Requesting the permission\r\n            DebugLog.i(TAG, \"Asking for permission $permission\")\r\n            mAskingPermission = true\r\n            ActivityCompat.requestPermissions(this@MainActivity, arrayOf(permission), requestCode)\r\n            return false\r\n        }\r\n\r\n        RequiredPermissions.values()[requestCode].result = PackageManager.PERMISSION_GRANTED\r\n        DebugLog.i(TAG, \"Already granted $permission\")\r\n\r\n        return true\r\n    }\r\n\r\n    private fun checkNextPermission(permission: Int, required: Boolean = false): Boolean {\r\n        for(i in permission until RequiredPermissions.values().count()) {\r\n            if(required && !RequiredPermissions.values()[i].required)\r\n                continue\r\n\r\n            if(!checkPermission(RequiredPermissions.values()[i].permission, i))\r\n                return false\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    private fun getPermissions() {\r\n        // Use this check to determine whether BLE is supported on the device.  Then you can\r\n        // selectively disable BLE-related features.\r\n        if (!packageManager.hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {\r\n            Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show()\r\n            finish()\r\n        }\r\n\r\n\r\n        if (checkNextPermission(0))\r\n            doConnect()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/MainActivity.kt b/app/src/main/java/com/app/simostools/MainActivity.kt
--- a/app/src/main/java/com/app/simostools/MainActivity.kt	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/java/com/app/simostools/MainActivity.kt	(date 1638134672015)
@@ -19,7 +19,6 @@
 import androidx.lifecycle.ViewModelProvider
 import java.util.*
 
-
 class MainViewModel : ViewModel() {
     var started: Boolean                    = false
     var connectionState: BLEConnectionState = BLEConnectionState.NONE
@@ -31,7 +30,7 @@
 class MainActivity : AppCompatActivity() {
     private val TAG = "MainActivity"
     private var mAskingPermission = false
-    private lateinit var mViewModel: MainViewModel
+    lateinit var mViewModel: MainViewModel
 
     var resultBTLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
         if (result.resultCode == Activity.RESULT_OK) {
@@ -71,17 +70,7 @@
             getPermissions()
 
             //start GUI timer
-            if(mViewModel.guiTimer == null) {
-                // creating timer task, timer
-                mViewModel.guiTimer = Timer()
-
-                val task = object : TimerTask() {
-                    override fun run() {
-                        timerCallback()
-                    }
-                }
-                mViewModel.guiTimer?.scheduleAtFixedRate(task, 1000, 1000)
-            }
+            startGUITimer()
 
             //Save started
             mViewModel.started = true
@@ -91,6 +80,17 @@
         setSupportActionBar(findViewById(R.id.toolbar))
         window.statusBarColor = ColorList.BT_BG.value
         window.navigationBarColor = ColorList.BT_BG.value
+
+        DebugLog.d(TAG, "onCreate")
+    }
+
+    override fun onDestroy() {
+        //stop timer
+        stopGUITimer()
+
+        super.onDestroy()
+
+        DebugLog.d(TAG, "onDestroy")
     }
 
     override fun onResume() {
@@ -104,12 +104,16 @@
         filter.addAction(GUIMessage.WRITE_LOG.toString())
         filter.addAction(GUIMessage.TOAST.toString())
         registerReceiver(mBroadcastReceiver, filter)
+
+        DebugLog.d(TAG, "onResume")
     }
 
     override fun onPause() {
         super.onPause()
 
         unregisterReceiver(mBroadcastReceiver)
+
+        DebugLog.d(TAG, "onPause")
     }
 
     private val mBroadcastReceiver = object : BroadcastReceiver() {
@@ -309,4 +313,25 @@
         if (checkNextPermission(0))
             doConnect()
     }
+
+    fun startGUITimer() {
+        if(mViewModel.guiTimer == null) {
+            // creating timer task, timer
+            mViewModel.guiTimer = Timer()
+
+            val task = object : TimerTask() {
+                override fun run() {
+                    timerCallback()
+                }
+            }
+            mViewModel.guiTimer?.scheduleAtFixedRate(task, 1000, 1000)
+        }
+    }
+
+    fun stopGUITimer() {
+        if(mViewModel.guiTimer != null) {
+            mViewModel.guiTimer?.cancel()
+            mViewModel.guiTimer = null
+        }
+    }
 }
Index: app/src/main/java/com/app/simostools/DTCs.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\ndata class DTCStruct(val code: Int,\r\n                      val pcode: String,\r\n                      val name: String,\r\n                      val symbol: String)\r\n\r\nobject DTCs {\r\n    private val TAG         = \"DTCs\"\r\n    var list: Array<DTCStruct?> = arrayOf(\r\n        DTCStruct(14823,\"P060600\",\"ECM/PCM Processor\",\"SV_ERR_SYM_ACQ_KNK.14823\"),\r\n        DTCStruct(14824,\"P157500\",\"Right Electro-Hydraulic Engine Mount Solenoid Valve Short circuit to B+\",\"SV_ERR_SYM_AEB_SCP_0.14824\"),\r\n        DTCStruct(14825,\"P157600\",\"Right Electro-Hydraulic Engine Mount Solenoid Valve Short circuit to ground\",\"SV_ERR_SYM_AEB_SCG_0.14825\"),\r\n        DTCStruct(14826,\"P157700\",\"Right Electro-Hydraulic Engine Mount Solenoid Valve Open circuit\",\"SV_ERR_SYM_AEB_OC_0.14826\"),\r\n        DTCStruct(14827,\"P157100\",\"Left Electro-Hydraulic Engine Mount Solenoid Valve Short circuit to B+\",\"SV_ERR_SYM_AEB_SCP_1.14827\"),\r\n        DTCStruct(14828,\"P157200\",\"Left Electro-Hydraulic Engine Mount Solenoid Valve Short circuit to ground\",\"SV_ERR_SYM_AEB_SCG_1.14828\"),\r\n        DTCStruct(14829,\"P157300\",\"Left Electro-Hydraulic Engine Mount Solenoid Valve Open circuit\",\"SV_ERR_SYM_AEB_OC_1.14829\"),\r\n        DTCStruct(14830,\"P241400\",\"02 Sensor Exhaust Sample Error, Bank 1 Sensor 1\",\"SV_ERR_SYM_AIR_LSL_UP_1.14830\"),\r\n        DTCStruct(14831,\"P138700\",\"Ctrl. module faulty\",\"SV_ERR_SYM_AMP_SCP.14831\"),\r\n        DTCStruct(14832,\"P138700\",\"Ctrl. module faulty\",\"SV_ERR_SYM_AMP_SCG.14832\"),\r\n        DTCStruct(14842,\"P032700\",\"Knock Sensor 1 Circ. Low Input\",\"SV_ERR_SYM_BAS_KNK_0.14842\"),\r\n        DTCStruct(14844,\"P057200\",\"Brake Switch A Circuit Low\",\"SV_ERR_SYM_BLS_BTS_PLAUS.14844\"),\r\n        DTCStruct(14846,\"P256300\",\"Turbocharger Boost Control Position Sensor Circuit Range/Performance\",\"SV_ERR_SYM_BPA_AD_BOL_1.14846\"),\r\n        DTCStruct(14847,\"P226300\",\"Turbocharger/Supercharger Boost System Performance\",\"SV_ERR_SYM_BPA_AD_FIRST_1.14847\"),\r\n        DTCStruct(14849,\"P004500\",\"Turbocharger/Supercharger Boost Control Solenoid A Circuit/Open\",\"SV_ERR_SYM_BPA_DR_OC_1.14849\"),\r\n        DTCStruct(14851,\"P334A00\",\"Charge pressure actuator Electrical error\",\"SV_ERR_SYM_BPA_DR_SC_1.14851\"),\r\n        DTCStruct(14863,\"P036600\",\"Camshaft Pos.Sensor B Circ. (Bank 1) Range/Performance\",\"SV_ERR_SYM_CAM_PER_EX_1.14863\"),\r\n        DTCStruct(14864,\"P034100\",\"Camshaft Pos.Sensor Circ. Range/Performance\",\"SV_ERR_SYM_CAM_PER_IN_1.14864\"),\r\n        DTCStruct(14865,\"P036500\",\"Camshaft Position Sensor B Circuit (Bank 1)\",\"SV_ERR_SYM_CAM_NO_SIG_EX_1.14865\"),\r\n        DTCStruct(14866,\"P034000\",\"Camshaft Position Sensor Circuit\",\"SV_ERR_SYM_CAM_NO_SIG_IN_1.14866\"),\r\n        DTCStruct(14867,\"P001700\",\"Crankshaft Position-Camshaft Position Correlation Bank 1 Sensor B\",\"SV_ERR_SYM_CAM_REF_CRK_EX_1.14867\"),\r\n        DTCStruct(14868,\"P001600\",\"Crankshaft Position-Camshaft Position Correlation Bank 1 Sensor A\",\"SV_ERR_SYM_CAM_REF_CRK_IN_1.14868\"),\r\n        DTCStruct(14869,\"P001400\",\"B Camshaft Position (Bank1) Timing over-advanced or System Performance\",\"SV_ERR_SYM_CAM_STAT_VCP_EX_1.14869\"),\r\n        DTCStruct(14870,\"P001100\",\"A Camshaft Position (Bank1) Timing over-advanced or System Performance\",\"SV_ERR_SYM_CAM_STAT_VCP_IN_1.14870\"),\r\n        DTCStruct(14871,\"P036600\",\"Camshaft Pos.Sensor B Circ. (Bank 1) Range/Performance\",\"SV_ERR_SYM_CAM_SYN_CRK_EX_1.14871\"),\r\n        DTCStruct(14872,\"P034100\",\"Camshaft Pos.Sensor Circ. Range/Performance\",\"SV_ERR_SYM_CAM_SYN_CRK_IN_1.14872\"),\r\n        DTCStruct(14873,\"P036600\",\"Camshaft Pos.Sensor B Circ. (Bank 1) Range/Performance\",\"SV_ERR_SYM_CAM_SYN_EX_1.14873\"),\r\n        DTCStruct(14874,\"P034100\",\"Camshaft Pos.Sensor Circ. Range/Performance\",\"SV_ERR_SYM_CAM_SYN_IN_1.14874\"),\r\n        DTCStruct(14913,\"P023400\",\"Turbo/Super Charger Overboost Condition\",\"SV_ERR_SYM_CAP_H.14913\"),\r\n        DTCStruct(14914,\"P029900\",\"Turbo/Super Charger Underboost\",\"SV_ERR_SYM_CAP_L.14914\"),\r\n        DTCStruct(14916,\"P042000\",\"Catalyst System,Bank1 Efficiency Below Threshold\",\"SV_ERR_SYM_CAT_DIAG_1.14916\"),\r\n        DTCStruct(14920,\"P172400\",\"Signal for starter lock Short circuit to ground\",\"SV_ERR_SYM_CLU_SWI_2_SCG.14920\"),\r\n        DTCStruct(14922,\"P060600\",\"ECM/PCM Processor\",\"SV_ERR_SYM_CONV_PLAUS.14922\"),\r\n        DTCStruct(14923,\"P160900\",\"Crash shut-off was triggered\",\"SV_ERR_SYM_CRASH.14923\"),\r\n        DTCStruct(14925,\"P033500\",\"Crankshaft Position Sensor A Circuit\",\"SV_ERR_SYM_CRK_NO_SIG.14925\"),\r\n        DTCStruct(14926,\"P033500\",\"Crankshaft Position Sensor A Circuit\",\"SV_ERR_SYM_CRK_SHO_LEVEL.14926\"),\r\n        DTCStruct(14927,\"P033600\",\"Crankshaft Position Sensor A Circuit Range/Performance\",\"SV_ERR_SYM_CRK_SYN.14927\"),\r\n        DTCStruct(14928,\"P033900\",\"Crankshaft Position Sensor A Circuit Intermittent\",\"SV_ERR_SYM_CRK_SYN_STST.14928\"),\r\n        DTCStruct(14929,\"P033600\",\"Crankshaft Position Sensor A Circuit Range/Performance\",\"SV_ERR_SYM_CRK_TOOTH_NR.14929\"),\r\n        DTCStruct(14930,\"P033600\",\"Crankshaft Position Sensor A Circuit Range/Performance\",\"SV_ERR_SYM_CRK_TOOTH_PER.14930\"),\r\n        DTCStruct(14931,\"P033600\",\"Crankshaft Position Sensor A Circuit Range/Performance\",\"SV_ERR_SYM_CRK_TOOTH_NR_STST.14931\"),\r\n        DTCStruct(14939,\"P308200\",\"Clutch position sensor Implausible signal\",\"SV_ERR_SYM_CS_PV.14939\"),\r\n        DTCStruct(14955,\"P209700\",\"Post Catalyst Fuel Trim System Bank 1 Too Rich\",\"SV_ERR_SYM_LAM_ADJ_DIAG_MAX_1.14955\"),\r\n        DTCStruct(14956,\"P209600\",\"Post Catalyst Fuel Trim System Bank1 Too Lean\",\"SV_ERR_SYM_LAM_ADJ_DIAG_MIN_1.14956\"),\r\n        DTCStruct(14961,\"P013300\",\"O2 Sensor Circ.,Bank1-Sensor1 Slow Response\",\"SV_ERR_SYM_DYN_LS_UP_1.14961\"),\r\n        DTCStruct(14982,\"P060600\",\"ECM/PCM Processor\",\"SV_ERR_SYM_ECU_1.14982\"),\r\n        DTCStruct(14983,\"P060100\",\"Internal Contr.Module Memory Check Sum Error\",\"SV_ERR_SYM_ECU_2_CKS_SW.14983\"),\r\n        DTCStruct(14984,\"P060100\",\"Internal Contr.Module Memory Check Sum Error\",\"SV_ERR_SYM_ECU_2_CKS_CAL.14984\"),\r\n        DTCStruct(14985,\"P060100\",\"Internal Contr.Module Memory Check Sum Error\",\"SV_ERR_SYM_ECU_2_EEPROM.14985\"),\r\n        DTCStruct(14989,\"P164000\",\"Ctrl. module faulty\",\"SV_ERR_SYM_ECU_5.14989\"),\r\n        DTCStruct(14990,\"P157000\",\"Engine Control Module (ECM) disabled\",\"SV_ERR_SYM_ECU_6.14990\"),\r\n        DTCStruct(14993,\"P025D00\",\"Fuel Pump Module Control Circuit High\",\"SV_ERR_SYM_EFPPWM_SCP.14993\"),\r\n        DTCStruct(14994,\"P025C00\",\"Fuel Pump Module Control Circuit Low\",\"SV_ERR_SYM_EFPPWM_SCG.14994\"),\r\n        DTCStruct(14995,\"P025A00\",\"Fuel Pump Module Control Circuit/Open\",\"SV_ERR_SYM_EFPPWM_OC.14995\"),\r\n        DTCStruct(14996,\"P304500\",\"Fuel pump electronics Faulty\",\"SV_ERR_SYM_EFPPWM_FB_A_INT.14996\"),\r\n        DTCStruct(14997,\"P308E00\",\"Fuel pump electronics Excess temp.\",\"SV_ERR_SYM_EFPPWM_FB_A_PUMP_1.14997\"),\r\n        DTCStruct(14998,\"P308D00\",\"Fuel pump Engine speed too low\",\"SV_ERR_SYM_EFPPWM_FB_A_PUMP_2.14998\"),\r\n        DTCStruct(14999,\"P304300\",\"Fuel pump mechanical malfunction\",\"SV_ERR_SYM_EFPPWM_FB_A_VB.14999\"),\r\n        DTCStruct(15000,\"P304400\",\"Fuel pump Short circuit\",\"SV_ERR_SYM_EFPPWM_FB_B_1.15000\"),\r\n        DTCStruct(15001,\"P307300\",\"Fuel pump Electrical error in circuit\",\"SV_ERR_SYM_EFPPWM_FB_B_2.15001\"),\r\n        DTCStruct(15002,\"P307700\",\"Fuel Pump Electronics, voltage supply Electrical error\",\"SV_ERR_SYM_EFPPWM_FB_B_3.15002\"),\r\n        DTCStruct(15005,\"P008900\",\"Fuel Pressure Regulator 1 Performance\",\"SV_ERR_SYM_FUP_EFP_CTL_I.15005\"),\r\n        DTCStruct(15007,\"P008900\",\"Fuel Pressure Regulator 1 Performance\",\"SV_ERR_SYM_FUP_EFP_CTL_DIF.15007\"),\r\n        DTCStruct(15008,\"P044500\",\"Evaporativ Emiss.System Purge Control Valve Circ. Shorted\",\"SV_ERR_SYM_EL_CPS_SCP.15008\"),\r\n        DTCStruct(15009,\"P044500\",\"Evaporativ Emiss.System Purge Control Valve Circ. Shorted\",\"SV_ERR_SYM_EL_CPS_SCG.15009\"),\r\n        DTCStruct(15010,\"P044400\",\"Evaporativ Emiss.System Purge Control Valve Circ. Open\",\"SV_ERR_SYM_EL_CPS_OC.15010\"),\r\n        DTCStruct(15013,\"P003300\",\"Turbo Charger Bypass Valve Control Circuit\",\"SV_ERR_SYM_EL_RCL_ACR_SCP.15013\"),\r\n        DTCStruct(15014,\"P003400\",\"Turbo Charger Bypass Valve Control Circuit Low\",\"SV_ERR_SYM_EL_RCL_ACR_SCG.15014\"),\r\n        DTCStruct(15015,\"P003300\",\"Turbo Charger Bypass Valve Control Circuit\",\"SV_ERR_SYM_EL_RCL_ACR_OC.15015\"),\r\n        DTCStruct(15025,\"P181C00\",\"Gear recognition sensor Implausible signal\",\"SV_ERR_SYM_FRQ_NEUT_GEAR_H.15025\"),\r\n        DTCStruct(15026,\"P181C00\",\"Gear recognition sensor Implausible signal\",\"SV_ERR_SYM_FRQ_NEUT_GEAR_L.15026\"),\r\n        DTCStruct(15027,\"P125000\",\"Fuel level too low\",\"SV_ERR_SYM_FRS_ACT.15027\"),\r\n        DTCStruct(15028,\"P017100\",\"Fuel Trim,Bank1 System too Lean\",\"SV_ERR_SYM_FSD_LAM_LIM_MAX_1.15028\"),\r\n        DTCStruct(15029,\"P017200\",\"Fuel Trim,Bank1 System too Rich\",\"SV_ERR_SYM_FSD_LAM_LIM_MIN_1.15029\"),\r\n        DTCStruct(15030,\"P218700\",\"System too lean at idle, Bank 1\",\"SV_ERR_SYM_FSD_MAX_1.15030\"),\r\n        DTCStruct(15031,\"P218800\",\"System too rich at idle, Bank 1\",\"SV_ERR_SYM_FSD_MIN_1.15031\"),\r\n        DTCStruct(15032,\"P21F800\",\"Fuel Control System B Too Lean at Idle Bank 1\",\"SV_ERR_SYM_FSD_OPT_MAX_1.15032\"),\r\n        DTCStruct(15033,\"P21F900\",\"Fuel Control System B Too Rich at Idle Bank 1\",\"SV_ERR_SYM_FSD_OPT_MIN_1.15033\"),\r\n        DTCStruct(15034,\"P019000\",\"Fuel Rail Pressure Sensor A Circuit\",\"SV_ERR_SYM_FUP_H.15034\"),\r\n        DTCStruct(15035,\"P019200\",\"Fuel Rail Pressure Sensor A Circuit Low Input\",\"SV_ERR_SYM_FUP_L.15035\"),\r\n        DTCStruct(15038,\"P253900\",\"Low Pressure Fuel System Sensor Circuit\",\"SV_ERR_SYM_FUP_EFP_H.15038\"),\r\n        DTCStruct(15039,\"P254100\",\"Low Pressure Fuel System Sensor Circuit Low Input\",\"SV_ERR_SYM_FUP_EFP_L.15039\"),\r\n        DTCStruct(15041,\"P119A00\",\"Fuel pressure sensor Malfunction\",\"SV_ERR_SYM_FUP_MFP_PLAUS_H.15041\"),\r\n        DTCStruct(15042,\"P119A00\",\"Fuel pressure sensor Malfunction\",\"SV_ERR_SYM_FUP_MFP_PLAUS_L.15042\"),\r\n        DTCStruct(15044,\"P019100\",\"Fuel Rail Pressure Sensor A Circuit Range/Performance\",\"SV_ERR_SYM_FUP_ORNG_TOL_2.15044\"),\r\n        DTCStruct(15048,\"P048000\",\"Cooling Fan 1 Control Circuit\",\"SV_ERR_SYM_ECF_EL_OC_1.15048\"),\r\n        DTCStruct(15053,\"U100800\",\"Diagnostic interface for data bus Read out DTC\",\"SV_ERR_SYM_GEN_LOAD_CAN.15053\"),\r\n        DTCStruct(15057,\"P008800\",\"Fuel Rail/System Pressure - Too High\",\"SV_ERR_SYM_H_PRS_SYS_TOL_1.15057\"),\r\n        DTCStruct(15058,\"P008700\",\"Fuel Rail/System Pressure - Too Low\",\"SV_ERR_SYM_H_PRS_SYS_BOL_1.15058\"),\r\n        DTCStruct(15059,\"P008700\",\"Fuel Rail/System Pressure - Too Low\",\"SV_ERR_SYM_H_PRS_SYS_BOL_2.15059\"),\r\n        DTCStruct(15060,\"P230200\",\"Ignition Coil A Secondary Circuit\",\"SV_ERR_SYM_IGC_OC_0.15060\"),\r\n        DTCStruct(15061,\"P230500\",\"Ignition Coil B Secondary Circuit\",\"SV_ERR_SYM_IGC_OC_3.15061\"),\r\n        DTCStruct(15062,\"P230800\",\"Ignition Coil C Secondary Circuit\",\"SV_ERR_SYM_IGC_OC_1.15062\"),\r\n        DTCStruct(15063,\"P231100\",\"Ignition Coil D Secondary Circuit\",\"SV_ERR_SYM_IGC_OC_2.15063\"),\r\n        DTCStruct(15064,\"P230000\",\"Ignition Coil A Primary Control Circuit Low\",\"SV_ERR_SYM_IGC_SCG_0.15064\"),\r\n        DTCStruct(15065,\"P230300\",\"Ignition Coil B Primary Control Circuit Low\",\"SV_ERR_SYM_IGC_SCG_3.15065\"),\r\n        DTCStruct(15066,\"P230600\",\"Ignition Coil C Primary Control Circuit Low\",\"SV_ERR_SYM_IGC_SCG_1.15066\"),\r\n        DTCStruct(15067,\"P230900\",\"Ignition Coil D Primary Control Circuit Low\",\"SV_ERR_SYM_IGC_SCG_2.15067\"),\r\n        DTCStruct(15068,\"P230100\",\"Ignition Coil A Primary Control Circuit High\",\"SV_ERR_SYM_IGC_SCP_0.15068\"),\r\n        DTCStruct(15069,\"P230400\",\"Ignition Coil B Primary Control Circuit High\",\"SV_ERR_SYM_IGC_SCP_3.15069\"),\r\n        DTCStruct(15070,\"P230700\",\"Ignition Coil C Primary Control Circuit High\",\"SV_ERR_SYM_IGC_SCP_1.15070\"),\r\n        DTCStruct(15071,\"P231000\",\"Ignition Coil D Primary Control Circuit High\",\"SV_ERR_SYM_IGC_SCP_2.15071\"),\r\n        DTCStruct(15072,\"P157000\",\"Engine Control Module (ECM) disabled\",\"SV_ERR_SYM_IMMO_LOCK.15072\"),\r\n        DTCStruct(15073,\"P157000\",\"Engine Control Module (ECM) disabled\",\"SV_ERR_SYM_IMMO_DEAC.15073\"),\r\n        DTCStruct(15074,\"P130A00\",\"Hide cylinder\",\"SV_ERR_SYM_INH_INJ_MIS.15074\"),\r\n        DTCStruct(15077,\"P050700\",\"Idle Control System RPM Higher than Expected\",\"SV_ERR_SYM_ISC_H.15077\"),\r\n        DTCStruct(15078,\"P050600\",\"Idle Control System RPM Lower than Expected\",\"SV_ERR_SYM_ISC_L.15078\"),\r\n        DTCStruct(15082,\"P233600\",\"Cylinder #1 Above Knock Threshold\",\"SV_ERR_SYM_KNK_RTD_LIM_0.15082\"),\r\n        DTCStruct(15083,\"P233700\",\"Cylinder #2 Above Knock Threshold\",\"SV_ERR_SYM_KNK_RTD_LIM_3.15083\"),\r\n        DTCStruct(15084,\"P233800\",\"Cylinder #3 Above Knock Threshold\",\"SV_ERR_SYM_KNK_RTD_LIM_1.15084\"),\r\n        DTCStruct(15085,\"P233900\",\"Cylinder #4 Above Knock Threshold\",\"SV_ERR_SYM_KNK_RTD_LIM_2.15085\"),\r\n        DTCStruct(15087,\"P008B00\",\"Low Pressure Fuel System Pressure - Too High\",\"SV_ERR_SYM_FUP_EFP_ORNG_TOL_1.15087\"),\r\n        DTCStruct(15088,\"P008A00\",\"Low Pressure Fuel System Pressure - Too Low\",\"SV_ERR_SYM_FUP_EFP_ORNG_BOL.15088\"),\r\n        DTCStruct(15090,\"P069100\",\"Cooling Fan 1 Control Circuit Low\",\"SV_ERR_SYM_ECF_EL_SCG_1.15090\"),\r\n        DTCStruct(15099,\"P006800\",\"MAP/MAF - Throttle Position Correlation\",\"SV_ERR_SYM_LOAD_PLAUS.15099\"),\r\n        DTCStruct(15100,\"P006800\",\"MAP/MAF - Throttle Position Correlation\",\"SV_ERR_SYM_TPS_PLAUS.15100\"),\r\n        DTCStruct(15101,\"P006800\",\"MAP/MAF - Throttle Position Correlation\",\"SV_ERR_SYM_AMP_TPS_PLAUS.15101\"),\r\n        DTCStruct(15120,\"P010800\",\"Manifold Abs.Pressure or Bar.Pressure High Input\",\"SV_ERR_SYM_MAP_SCP.15120\"),\r\n        DTCStruct(15121,\"P010700\",\"Manifold Abs.Pressure or Bar.Pressure Low Input\",\"SV_ERR_SYM_MAP_SCG.15121\"),\r\n        DTCStruct(15125,\"P030100\",\"Cyl.1 Misfire Detected\",\"SV_ERR_SYM_MIS_0.15125\"),\r\n        DTCStruct(15126,\"P069200\",\"Cooling Fan 1 Control Circuit High\",\"SV_ERR_SYM_ECF_EL_SCP_1.15126\"),\r\n        DTCStruct(15128,\"P030200\",\"Cyl.2 Misfire Detected\",\"SV_ERR_SYM_MIS_3.15128\"),\r\n        DTCStruct(15129,\"P194400\",\"Coolant fan control module 1 Excess temp.\",\"SV_ERR_SYM_ECF_FB_1_1.15129\"),\r\n        DTCStruct(15130,\"P195000\",\"Coolant fan for coolant difficulty of movement/blocked\",\"SV_ERR_SYM_ECF_FB_1_2.15130\"),\r\n        DTCStruct(15131,\"P030300\",\"Cyl.3 Misfire Detected\",\"SV_ERR_SYM_MIS_1.15131\"),\r\n        DTCStruct(15132,\"P194500\",\"Coolant Fan Control (FC) Control Module 1, fan activation Short circuit\",\"SV_ERR_SYM_ECF_FB_1_3.15132\"),\r\n        DTCStruct(15133,\"P194600\",\"Coolant fan control module 1 Faulty/open circuit in voltage supply\",\"SV_ERR_SYM_ECF_FB_1_4.15133\"),\r\n        DTCStruct(15134,\"P030400\",\"Cyl.4 Misfire Detected\",\"SV_ERR_SYM_MIS_2.15134\"),\r\n        DTCStruct(15137,\"P030000\",\"Random/Multiple Cylinder Misfire Detected\",\"SV_ERR_SYM_MIS_MPL.15137\"),\r\n        DTCStruct(15139,\"P060600\",\"ECM/PCM Processor\",\"SV_ERR_SYM_MON_3.15139\"),\r\n        DTCStruct(15145,\"P154500\",\"Throttle valve control system Malfunction\",\"SV_ERR_SYM_ETC_PWM_2.15145\"),\r\n        DTCStruct(15146,\"P154500\",\"Throttle valve control system Malfunction\",\"SV_ERR_SYM_TPS_DIF.15146\"),\r\n        DTCStruct(15148,\"P021900\",\"Engine Overspeed Condition\",\"SV_ERR_SYM_N_MAX_VVL_H.15148\"),\r\n        DTCStruct(15149,\"P021900\",\"Engine Overspeed Condition\",\"SV_ERR_SYM_N_MAX_VVL_L.15149\"),\r\n        DTCStruct(15152,\"P150C00\",\"RPM request from transmission cannot be performed\",\"SV_ERR_SYM_N_SP_IS_TCU.15152\"),\r\n        DTCStruct(15154,\"P15A100\",\"Neutral position sensor Implausible signal\",\"SV_ERR_SYM_NEUT_GEAR_COAST.15154\"),\r\n        DTCStruct(15155,\"P15A100\",\"Neutral position sensor Implausible signal\",\"SV_ERR_SYM_NEUT_GEAR_PU.15155\"),\r\n        DTCStruct(15157,\"P160A00\",\"Ctrl. module faulty\",\"SV_ERR_SYM_NVMCRYPT_KEY.15157\"),\r\n        DTCStruct(15158,\"P160A00\",\"Ctrl. module faulty\",\"SV_ERR_SYM_NVMCRYPT_PLAUS.15158\"),\r\n        DTCStruct(15159,\"P160A00\",\"Ctrl. module faulty\",\"SV_ERR_SYM_NVMCRYPT_SW.15159\"),\r\n        DTCStruct(15170,\"P019800\",\"Engine Oil Temperature Sensor Circuit high\",\"SV_ERR_SYM_OIL_SENS_EL.15170\"),\r\n        DTCStruct(15171,\"P019600\",\"Engine Oil Temperature Sensor Circuit range/performance\",\"SV_ERR_SYM_OIL_SENS_PLAUS.15171\"),\r\n        DTCStruct(15177,\"P039B00\",\"Cylinder 1 Pressure Too High\",\"SV_ERR_SYM_PI_0.15177\"),\r\n        DTCStruct(15178,\"P03A500\",\"Cylinder 2 Pressure Too High\",\"SV_ERR_SYM_PI_3.15178\"),\r\n        DTCStruct(15179,\"P03AF00\",\"Cylinder 3 Pressure Too High\",\"SV_ERR_SYM_PI_1.15179\"),\r\n        DTCStruct(15180,\"P03B900\",\"Cylinder 4 Pressure Too High\",\"SV_ERR_SYM_PI_2.15180\"),\r\n        DTCStruct(15181,\"P226100\",\"Turbo Boost Pressure Not Detected Mechanical\",\"SV_ERR_SYM_PLAUS_CLOSE_RCL.15181\"),\r\n        DTCStruct(15182,\"P15A100\",\"Neutral position sensor Implausible signal\",\"SV_ERR_SYM_PLAUS_NEUT_GEAR_H.15182\"),\r\n        DTCStruct(15183,\"P15A100\",\"Neutral position sensor Implausible signal\",\"SV_ERR_SYM_PLAUS_NEUT_GEAR_L.15183\"),\r\n        DTCStruct(15184,\"P15A100\",\"Neutral position sensor Implausible signal\",\"SV_ERR_SYM_PLAUS_NEUT_GEAR_MID.15184\"),\r\n        DTCStruct(15186,\"P085100\",\"Park/Neutral Switch Input Circuit Low\",\"SV_ERR_SYM_PN_SCG.15186\"),\r\n        DTCStruct(15187,\"P085000\",\"Park/Neutral Switch Input Circuit\",\"SV_ERR_SYM_PN_SCP_OC.15187\"),\r\n        DTCStruct(15188,\"P164B00\",\"Oil pressure switch Malfunction\",\"SV_ERR_SYM_POIL_H_WARN.15188\"),\r\n        DTCStruct(15189,\"P164D00\",\"Reduced oil pressure switch Malfunction\",\"SV_ERR_SYM_POIL_L_WARN.15189\"),\r\n        DTCStruct(15190,\"P164A00\",\"Oil pressure switch Implausible signal\",\"SV_ERR_SYM_POIL_SWI_H_PLAUS.15190\"),\r\n        DTCStruct(15191,\"P164C00\",\"Reduced oil pressure switch Implausible signal\",\"SV_ERR_SYM_POIL_SWI_L_PLAUS.15191\"),\r\n        DTCStruct(15192,\"P201000\",\"Intake Manifold Runner Bank 1 Control Circuit High\",\"SV_ERR_SYM_PORT_SCP.15192\"),\r\n        DTCStruct(15193,\"P200900\",\"Intake Manifold Runner Bank 1 Control Circuit Low\",\"SV_ERR_SYM_PORT_SCG.15193\"),\r\n        DTCStruct(15194,\"P200800\",\"Intake Manifold Runner Bank 1 Control Circuit/Open\",\"SV_ERR_SYM_PORT_OC.15194\"),\r\n        DTCStruct(15195,\"P201500\",\"Intake Manifold Runner Position Sensor/Switch Circuit Range/Performance\",\"SV_ERR_SYM_PORT_AD_1.15195\"),\r\n        DTCStruct(15196,\"P201700\",\"Intake Manifold Runner Position Sensor/Switch Circuit High\",\"SV_ERR_SYM_PORT_FB_EL_H_1.15196\"),\r\n        DTCStruct(15197,\"P201400\",\"Intake Manifold Runner Position Sensor/Switch Circuit\",\"SV_ERR_SYM_PORT_FB_EL_L_1.15197\"),\r\n        DTCStruct(15198,\"P200400\",\"Intake Manifold Runner Control Bank 1 Stuck Open\",\"SV_ERR_SYM_PORT_MEC_DOWN_1.15198\"),\r\n        DTCStruct(15200,\"P200600\",\"Intake Manifold Runner Control Bank 1 Stuck Closed\",\"SV_ERR_SYM_PORT_MEC_UP_1.15200\"),\r\n        DTCStruct(15209,\"P164E00\",\"Oil pressure regulation valve Electrical error\",\"SV_ERR_SYM_PUMP_OIL_EL_SCP.15209\"),\r\n        DTCStruct(15210,\"P164E00\",\"Oil pressure regulation valve Electrical error\",\"SV_ERR_SYM_PUMP_OIL_EL_SCG.15210\"),\r\n        DTCStruct(15211,\"P164E00\",\"Oil pressure regulation valve Electrical error\",\"SV_ERR_SYM_PUMP_OIL_EL_OC.15211\"),\r\n        DTCStruct(15212,\"P023800\",\"Turbocharger Boost Sensor (A) Circ. High Input\",\"SV_ERR_SYM_PUT_SCP.15212\"),\r\n        DTCStruct(15213,\"P023700\",\"Turbocharger Boost Sensor (A) Circ. Low Input\",\"SV_ERR_SYM_PUT_SCG.15213\"),\r\n        DTCStruct(15217,\"U101000\",\"Electrical Parking Brake Control Module Read out DTC\",\"SV_ERR_SYM_PV_CLU_CAN_PBR.15217\"),\r\n        DTCStruct(15218,\"P212300\",\"Throttle/Pedal Pos. Sens./Switch D Circuit High Input\",\"SV_ERR_SYM_PVS_H_1.15218\"),\r\n        DTCStruct(15219,\"P212200\",\"Throttle/Pedal Pos. Sens./Switch D Circuit Low Input\",\"SV_ERR_SYM_PVS_L_1.15219\"),\r\n        DTCStruct(15220,\"P212800\",\"Throttle/Pedal Pos. Sens./Switch E Circuit High Input\",\"SV_ERR_SYM_PVS_H_2.15220\"),\r\n        DTCStruct(15221,\"P212700\",\"Throttle/Pedal Pos. Sens./Switch E Circuit Low Input\",\"SV_ERR_SYM_PVS_L_2.15221\"),\r\n        DTCStruct(15222,\"P213800\",\"Throttle/Pedal Position Sensor/Switch D/E Voltage Correlation\",\"SV_ERR_SYM_PVS_DRIFT.15222\"),\r\n        DTCStruct(15224,\"P213800\",\"Throttle/Pedal Position Sensor/Switch D/E Voltage Correlation\",\"SV_ERR_SYM_PVS_RATIO.15224\"),\r\n        DTCStruct(15226,\"P00AF00\",\"Turbocharger/Supercharger Boost Control A Module Performance\",\"SV_ERR_SYM_PWM_BPA_H_1.15226\"),\r\n        DTCStruct(15227,\"P00AF00\",\"Turbocharger/Supercharger Boost Control A Module Performance\",\"SV_ERR_SYM_PWM_BPA_L_1.15227\"),\r\n        DTCStruct(15230,\"P032600\",\"Knock Sensor 1 Circuit Range/Performance\",\"SV_ERR_SYM_REL_KNK_0.15230\"),\r\n        DTCStruct(15236,\"U102100\",\"Body computer 1/ veh. elec sys CM / cent elec. Read out DTC\",\"SV_ERR_SYM_WIP_LIN.15236\"),\r\n        DTCStruct(15237,\"P056200\",\"System Voltage Low Voltage\",\"SV_ERR_SYM_RLY_MAIN_DLY.15237\"),\r\n        DTCStruct(15239,\"P068600\",\"EMC/PCM Power Relay Control Circuit Low\",\"SV_ERR_SYM_RLY_MAIN_PLAUS_OFF.15239\"),\r\n        DTCStruct(15240,\"P068700\",\"EMC/PCM Power Relay Control Circuit High\",\"SV_ERR_SYM_RLY_MAIN_PLAUS_ON.15240\"),\r\n        DTCStruct(15242,\"P068700\",\"EMC/PCM Power Relay Control Circuit High\",\"SV_ERR_SYM_RLY_MAIN_EL_SCP.15242\"),\r\n        DTCStruct(15243,\"P065900\",\"Actuator Supply Voltage A Circuit High\",\"SV_ERR_SYM_PWR_RLY_EL_SCP_0.15243\"),\r\n        DTCStruct(15244,\"P065800\",\"Actuator Supply Voltage A Circuit Low\",\"SV_ERR_SYM_PWR_RLY_EL_SCG_0.15244\"),\r\n        DTCStruct(15245,\"P065700\",\"Actuator Supply Voltage A Circuit/Open\",\"SV_ERR_SYM_PWR_RLY_EL_OL_0.15245\"),\r\n        DTCStruct(15259,\"P139700\",\"Sensor Wheel for Engine Speed adaptation limit reached\",\"SV_ERR_SYM_SEG_AD_ER.15259\"),\r\n        DTCStruct(15261,\"P219500\",\"O2 Sensor Signal Stuck Lean Bank 1 Sensor 1\",\"SV_ERR_SYM_SHIFT_AFL_LSL_UP_1.15261\"),\r\n        DTCStruct(15262,\"P219600\",\"O2 Sensor Signal Stuck Rich Bank 1 Sensor 1\",\"SV_ERR_SYM_SHIFT_AFR_LSL_UP_1.15262\"),\r\n        DTCStruct(15263,\"P15A000\",\"Neutral position sensor Electrical error\",\"SV_ERR_SYM_SIG_NEUT_GEAR_H.15263\"),\r\n        DTCStruct(15264,\"P15A000\",\"Neutral position sensor Electrical error\",\"SV_ERR_SYM_SIG_NEUT_GEAR_L.15264\"),\r\n        DTCStruct(15265,\"P209100\",\"B Camshaft Position Actuator Control Circuit(Bank1) High\",\"SV_ERR_SYM_SLV_SCP_VCP_EX_1.15265\"),\r\n        DTCStruct(15266,\"P104900\",\"Bank1, camshaft adjustment valve (exhaust) Short circuit to ground\",\"SV_ERR_SYM_SLV_SCG_VCP_EX_1.15266\"),\r\n        DTCStruct(15267,\"P105000\",\"Bank1, camshaft adjustment valve (exhaust) Open circuit\",\"SV_ERR_SYM_SLV_OC_VCP_EX_1.15267\"),\r\n        DTCStruct(15268,\"P152600\",\"Bank1, camshaft adjustment Short circuit to B+\",\"SV_ERR_SYM_SLV_SCP_VCP_IN_1.15268\"),\r\n        DTCStruct(15269,\"P152700\",\"Bank1, camshaft adjustment Short circuit to ground\",\"SV_ERR_SYM_SLV_SCG_VCP_IN_1.15269\"),\r\n        DTCStruct(15270,\"P152800\",\"Bank1, camshaft adjustment Open circuit\",\"SV_ERR_SYM_SLV_OC_VCP_IN_1.15270\"),\r\n        DTCStruct(15277,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_SPI_PBK_IV_CYC_0.15277\"),\r\n        DTCStruct(15281,\"P308800\",\"Starter relay Electrical error in circuit\",\"SV_ERR_SYM_ST_CTL.15281\"),\r\n        DTCStruct(15282,\"P305400\",\"Starter does not turn Mechanically blocked or electrical malfunction\",\"SV_ERR_SYM_ST_DFCT.15282\"),\r\n        DTCStruct(15283,\"P167E00\",\"Start/stop restart Maximum start time exceeded\",\"SV_ERR_SYM_ST_NOT_OK.15283\"),\r\n        DTCStruct(15284,\"P253500\",\"Ignition Switch Run/ Start Position Curciut High\",\"SV_ERR_SYM_ST_REQ_PLAUS_H.15284\"),\r\n        DTCStruct(15288,\"P304600\",\"Starter relay 1 Electrical malfunction in circuit (relay stuck/does not switch)\",\"SV_ERR_SYM_STR_1_DFCT.15288\"),\r\n        DTCStruct(15289,\"P061500\",\"Starter Relay Circuit\",\"SV_ERR_SYM_STR_1_OC.15289\"),\r\n        DTCStruct(15290,\"P061600\",\"Starter Relay Circuit Low\",\"SV_ERR_SYM_STR_1_SCG.15290\"),\r\n        DTCStruct(15291,\"P061700\",\"Starter Relay Circuit High\",\"SV_ERR_SYM_STR_1_SCP.15291\"),\r\n        DTCStruct(15292,\"P305000\",\"Starter relay 2 Electrical malfunction in circuit (relay stuck/does not switch)\",\"SV_ERR_SYM_STR_2_DFCT.15292\"),\r\n        DTCStruct(15293,\"P304900\",\"Activation starter relay 2 Open circuit\",\"SV_ERR_SYM_STR_2_OC.15293\"),\r\n        DTCStruct(15294,\"P304800\",\"Activation starter relay 2 Short circuit to ground\",\"SV_ERR_SYM_STR_2_SCG.15294\"),\r\n        DTCStruct(15295,\"P304700\",\"Activation starter relay 2 Short circuit to B+\",\"SV_ERR_SYM_STR_2_SCP.15295\"),\r\n        DTCStruct(15296,\"P305200\",\"Starter activation, return message terminal 50 Short circuit to B+\",\"SV_ERR_SYM_STR_FB_H.15296\"),\r\n        DTCStruct(15297,\"P305300\",\"Starter activation, return message terminal 50 Short circuit to ground/open circuit\",\"SV_ERR_SYM_STR_FB_L.15297\"),\r\n        DTCStruct(15306,\"P139700\",\"Sensor Wheel for Engine Speed adaptation limit reached\",\"SV_ERR_SYM_T_SEG_ER.15306\"),\r\n        DTCStruct(15313,\"P011800\",\"Engine Coolant Temperature Sensor 1 Circuit High\",\"SV_ERR_SYM_LTS_EL_H_TCE.15313\"),\r\n        DTCStruct(15314,\"P011700\",\"Engine Coolant Temperature Sensor 1 Circuit Low\",\"SV_ERR_SYM_LTS_EL_L_TCE.15314\"),\r\n        DTCStruct(15315,\"U042500\",\"Invalid Data Received From Auxiliary Heater Control Module\",\"SV_ERR_SYM_THEAT_CAN_ICH.15315\"),\r\n        DTCStruct(15318,\"P011600\",\"Engine Coolant Temperature Sensor 1 Circuit Range/Performance\",\"SV_ERR_SYM_TLTS_STUCK_L_TCE.15318\"),\r\n        DTCStruct(15319,\"P011600\",\"Engine Coolant Temperature Sensor 1 Circuit Range/Performance\",\"SV_ERR_SYM_TLTS_STUCK_H_TCE.15319\"),\r\n        DTCStruct(15320,\"P181E00\",\"Gear recognition sensor Gear position implausible\",\"SV_ERR_SYM_GEAR_SIG_PLAUS_CUS.15320\"),\r\n        DTCStruct(15321,\"P181D00\",\"Gear recognition sensor Error\",\"SV_ERR_SYM_GEAR_SENS_PLAUS_CUS.15321\"),\r\n        DTCStruct(15323,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_TCS_NPLAU.15323\"),\r\n        DTCStruct(15324,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_TCS_WRG_REQ.15324\"),\r\n        DTCStruct(15326,\"P168200\",\"Databus drivetrain Implausible message from ABS control module\",\"SV_ERR_SYM_TCS_MSR_VS_MIN.15326\"),\r\n        DTCStruct(15327,\"P254500\",\"Torque Management Request Input Signal A Range/Performance\",\"SV_ERR_SYM_GB_INTV_TQ_INT.15327\"),\r\n        DTCStruct(15328,\"P254500\",\"Torque Management Request Input Signal A Range/Performance\",\"SV_ERR_SYM_GB_INTV_AC_VEH.15328\"),\r\n        DTCStruct(15329,\"P162400\",\"Requirement - malfunction lamp on active\",\"SV_ERR_SYM_TCU1.15329\"),\r\n        DTCStruct(15332,\"P218100\",\"Cooling System Performance\",\"SV_ERR_SYM_TH.15332\"),\r\n        DTCStruct(15336,\"P181B00\",\"Gear recognition sensor Electrical error\",\"SV_ERR_SYM_TOUT_NEUT_GEAR.15336\"),\r\n        DTCStruct(15337,\"P012300\",\"Throttle/Pedal Pos.Sensor A Circ. High Input\",\"SV_ERR_SYM_VP_TPS_1_H.15337\"),\r\n        DTCStruct(15338,\"P012200\",\"Throttle/Pedal Pos.Sensor A Circ. Low Input\",\"SV_ERR_SYM_VP_TPS_1_L.15338\"),\r\n        DTCStruct(15339,\"P022300\",\"Throttle/Pedal Position Sensor/Switch B High Input\",\"SV_ERR_SYM_VP_TPS_2_H.15339\"),\r\n        DTCStruct(15340,\"P022200\",\"Throttle/Pedal Position Sensor/Switch B Low Input\",\"SV_ERR_SYM_VP_TPS_2_L.15340\"),\r\n        DTCStruct(15341,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_AD_LIH.15341\"),\r\n        DTCStruct(15342,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_AD_BOL_ORNG.15342\"),\r\n        DTCStruct(15343,\"P029900\",\"Turbo/Super Charger Underboost\",\"SV_ERR_SYM_LEAK_UP_THR.15343\"),\r\n        DTCStruct(15344,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_AD_BOL.15344\"),\r\n        DTCStruct(15345,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_AD_BOL_SPR.15345\"),\r\n        DTCStruct(15346,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_AD_TOL.15346\"),\r\n        DTCStruct(15347,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_AD_TOL_SPR.15347\"),\r\n        DTCStruct(15348,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_AD_CDN_BAT.15348\"),\r\n        DTCStruct(15349,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_AD_CDN.15349\"),\r\n        DTCStruct(15350,\"P012100\",\"Throttle/Pedal Pos.Sensor A Circ. Range/Performance\",\"SV_ERR_SYM_TPS_MAF_1.15350\"),\r\n        DTCStruct(15351,\"P022100\",\"Throttle/Pedal Position Sensor/Switch B Range/Performance\",\"SV_ERR_SYM_TPS_MAF_2.15351\"),\r\n        DTCStruct(15353,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_ST_CHK_LIH.15353\"),\r\n        DTCStruct(15355,\"P063800\",\"Throttle Actuator Control (Bank1) Range/Performance\",\"SV_ERR_SYM_TPS_ST_CHK_SPR.15355\"),\r\n        DTCStruct(15364,\"P161200\",\"Engine control module (ECM) Incorrect coding\",\"SV_ERR_SYM_VAR_COD_DFT.15364\"),\r\n        DTCStruct(15365,\"U030000\",\"Internal Control Module Software Incompatibility\",\"SV_ERR_SYM_VAR_COD.15365\"),\r\n        DTCStruct(15366,\"U030200\",\"Software Incompatibility with Transmission Control Module\",\"SV_ERR_SYM_VAR_COD_TCU.15366\"),\r\n        DTCStruct(15367,\"P056300\",\"System Voltage High Voltage\",\"SV_ERR_SYM_VP_PWR_H_0.15367\"),\r\n        DTCStruct(15368,\"P056200\",\"System Voltage Low Voltage\",\"SV_ERR_SYM_VP_PWR_L_0.15368\"),\r\n        DTCStruct(15369,\"P217700\",\"System too lean off idle, Bank 1\",\"SV_ERR_SYM_FSD_FAC_MAX_1.15369\"),\r\n        DTCStruct(15370,\"P217800\",\"System too rich off idle, Bank 1\",\"SV_ERR_SYM_FSD_FAC_MIN_1.15370\"),\r\n        DTCStruct(15371,\"P21F400\",\"Fuel Control System B Too Lean Off Idle Bank 1\",\"SV_ERR_SYM_FSD_OPT_FAC_MAX_1.15371\"),\r\n        DTCStruct(15372,\"P064300\",\"Sensor Reference Voltage A Circuit High\",\"SV_ERR_SYM_VCC_H_0.15372\"),\r\n        DTCStruct(15373,\"P064200\",\"Sensor Reference Voltage A Circuit Low\",\"SV_ERR_SYM_VCC_L_0.15373\"),\r\n        DTCStruct(15374,\"P065300\",\"Sensor Reference Voltage B Circuit High\",\"SV_ERR_SYM_VCC_H_1.15374\"),\r\n        DTCStruct(15375,\"P065200\",\"Sensor Reference Voltage B Circuit Low\",\"SV_ERR_SYM_VCC_L_1.15375\"),\r\n        DTCStruct(15376,\"P229400\",\"Fuel Pressure Regulator 2 Control Circuit\",\"SV_ERR_SYM_VCV_OC.15376\"),\r\n        DTCStruct(15377,\"P229500\",\"Fuel Pressure Regulator 2 Control Circuit Low\",\"SV_ERR_SYM_VCV_SCG.15377\"),\r\n        DTCStruct(15378,\"P009200\",\"Fuel Pressure Regulator 1 Control Circuit High\",\"SV_ERR_SYM_VCV_SCP.15378\"),\r\n        DTCStruct(15379,\"P21F500\",\"Fuel Control System B Too Rich Off Idle Bank 1\",\"SV_ERR_SYM_FSD_OPT_FAC_MIN_1.15379\"),\r\n        DTCStruct(15381,\"P11A100\",\"Cam Shift Actuator A Cylinder 1 Circuit/Open\",\"SV_ERR_SYM_VLFT_1_OC_0.15381\"),\r\n        DTCStruct(15382,\"P11A500\",\"Cam Shift Actuator A Cylinder 2 Circuit/Open\",\"SV_ERR_SYM_VLFT_1_OC_3.15382\"),\r\n        DTCStruct(15383,\"P11A900\",\"Cam Shift Actuator A Cylinder 3 Circuit/Open\",\"SV_ERR_SYM_VLFT_1_OC_1.15383\"),\r\n        DTCStruct(15384,\"P11AD00\",\"Cam Shift Actuator A Cylinder 4 Circuit/Open\",\"SV_ERR_SYM_VLFT_1_OC_2.15384\"),\r\n        DTCStruct(15385,\"P11A100\",\"Cam Shift Actuator A Cylinder 1 Circuit/Open\",\"SV_ERR_SYM_VLFT_1_SCG_0.15385\"),\r\n        DTCStruct(15386,\"P11A500\",\"Cam Shift Actuator A Cylinder 2 Circuit/Open\",\"SV_ERR_SYM_VLFT_1_SCG_3.15386\"),\r\n        DTCStruct(15387,\"P11A900\",\"Cam Shift Actuator A Cylinder 3 Circuit/Open\",\"SV_ERR_SYM_VLFT_1_SCG_1.15387\"),\r\n        DTCStruct(15388,\"P11AD00\",\"Cam Shift Actuator A Cylinder 4 Circuit/Open\",\"SV_ERR_SYM_VLFT_1_SCG_2.15388\"),\r\n        DTCStruct(15389,\"P11BF00\",\"Cam Shift Actuator Outlet A Cylinder 1 Range/Performance\",\"SV_ERR_SYM_VLFT_1_SCP_0.15389\"),\r\n        DTCStruct(15390,\"P11C100\",\"Cam Shift Actuator Outlet A Cylinder 2 Range/Performance\",\"SV_ERR_SYM_VLFT_1_SCP_3.15390\"),\r\n        DTCStruct(15391,\"P11C300\",\"Cam Shift Actuator Outlet A Cylinder 3 Range/Performance\",\"SV_ERR_SYM_VLFT_1_SCP_1.15391\"),\r\n        DTCStruct(15392,\"P11C500\",\"Cam Shift Actuator Outlet A Cylinder 4 Range/Performance\",\"SV_ERR_SYM_VLFT_1_SCP_2.15392\"),\r\n        DTCStruct(15394,\"P11A200\",\"Cam Shift Actuator A Cylinder 1 Range/Performance\",\"SV_ERR_SYM_VLFT_1_V_0_1.15394\"),\r\n        DTCStruct(15396,\"P11A600\",\"Cam Shift Actuator A Cylinder 2 Range/Performance\",\"SV_ERR_SYM_VLFT_1_V_3_1.15396\"),\r\n        DTCStruct(15398,\"P11AA00\",\"Cam Shift Actuator A Cylinder 3 Range/Performance\",\"SV_ERR_SYM_VLFT_1_V_1_1.15398\"),\r\n        DTCStruct(15400,\"P11AE00\",\"Cam Shift Actuator A Cylinder 4 Range/Performance\",\"SV_ERR_SYM_VLFT_1_V_2_1.15400\"),\r\n        DTCStruct(15401,\"P11A300\",\"Cam Shift Actuator B Cylinder 1 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_OC_0.15401\"),\r\n        DTCStruct(15402,\"P11A700\",\"Cam Shift Actuator B Cylinder 2 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_OC_3.15402\"),\r\n        DTCStruct(15403,\"P11AB00\",\"Cam Shift Actuator B Cylinder 3 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_OC_1.15403\"),\r\n        DTCStruct(15404,\"P11AF00\",\"Cam Shift Actuator B Cylinder 4 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_OC_2.15404\"),\r\n        DTCStruct(15405,\"P11A300\",\"Cam Shift Actuator B Cylinder 1 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_SCG_0.15405\"),\r\n        DTCStruct(15406,\"P11A700\",\"Cam Shift Actuator B Cylinder 2 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_SCG_3.15406\"),\r\n        DTCStruct(15407,\"P11AB00\",\"Cam Shift Actuator B Cylinder 3 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_SCG_1.15407\"),\r\n        DTCStruct(15408,\"P11AF00\",\"Cam Shift Actuator B Cylinder 4 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_SCG_2.15408\"),\r\n        DTCStruct(15409,\"P11C000\",\"Cam Shift Actuator Outlet B Cylinder 1 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_SCP_0.15409\"),\r\n        DTCStruct(15410,\"P11C200\",\"Cam Shift Actuator Outlet B Cylinder 2 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_SCP_3.15410\"),\r\n        DTCStruct(15411,\"P11C400\",\"Cam Shift Actuator Outlet B Cylinder 3 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_SCP_1.15411\"),\r\n        DTCStruct(15412,\"P11C600\",\"Cam Shift Actuator Outlet B Cylinder 4 Circuit/Open\",\"SV_ERR_SYM_VLFT_STND_SCP_2.15412\"),\r\n        DTCStruct(15414,\"P11A400\",\"Cam Shift Actuator B Cylinder 1 Range/Performance\",\"SV_ERR_SYM_VLFT_STND_V_0_1.15414\"),\r\n        DTCStruct(15416,\"P11A800\",\"Cam Shift Actuator B Cylinder 2 Range/Performance\",\"SV_ERR_SYM_VLFT_STND_V_3_1.15416\"),\r\n        DTCStruct(15418,\"P11AC00\",\"Cam Shift Actuator B Cylinder 3 Range/Performance\",\"SV_ERR_SYM_VLFT_STND_V_1_1.15418\"),\r\n        DTCStruct(15420,\"P11B000\",\"Cam Shift Actuator B Cylinder 4 Range/Performance\",\"SV_ERR_SYM_VLFT_STND_V_2_1.15420\"),\r\n        DTCStruct(15423,\"P256500\",\"Turbocharger Boost Control Position Sensor Circuit High\",\"SV_ERR_SYM_VP_BPA_H_1.15423\"),\r\n        DTCStruct(15424,\"P256400\",\"Turbocharger Boost Control Position Sensor Circuit Low\",\"SV_ERR_SYM_VP_BPA_L_1.15424\"),\r\n        DTCStruct(15431,\"P25A900\",\"Piston Cooling Oil Control Circuit/Open\",\"SV_ERR_SYM_OIL_2_PIST_OC.15431\"),\r\n        DTCStruct(15432,\"P25AA00\",\"Piston Cooling Oil Control Circuit Low\",\"SV_ERR_SYM_OIL_2_PIST_SCG.15432\"),\r\n        DTCStruct(15433,\"P25AB00\",\"Piston Cooling Oil Control Circuit High\",\"SV_ERR_SYM_OIL_2_PIST_SCP.15433\"),\r\n        DTCStruct(15434,\"P21CF00\",\"Cylinder 1 Injector B Circuit/Open\",\"SV_ERR_SYM_IV_MPI_OC_0.15434\"),\r\n        DTCStruct(15435,\"P21D000\",\"Cylinder 2 Injector B Circuit/Open\",\"SV_ERR_SYM_IV_MPI_OC_3.15435\"),\r\n        DTCStruct(15436,\"P21D100\",\"Cylinder 3 Injector B Circuit/Open\",\"SV_ERR_SYM_IV_MPI_OC_1.15436\"),\r\n        DTCStruct(15437,\"P21D200\",\"Cylinder 4 Injector B Circuit/Open\",\"SV_ERR_SYM_IV_MPI_OC_2.15437\"),\r\n        DTCStruct(15438,\"P21DB00\",\"Cylinder 1 Injector B Circuit Low\",\"SV_ERR_SYM_IV_MPI_SCG_0.15438\"),\r\n        DTCStruct(15439,\"P21DE00\",\"Cylinder 2 Injector B Circuit Low\",\"SV_ERR_SYM_IV_MPI_SCG_3.15439\"),\r\n        DTCStruct(15440,\"P21E000\",\"Cylinder 3 Injector B Circuit Low\",\"SV_ERR_SYM_IV_MPI_SCG_1.15440\"),\r\n        DTCStruct(15441,\"P21E200\",\"Cylinder 4 Injector B Circuit Low\",\"SV_ERR_SYM_IV_MPI_SCG_2.15441\"),\r\n        DTCStruct(15442,\"P21DC00\",\"Cylinder 1 Injector B Circuit High\",\"SV_ERR_SYM_IV_MPI_SCP_0.15442\"),\r\n        DTCStruct(15443,\"P21DF00\",\"Cylinder 2 Injector B Circuit High\",\"SV_ERR_SYM_IV_MPI_SCP_3.15443\"),\r\n        DTCStruct(15444,\"P21E100\",\"Cylinder 3 Injector B Circuit High\",\"SV_ERR_SYM_IV_MPI_SCP_1.15444\"),\r\n        DTCStruct(15445,\"P21E300\",\"Cylinder 4 Injector B Circuit High\",\"SV_ERR_SYM_IV_MPI_SCP_2.15445\"),\r\n        DTCStruct(15446,\"P188900\",\"Coolant shut-off valve Short circuit to ground/open circuit\",\"SV_ERR_SYM_COC_EPC_OC_INTER_HEAT.15446\"),\r\n        DTCStruct(15447,\"P19A200\",\"Transmission coolant valve Open circuit\",\"SV_ERR_SYM_COC_EPC_OC_GB_HEAT.15447\"),\r\n        DTCStruct(15448,\"P275300\",\"Transmission Fluid Cooler Control Circuit/Open\",\"SV_ERR_SYM_COC_EPC_OC_GB_COOL.15448\"),\r\n        DTCStruct(15450,\"P188900\",\"Coolant shut-off valve Short circuit to ground/open circuit\",\"SV_ERR_SYM_COC_EPC_SCG_INTER_HEAT.15450\"),\r\n        DTCStruct(15451,\"P19A100\",\"Transmission coolant valve Short circuit to ground\",\"SV_ERR_SYM_COC_EPC_SCG_GB_HEAT.15451\"),\r\n        DTCStruct(15452,\"P275400\",\"Transmission Fluid Cooler Control Circuit Low\",\"SV_ERR_SYM_COC_EPC_SCG_GB_COOL.15452\"),\r\n        DTCStruct(15454,\"P188800\",\"Coolant shut-off valve Short circuit to B+\",\"SV_ERR_SYM_COC_EPC_SCP_INTER_HEAT.15454\"),\r\n        DTCStruct(15455,\"P19A000\",\"Transmission coolant valve Short circuit to B+\",\"SV_ERR_SYM_COC_EPC_SCP_GB_HEAT.15455\"),\r\n        DTCStruct(15456,\"P275500\",\"Transmission Fluid Cooler Control Circuit High\",\"SV_ERR_SYM_COC_EPC_SCP_GB_COOL.15456\"),\r\n        DTCStruct(15462,\"P268100\",\"Engine Coolant Bypass Valve Control Circuit/Open\",\"SV_ERR_SYM_RVC_DR_OC.15462\"),\r\n        DTCStruct(15463,\"P268200\",\"Engine Coolant Bypass Valve Control Circuit Low\",\"SV_ERR_SYM_RVC_DR_SCG1.15463\"),\r\n        DTCStruct(15464,\"P268200\",\"Engine Coolant Bypass Valve Control Circuit Low\",\"SV_ERR_SYM_RVC_DR_SCG2.15464\"),\r\n        DTCStruct(15465,\"P268300\",\"Engine Coolant Bypass Valve Control Circuit High\",\"SV_ERR_SYM_RVC_DR_SCP1.15465\"),\r\n        DTCStruct(15466,\"P268300\",\"Engine Coolant Bypass Valve Control Circuit High\",\"SV_ERR_SYM_RVC_DR_SCP2.15466\"),\r\n        DTCStruct(15470,\"P00B700\",\"Engine Coolant Flow Low/Performance\",\"SV_ERR_SYM_RVC_JAM_RNG_0.15470\"),\r\n        DTCStruct(15471,\"P255700\",\"Engine Coolant Level Sensor/Switch Circuit Range/Performance\",\"SV_ERR_SYM_RVC_DIG_CHKSUM.15471\"),\r\n        DTCStruct(15472,\"P255600\",\"Engine Coolant Level Sensor/Switch Circuit\",\"SV_ERR_SYM_RVC_DIG_COM.15472\"),\r\n        DTCStruct(15473,\"P255600\",\"Engine Coolant Level Sensor/Switch Circuit\",\"SV_ERR_SYM_RVC_DIG_SENS.15473\"),\r\n        DTCStruct(15492,\"P056300\",\"System Voltage High Voltage\",\"SV_ERR_SYM_VP_PWR_H_1.15492\"),\r\n        DTCStruct(15493,\"P056200\",\"System Voltage Low Voltage\",\"SV_ERR_SYM_VP_PWR_L_1.15493\"),\r\n        DTCStruct(16447,\"P000B00\",\"B Camshaft Position Slow Response (Bank 1)\",\"SV_ERR_SYM_CAM_DYN_VCP_EX_1.16447\"),\r\n        DTCStruct(16448,\"P000A00\",\"A Camshaft Position Slow Response (Bank 1)\",\"SV_ERR_SYM_CAM_DYN_VCP_IN_1.16448\"),\r\n        DTCStruct(16452,\"U041600\",\"Invalid Data Received From Vehicle Dynamics Control Module\",\"SV_ERR_SYM_PBSU_CAN_SENS.16452\"),\r\n        DTCStruct(16453,\"U041600\",\"Invalid Data Received From Vehicle Dynamics Control Module\",\"SV_ERR_SYM_PBSU_CAN_INIT.16453\"),\r\n        DTCStruct(16464,\"P00B700\",\"Engine Coolant Flow Low/Performance\",\"SV_ERR_SYM_RVC_DIG_BOL_AD.16464\"),\r\n        DTCStruct(16465,\"P00B700\",\"Engine Coolant Flow Low/Performance\",\"SV_ERR_SYM_RVC_DIG_TOL_AD.16465\"),\r\n        DTCStruct(16466,\"P00B700\",\"Engine Coolant Flow Low/Performance\",\"SV_ERR_SYM_RVC_AD_TOUT.16466\"),\r\n        DTCStruct(16467,\"P210100\",\"Throttle Actuator Control Motor Circuit Range/performance\",\"SV_ERR_SYM_ETC_DR_OHP.16467\"),\r\n        DTCStruct(16468,\"P210300\",\"Throttle Actuator A Control Motor Circuit High\",\"SV_ERR_SYM_ETC_DR_SC.16468\"),\r\n        DTCStruct(16469,\"P210000\",\"Throttle Actuator Control Motor Circuit/Open\",\"SV_ERR_SYM_ETC_DR_OC.16469\"),\r\n        DTCStruct(16470,\"P012100\",\"Throttle/Pedal Pos.Sensor A Circ. Range/Performance\",\"SV_ERR_SYM_TPS_RATIO.16470\"),\r\n        DTCStruct(16479,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_VS_TOL.16479\"),\r\n        DTCStruct(16483,\"P050200\",\"Vehicle Speed Sensor A Circuit Low Input\",\"SV_ERR_SYM_VS_CAN_EL_SCG.16483\"),\r\n        DTCStruct(16484,\"P050200\",\"Vehicle Speed Sensor A Circuit Low Input\",\"SV_ERR_SYM_VS_CAN_EL_SCP.16484\"),\r\n        DTCStruct(16485,\"P050200\",\"Vehicle Speed Sensor A Circuit Low Input\",\"SV_ERR_SYM_VS_CAN_EL_OC.16485\"),\r\n        DTCStruct(16486,\"P050100\",\"Vehicle Speed Sensor A Range/Performance\",\"SV_ERR_SYM_VS_CAN_PLAUS_OOR_H.16486\"),\r\n        DTCStruct(16487,\"P050100\",\"Vehicle Speed Sensor A Range/Performance\",\"SV_ERR_SYM_VS_CAN_PLAUS_OOR_L.16487\"),\r\n        DTCStruct(16488,\"P050100\",\"Vehicle Speed Sensor A Range/Performance\",\"SV_ERR_SYM_VS_CAN_PLAUS_RC_H.16488\"),\r\n        DTCStruct(16489,\"P050100\",\"Vehicle Speed Sensor A Range/Performance\",\"SV_ERR_SYM_VS_CAN_PLAUS_RC_L.16489\"),\r\n        DTCStruct(16490,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_VS_CAN_INI_VALUE.16490\"),\r\n        DTCStruct(16491,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_VS_CAN_V_SMALL.16491\"),\r\n        DTCStruct(16492,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_VS_CAN_SENS_DFCT.16492\"),\r\n        DTCStruct(16503,\"P33B700\",\"Cylinder 1 Combustion misfire during direct injection detected\",\"SV_ERR_SYM_MIS_DI_0.16503\"),\r\n        DTCStruct(16504,\"P33B800\",\"Cylinder 2 Combustion misfire during direct injection detected\",\"SV_ERR_SYM_MIS_DI_3.16504\"),\r\n        DTCStruct(16505,\"P33B900\",\"Cylinder 3 Combustion misfire during direct injection detected\",\"SV_ERR_SYM_MIS_DI_1.16505\"),\r\n        DTCStruct(16506,\"P33BA00\",\"Cylinder 4 Combustion misfire during direct injection detected\",\"SV_ERR_SYM_MIS_DI_2.16506\"),\r\n        DTCStruct(16507,\"P33BF00\",\"Cylinder 1 Combustion misfire during combined operation detected\",\"SV_ERR_SYM_MIS_IGC_0.16507\"),\r\n        DTCStruct(16508,\"P33C000\",\"Cylinder 2 Combustion misfire during combined operation detected\",\"SV_ERR_SYM_MIS_IGC_3.16508\"),\r\n        DTCStruct(16509,\"P33C100\",\"Cylinder 3 Combustion misfire during combined operation detected\",\"SV_ERR_SYM_MIS_IGC_1.16509\"),\r\n        DTCStruct(16510,\"P33C200\",\"Cylinder 4 Combustion misfire during combined operation detected\",\"SV_ERR_SYM_MIS_IGC_2.16510\"),\r\n        DTCStruct(16511,\"P33AF00\",\"Cylinder 1 Combustion misfire during intake manifold injection detected\",\"SV_ERR_SYM_MIS_MPI_0.16511\"),\r\n        DTCStruct(16512,\"P33B000\",\"Cylinder 2 Combustion misfire during intake manifold injection detected\",\"SV_ERR_SYM_MIS_MPI_3.16512\"),\r\n        DTCStruct(16513,\"P33B100\",\"Cylinder 3 Combustion misfire during intake manifold injection detected\",\"SV_ERR_SYM_MIS_MPI_1.16513\"),\r\n        DTCStruct(16514,\"P33B200\",\"Cylinder 4 Combustion misfire during intake manifold injection detected\",\"SV_ERR_SYM_MIS_MPI_2.16514\"),\r\n        DTCStruct(16782,\"U044700\",\"Invalid Data Received From Gateway A\",\"SV_ERR_SYM_CAN_DATE_2.16782\"),\r\n        DTCStruct(16784,\"U044700\",\"Invalid Data Received From Gateway A\",\"SV_ERR_SYM_CAN_DATE_4.16784\"),\r\n        DTCStruct(16785,\"U044700\",\"Invalid Data Received From Gateway A\",\"SV_ERR_SYM_CAN_DATE_5.16785\"),\r\n        DTCStruct(16786,\"U044700\",\"Invalid Data Received From Gateway A\",\"SV_ERR_SYM_CAN_DATE_6.16786\"),\r\n        DTCStruct(16796,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_N_GB_ISC_ETCU.16796\"),\r\n        DTCStruct(16797,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_N_GB_NCTL_ETCU.16797\"),\r\n        DTCStruct(16801,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_T_SYN_GB_NCTL_ETCU.16801\"),\r\n        DTCStruct(16803,\"U042300\",\"Invalid Data Received From Instrument Panel Cluster Control Module\",\"SV_ERR_SYM_TAA_FIL_INTC.16803\"),\r\n        DTCStruct(16807,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_TQ_PT_TRANS_ETCU.16807\"),\r\n        DTCStruct(16810,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_TQ_GB_INTV_FAST_ETCU.16810\"),\r\n        DTCStruct(16812,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_TQ_GB_INTV_SLOW_ETCU.16812\"),\r\n        DTCStruct(16819,\"P172300\",\"Signal for starter lock Open circuit\",\"SV_ERR_SYM_CLU_SWI_2_SCP_1.16819\"),\r\n        DTCStruct(16821,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_CYC_1_0.16821\"),\r\n        DTCStruct(16822,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_CYC_1_1.16822\"),\r\n        DTCStruct(16823,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_CYC_2_0.16823\"),\r\n        DTCStruct(16824,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_CYC_2_1.16824\"),\r\n        DTCStruct(16825,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_INI_1_0.16825\"),\r\n        DTCStruct(16826,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_INI_1_1.16826\"),\r\n        DTCStruct(16827,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_INI_2_0.16827\"),\r\n        DTCStruct(16828,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_INI_2_1.16828\"),\r\n        DTCStruct(16829,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_INI_3_0.16829\"),\r\n        DTCStruct(16830,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_INI_3_1.16830\"),\r\n        DTCStruct(16831,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_INI_4_0.16831\"),\r\n        DTCStruct(16832,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_DPS_IV_INI_4_1.16832\"),\r\n        DTCStruct(16837,\"P218500\",\"Engine Coolant Temperature Sensor 2 Circuit High\",\"SV_ERR_SYM_LTS_EL_H_TCR.16837\"),\r\n        DTCStruct(16838,\"P218400\",\"Engine Coolant Temperature Sensor 2 Circuit Low\",\"SV_ERR_SYM_LTS_EL_L_TCR.16838\"),\r\n        DTCStruct(16845,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_SPI_PBK_IV_CYC_1.16845\"),\r\n        DTCStruct(16846,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_SPI_PBK_IV_INI_0.16846\"),\r\n        DTCStruct(16847,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_SPI_PBK_IV_INI_1.16847\"),\r\n        DTCStruct(16853,\"P014900\",\"Fuel Timing Error\",\"SV_ERR_SYM_VBOOST_BOL_1.16853\"),\r\n        DTCStruct(16854,\"P014900\",\"Fuel Timing Error\",\"SV_ERR_SYM_VBOOST_BOL_2.16854\"),\r\n        DTCStruct(16855,\"P014900\",\"Fuel Timing Error\",\"SV_ERR_SYM_VBOOST_TOL.16855\"),\r\n        DTCStruct(16986,\"P00B700\",\"Engine Coolant Flow Low/Performance\",\"SV_ERR_SYM_RVC_JAM_RNG_1.16986\"),\r\n        DTCStruct(16987,\"P00B700\",\"Engine Coolant Flow Low/Performance\",\"SV_ERR_SYM_RVC_JAM_RNG_2.16987\"),\r\n        DTCStruct(16988,\"P00B700\",\"Engine Coolant Flow Low/Performance\",\"SV_ERR_SYM_RVC_JAM_RNG_3.16988\"),\r\n        DTCStruct(16992,\"U110300\",\"Production mode active\",\"SV_ERR_SYM_MOD_PROD.16992\"),\r\n        DTCStruct(16993,\"P169A00\",\"Loading mode active\",\"SV_ERR_SYM_MOD_TRPT.16993\"),\r\n        DTCStruct(17002,\"P168D00\",\"Oil pressure switch 3 Malfunction\",\"SV_ERR_SYM_POIL_PIST_L.17002\"),\r\n        DTCStruct(17003,\"P168C00\",\"Oil pressure switch 3 Implausible signal during engine operation\",\"SV_ERR_SYM_POIL_PIST_H.17003\"),\r\n        DTCStruct(17004,\"P168B00\",\"Oil pressure switch 3 Implausible signal during engine stand still\",\"SV_ERR_SYM_POIL_PIST_PLAUS.17004\"),\r\n        DTCStruct(17169,\"P164700\",\"Checking coding/versions of control modules in drivetrain\",\"SV_ERR_SYM_VLCAvl_stCodFail_VW.17169\"),\r\n        DTCStruct(17170,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_VLCAvl_stBrkPlaus_VW.17170\"),\r\n        DTCStruct(17171,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_VLCAvl_aAccDes_VW.17171\"),\r\n        DTCStruct(17172,\"P150B00\",\"Acceleration monitoring Control limit exceeded\",\"SV_ERR_SYM_VLCAvl_aDeBrkLo_VW.17172\"),\r\n        DTCStruct(17173,\"P150B00\",\"Acceleration monitoring Control limit exceeded\",\"SV_ERR_SYM_VLCAvl_aDeEngOpm_VW.17173\"),\r\n        DTCStruct(17174,\"P150B00\",\"Acceleration monitoring Control limit exceeded\",\"SV_ERR_SYM_VLCAvl_aVeh_VW.17174\"),\r\n        DTCStruct(17175,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_VLCAvl_stAccPlaus_VW.17175\"),\r\n        DTCStruct(17176,\"U112300\",\"Databus error value received\",\"SV_ERR_SYM_VLCAvl_errSigAcc_VW.17176\"),\r\n        DTCStruct(17177,\"P150B00\",\"Acceleration monitoring Control limit exceeded\",\"SV_ERR_SYM_VLCAvl_aDeBrkHi_VW.17177\"),\r\n        DTCStruct(17178,\"U112300\",\"Databus error value received\",\"SV_ERR_SYM_VLCAvl_stBrkFailIrv_VW.17178\"),\r\n        DTCStruct(17179,\"U112300\",\"Databus error value received\",\"SV_ERR_SYM_VLCAvl_stTrailDfct_VW.17179\"),\r\n        DTCStruct(17180,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_VLCAvl_stTrailDiag_VW.17180\"),\r\n        DTCStruct(17181,\"U112300\",\"Databus error value received\",\"SV_ERR_SYM_VLCAvl_stBrkLghtDfct_VW.17181\"),\r\n        DTCStruct(17182,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_VLCAvl_stBrkLghtDiag_VW.17182\"),\r\n        DTCStruct(17183,\"P133600\",\"Engine torque monitoring Control limit exceeded\",\"SV_ERR_SYM_MonTqLim_tqLimMon_VW.17183\"),\r\n        DTCStruct(17184,\"P15A400\",\"Vehicle shutdown active\",\"SV_ERR_SYM_LMVLim_bTrckAuth_VW.17184\"),\r\n        DTCStruct(17185,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_LMLev_stLevPlaus_VW.17185\"),\r\n        DTCStruct(17186,\"U112300\",\"Databus error value received\",\"SV_ERR_SYM_LMLev_bLevSig_VW.17186\"),\r\n        DTCStruct(17187,\"P056800\",\"Cruise Control Set Signal\",\"SV_ERR_SYM_LMLev_bMainSwt_VW.17187\"),\r\n        DTCStruct(17188,\"U112300\",\"Databus error value received\",\"SV_ERR_SYM_LMVDes_bDisp_VW.17188\"),\r\n        DTCStruct(17189,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_LMVDes_vDispPlaus_VW.17189\"),\r\n        DTCStruct(17355,\"P020100\",\"Cylinder 1- Injector Circuit\",\"SV_ERR_SYM_IV_HPDI_OC_0.17355\"),\r\n        DTCStruct(17356,\"P020200\",\"Cylinder 2- Injector Circuit\",\"SV_ERR_SYM_IV_HPDI_OC_3.17356\"),\r\n        DTCStruct(17357,\"P020300\",\"Cylinder 3- Injector Circuit\",\"SV_ERR_SYM_IV_HPDI_OC_1.17357\"),\r\n        DTCStruct(17358,\"P020400\",\"Cylinder 4- Injector Circuit\",\"SV_ERR_SYM_IV_HPDI_OC_2.17358\"),\r\n        DTCStruct(17359,\"P026100\",\"Cylinder 1- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_0.17359\"),\r\n        DTCStruct(17360,\"P026400\",\"Cylinder 2- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_3.17360\"),\r\n        DTCStruct(17361,\"P026700\",\"Cylinder 3- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_1.17361\"),\r\n        DTCStruct(17362,\"P027000\",\"Cylinder 4- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_2.17362\"),\r\n        DTCStruct(17363,\"P026200\",\"Cylinder 1- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_0.17363\"),\r\n        DTCStruct(17364,\"P026500\",\"Cylinder 2- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_3.17364\"),\r\n        DTCStruct(17365,\"P026800\",\"Cylinder 3- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_1.17365\"),\r\n        DTCStruct(17366,\"P027100\",\"Cylinder 4- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_2.17366\"),\r\n        DTCStruct(17367,\"P10B100\",\"Monitoring of injector cylinder 1 Malfunction detected\",\"SV_ERR_SYM_IV_HPDI_SCL_0.17367\"),\r\n        DTCStruct(17368,\"P10B200\",\"Monitoring of injector cylinder 2 Malfunction detected\",\"SV_ERR_SYM_IV_HPDI_SCL_3.17368\"),\r\n        DTCStruct(17369,\"P10B300\",\"Monitoring of injector cylinder 3 Malfunction detected\",\"SV_ERR_SYM_IV_HPDI_SCL_1.17369\"),\r\n        DTCStruct(17370,\"P10B400\",\"Monitoring of injector cylinder 4 Malfunction detected\",\"SV_ERR_SYM_IV_HPDI_SCL_2.17370\"),\r\n        DTCStruct(17371,\"P026200\",\"Cylinder 1- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_L_0.17371\"),\r\n        DTCStruct(17372,\"P026500\",\"Cylinder 2- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_L_3.17372\"),\r\n        DTCStruct(17373,\"P026800\",\"Cylinder 3- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_L_1.17373\"),\r\n        DTCStruct(17374,\"P027100\",\"Cylinder 4- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_L_2.17374\"),\r\n        DTCStruct(17375,\"P026200\",\"Cylinder 1- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_H_0.17375\"),\r\n        DTCStruct(17376,\"P026500\",\"Cylinder 2- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_H_3.17376\"),\r\n        DTCStruct(17377,\"P026800\",\"Cylinder 3- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_H_1.17377\"),\r\n        DTCStruct(17378,\"P027100\",\"Cylinder 4- Injector Circuit High\",\"SV_ERR_SYM_IV_HPDI_SCP_H_2.17378\"),\r\n        DTCStruct(17379,\"P026100\",\"Cylinder 1- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_L_0.17379\"),\r\n        DTCStruct(17380,\"P026400\",\"Cylinder 2- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_L_3.17380\"),\r\n        DTCStruct(17381,\"P026700\",\"Cylinder 3- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_L_1.17381\"),\r\n        DTCStruct(17382,\"P027000\",\"Cylinder 4- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_L_2.17382\"),\r\n        DTCStruct(17383,\"P026100\",\"Cylinder 1- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_H_0.17383\"),\r\n        DTCStruct(17384,\"P026400\",\"Cylinder 2- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_H_3.17384\"),\r\n        DTCStruct(17385,\"P026700\",\"Cylinder 3- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_H_1.17385\"),\r\n        DTCStruct(17386,\"P027000\",\"Cylinder 4- Injector Circuit Low\",\"SV_ERR_SYM_IV_HPDI_SCG_H_2.17386\"),\r\n        DTCStruct(17387,\"P10B100\",\"Monitoring of injector cylinder 1 Malfunction detected\",\"SV_ERR_SYM_IV_HPDI_IDT_0.17387\"),\r\n        DTCStruct(17388,\"P10B200\",\"Monitoring of injector cylinder 2 Malfunction detected\",\"SV_ERR_SYM_IV_HPDI_IDT_3.17388\"),\r\n        DTCStruct(17389,\"P10B300\",\"Monitoring of injector cylinder 3 Malfunction detected\",\"SV_ERR_SYM_IV_HPDI_IDT_1.17389\"),\r\n        DTCStruct(17390,\"P10B400\",\"Monitoring of injector cylinder 4 Malfunction detected\",\"SV_ERR_SYM_IV_HPDI_IDT_2.17390\"),\r\n        DTCStruct(17521,\"P150D00\",\"Chain elongation\",\"SV_ERR_SYM_ChaDiag_bChaElg1_VW.17521\"),\r\n        DTCStruct(17789,\"P00B700\",\"Engine Coolant Flow Low/Performance\",\"SV_ERR_SYM_RVC_DIF.17789\"),\r\n        DTCStruct(17918,\"P198700\",\"Function restriction due to brake temperature\",\"SV_ERR_SYM_VLCAvl_bBrkOverHeat_VW.17918\"),\r\n        DTCStruct(17920,\"P056800\",\"Cruise Control Set Signal\",\"SV_ERR_SYM_LMLev_bMainBtn_VW.17920\"),\r\n        DTCStruct(17922,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_LMVDes_bDispHiLn_VW.17922\"),\r\n        DTCStruct(17924,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_LMVDes_bDispLim_VW.17924\"),\r\n        DTCStruct(18191,\"P167D00\",\"Button for start/stop operation Electrical error\",\"SV_ERR_SYM_StrtStopSwt_bStuck_VW.18191\"),\r\n        DTCStruct(18876,\"P056800\",\"Cruise Control Set Signal\",\"SV_ERR_SYM_LMLev_bLevCod_VW.18876\"),\r\n        DTCStruct(18929,\"P013A00\",\"O2 Sensor Bank 1 Sensor 2 Slow Response - Rich to Lean\",\"SV_ERR_SYM_GRD_R2L_LS_DOWN_1.18929\"),\r\n        DTCStruct(18933,\"P227000\",\"O2 Sensor Signal Stuck Lean; Bank 1 Sensor 2\",\"SV_ERR_SYM_PEAK_MAX_LS_DOWN_1.18933\"),\r\n        DTCStruct(18934,\"P227100\",\"O2 Sensor Signal Stuck Rich; Bank 1 Sensor 2\",\"SV_ERR_SYM_PEAK_MIN_LS_DOWN_1.18934\"),\r\n        DTCStruct(19308,\"U042100\",\"Invalid Data Received From Suspension Control Module\",\"SV_ERR_SYM_COM_CHF_PLAUS.19308\"),\r\n        DTCStruct(19309,\"U013200\",\"Lost Communication With Suspension Control Module A\",\"SV_ERR_SYM_COM_CHF_TOUT.19309\"),\r\n        DTCStruct(19311,\"U019900\",\"Lost Communication With Door Control Module A\",\"SV_ERR_SYM_COM_DSC_LE_TOUT.19311\"),\r\n        DTCStruct(19395,\"C10A700\",\"Rolling Mode recognized\",\"SV_ERR_SYM_DYNO_MOD.19395\"),\r\n        DTCStruct(19845,\"U045200\",\"Invalid Data Received From Restraints Control Module\",\"SV_ERR_SYM_COM_ACU_PLAUS.19845\"),\r\n        DTCStruct(19846,\"U015100\",\"Lost Communication With Restraints Control Module\",\"SV_ERR_SYM_COM_ACU_TOUT.19846\"),\r\n        DTCStruct(19853,\"U042900\",\"Invalid Data Received From Steering Column Control Module\",\"SV_ERR_SYM_COM_CRU_PLAUS.19853\"),\r\n        DTCStruct(19854,\"U021200\",\"Lost Communication With Steering Column Control Module\",\"SV_ERR_SYM_COM_CRU_TOUT.19854\"),\r\n        DTCStruct(19859,\"U049A00\",\"Invalid Data Received From Door Control Module A\",\"SV_ERR_SYM_COM_DSC_LE_PLAUS.19859\"),\r\n        DTCStruct(19861,\"U043100\",\"Invalid Data Received From Body Control Module A\",\"SV_ERR_SYM_COM_EILU_PLAUS.19861\"),\r\n        DTCStruct(19862,\"U014100\",\"Lost Communication With Body Control Module A\",\"SV_ERR_SYM_COM_EILU_TOUT.19862\"),\r\n        DTCStruct(19867,\"U042300\",\"Invalid Data Received From Instrument Panel Cluster Control Module\",\"SV_ERR_SYM_COM_ICL_PLAUS.19867\"),\r\n        DTCStruct(19868,\"U015500\",\"Lost Communication With Instrument Panel Cluster (IPC) Control Module\",\"SV_ERR_SYM_COM_ICL_TOUT.19868\"),\r\n        DTCStruct(19869,\"U044700\",\"Invalid Data Received From Gateway A\",\"SV_ERR_SYM_COM_IF_CFT_PLAUS.19869\"),\r\n        DTCStruct(19870,\"U014600\",\"Lost Communication With Gateway A\",\"SV_ERR_SYM_COM_IF_CFT_TOUT.19870\"),\r\n        DTCStruct(19874,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_COM_TCS_PLAUS.19874\"),\r\n        DTCStruct(19875,\"U012100\",\"Lost Communication With Anti-Lock Brake System (ABS) Control Module\",\"SV_ERR_SYM_COM_TCS_TOUT.19875\"),\r\n        DTCStruct(19878,\"U042200\",\"Invalid Data Received From Body Control Module\",\"SV_ERR_SYM_COM_VECU_PLAUS.19878\"),\r\n        DTCStruct(19879,\"U014000\",\"Lost Communication With Body Control Module\",\"SV_ERR_SYM_COM_VECU_TOUT.19879\"),\r\n        DTCStruct(20250,\"U032200\",\"Software Incompatibility With Body Control Module\",\"SV_ERR_SYM_TAA_SRC_CONF_INTC.20250\"),\r\n        DTCStruct(20251,\"U042200\",\"Invalid Data Received From Body Control Module\",\"SV_ERR_SYM_TAA_SRC_RST_INTC.20251\"),\r\n        DTCStruct(20269,\"P070400\",\"Clutch Switch Input Circuit\",\"SV_ERR_SYM_CLU_SWI_PLAUS_0.20269\"),\r\n        DTCStruct(20270,\"P070400\",\"Clutch Switch Input Circuit\",\"SV_ERR_SYM_CLU_SWI_PLAUS_1.20270\"),\r\n        DTCStruct(20276,\"P151B00\",\"Voltage terminal 15 Implausible\",\"SV_ERR_SYM_IGK_PLAUS_0.20276\"),\r\n        DTCStruct(20316,\"P30C000\",\"Fuel quality poor\",\"SV_ERR_SYM_LOW_RON.20316\"),\r\n        DTCStruct(20577,\"P060600\",\"ECM/PCM Processor\",\"SV_ERR_SYM_AMP_ORNG_MAX.20577\"),\r\n        DTCStruct(20578,\"P060600\",\"ECM/PCM Processor\",\"SV_ERR_SYM_AMP_ORNG_MIN.20578\"),\r\n        DTCStruct(20590,\"P115800\",\"Manifold abs. press. sens. Implausible signal\",\"SV_ERR_SYM_AR_PL_MAX_LAM_MIN.20590\"),\r\n        DTCStruct(20593,\"P115800\",\"Manifold abs. press. sens. Implausible signal\",\"SV_ERR_SYM_AR_PL_MIN_LAM_MAX.20593\"),\r\n        DTCStruct(20614,\"P069900\",\"Sensor Reference Voltage C Circuit High\",\"SV_ERR_SYM_VCC_H_2.20614\"),\r\n        DTCStruct(20615,\"P069800\",\"Sensor Reference Voltage C Circuit Low\",\"SV_ERR_SYM_VCC_L_2.20615\"),\r\n        DTCStruct(20628,\"P060600\",\"ECM/PCM Processor\",\"SV_ERR_SYM_LAMB_IC_COM_1.20628\"),\r\n        DTCStruct(20630,\"P060600\",\"ECM/PCM Processor\",\"SV_ERR_SYM_LAMB_IC_CONF_1.20630\"),\r\n        DTCStruct(20632,\"P014000\",\"O2 Sensor Circ.,Bank1-Sensor2 No Activity Detected\",\"SV_ERR_SYM_LS_OC_1.20632\"),\r\n        DTCStruct(20634,\"P013700\",\"O2 Sensor Circ.,Bank1-Sensor2 Low Voltage\",\"SV_ERR_SYM_LS_SCG_1.20634\"),\r\n        DTCStruct(20636,\"P013800\",\"O2 Sensor Circ.,Bank1-Sensor2 High Voltage\",\"SV_ERR_SYM_LS_SCP_1.20636\"),\r\n        DTCStruct(20638,\"P003600\",\"O2 Sensor Heater Contr. Circ.(Bank1(1)Sensor 2)\",\"SV_ERR_SYM_LSH_LS_OC_1.20638\"),\r\n        DTCStruct(20640,\"P014100\",\"O2 Sensor Heater Circ.,Bank1-Sensor2 Malfunction\",\"SV_ERR_SYM_LSH_LS_PWR_L_1.20640\"),\r\n        DTCStruct(20642,\"P003700\",\"O2 Sensor Heater Contr. Circ.(Bank1(1)Sensor 2) Low\",\"SV_ERR_SYM_LSH_LS_SCG_1.20642\"),\r\n        DTCStruct(20644,\"P003800\",\"O2 Sensor Heater Contr. Circ.(Bank1(1)Sensor 2) High\",\"SV_ERR_SYM_LSH_LS_SCP_1.20644\"),\r\n        DTCStruct(20646,\"P003000\",\"O2 Sensor Heater Contr. Circ.(Bank1(1)Sensor 1)\",\"SV_ERR_SYM_LSH_LSL_OC_1.20646\"),\r\n        DTCStruct(20648,\"P013500\",\"O2 Sensor Heater Circ.,Bank1-Sensor1 Malfunction\",\"SV_ERR_SYM_LSH_LSL_PWR_L_1.20648\"),\r\n        DTCStruct(20650,\"P003100\",\"O2 Sensor Heater Contr. Circ.(Bank1(1)Sensor 1) Low\",\"SV_ERR_SYM_LSH_LSL_SCG_1.20650\"),\r\n        DTCStruct(20652,\"P003200\",\"O2 Sensor Heater Contr. Circ.(Bank1(1)Sensor 1) High\",\"SV_ERR_SYM_LSH_LSL_SCP_1.20652\"),\r\n        DTCStruct(20654,\"P225100\",\"O2 Sensor Negative Current Control Circuit Bank 1 Sensor 1 open\",\"SV_ERR_SYM_LSL_OC_VG_1.20654\"),\r\n        DTCStruct(20656,\"P223700\",\"O2 Sensor Positive Current Control Circuit Bank 1 Sensor 1 Open\",\"SV_ERR_SYM_LSL_OC_VIP_1.20656\"),\r\n        DTCStruct(20658,\"P224300\",\"O2 Sensor Reference Voltage Circuit Bank 1 Sensor 1 Open\",\"SV_ERR_SYM_LSL_OC_VN_1.20658\"),\r\n        DTCStruct(20662,\"P013100\",\"O2 Sensor Circ.,Bank1-Sensor1 Low Voltage\",\"SV_ERR_SYM_LSL_SCG_1.20662\"),\r\n        DTCStruct(20664,\"P013200\",\"O2 Sensor Circ.,Bank1-Sensor1 High Voltage\",\"SV_ERR_SYM_LSL_SCP_1.20664\"),\r\n        DTCStruct(21266,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_PRS_BRAKE_CAN.21266\"),\r\n        DTCStruct(21297,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_AC_LGT_TCS8_CAN.21297\"),\r\n        DTCStruct(21302,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_AC_TRV_TCS2.21302\"),\r\n        DTCStruct(21312,\"U042800\",\"Invalid Data Received From Steering Angle Sensor Module\",\"SV_ERR_SYM_ANG_PSTE.21312\"),\r\n        DTCStruct(21319,\"U044700\",\"Invalid Data Received From Gateway A\",\"SV_ERR_SYM_CTR_KM_CAN.21319\"),\r\n        DTCStruct(21320,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_CTR_WHEEL_FN_LE_CAN.21320\"),\r\n        DTCStruct(21321,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_CTR_WHEEL_FN_RI_CAN.21321\"),\r\n        DTCStruct(21322,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_CTR_WHEEL_RE_LE_CAN.21322\"),\r\n        DTCStruct(21323,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_CTR_WHEEL_RE_RI_CAN.21323\"),\r\n        DTCStruct(21329,\"U045600\",\"Invalid Data Received From Coolant Temperature Control Module\",\"SV_ERR_SYM_ECF_REQ_AC_CAN.21329\"),\r\n        DTCStruct(21388,\"P301900\",\"Exhaust door valve 1 Open circuit\",\"SV_ERR_SYM_EF_EL_OC_0.21388\"),\r\n        DTCStruct(21389,\"P301800\",\"Exhaust door valve 1 Short circuit to ground\",\"SV_ERR_SYM_EF_EL_SCG_0.21389\"),\r\n        DTCStruct(21390,\"P301700\",\"Exhaust door valve 1 Short circuit to B+\",\"SV_ERR_SYM_EF_EL_SCP_0.21390\"),\r\n        DTCStruct(21391,\"P14AB00\",\"Exhaust door control unit mechanical malfunction\",\"SV_ERR_SYM_PWM_EF_FB_1_0.21391\"),\r\n        DTCStruct(21392,\"P14AB00\",\"Exhaust door control unit mechanical malfunction\",\"SV_ERR_SYM_PWM_EF_FB_2_0.21392\"),\r\n        DTCStruct(21393,\"P14AB00\",\"Exhaust door control unit mechanical malfunction\",\"SV_ERR_SYM_PWM_EF_FB_3_0.21393\"),\r\n        DTCStruct(21399,\"P302300\",\"Exhaust door valve 2 Open circuit\",\"SV_ERR_SYM_EF_EL_OC_1.21399\"),\r\n        DTCStruct(21400,\"P302200\",\"Exhaust door valve 2 Short circuit to ground\",\"SV_ERR_SYM_EF_EL_SCG_1.21400\"),\r\n        DTCStruct(21401,\"P302100\",\"Exhaust door valve 2 Short circuit to B+\",\"SV_ERR_SYM_EF_EL_SCP_1.21401\"),\r\n        DTCStruct(21402,\"P14AC00\",\"Exhaust door control unit 2 mechanical malfunction\",\"SV_ERR_SYM_PWM_EF_FB_1_1.21402\"),\r\n        DTCStruct(21403,\"P14AC00\",\"Exhaust door control unit 2 mechanical malfunction\",\"SV_ERR_SYM_PWM_EF_FB_2_1.21403\"),\r\n        DTCStruct(21404,\"P14AC00\",\"Exhaust door control unit 2 mechanical malfunction\",\"SV_ERR_SYM_PWM_EF_FB_3_1.21404\"),\r\n        DTCStruct(21406,\"P044100\",\"EVAP Emission Contr.Sys.Incorrect Purge Flow\",\"SV_ERR_SYM_MEC_OPEN_CPS_1.21406\"),\r\n        DTCStruct(21417,\"P261000\",\"ECM/PCM Internal Engine Off Timer Performance\",\"SV_ERR_SYM_T_ES_L_POW_CHK.21417\"),\r\n        DTCStruct(21419,\"P261000\",\"ECM/PCM Internal Engine Off Timer Performance\",\"SV_ERR_SYM_T_ES_VLD_CHK.21419\"),\r\n        DTCStruct(21471,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_LMLev_bLevLim_VW.21471\"),\r\n        DTCStruct(21564,\"P151E00\",\"Reduced speed threshold for oil pressure switching\",\"SV_ERR_SYM_ChaDiag_bChaElg1Prot_VW.21564\"),\r\n        DTCStruct(21624,\"U000100\",\"High Speed CAN Communication Bus\",\"SV_ERR_SYM_COM_0_BOFF.21624\"),\r\n        DTCStruct(21625,\"U041400\",\"Invalid Data Received From Four-Wheel Drive Clutch Control Module\",\"SV_ERR_SYM_COM_4WD_PLAUS.21625\"),\r\n        DTCStruct(21626,\"U011400\",\"Lost Communication With Four-Wheel Drive Clutch Control Module\",\"SV_ERR_SYM_COM_4WD_TOUT.21626\"),\r\n        DTCStruct(21629,\"U042400\",\"Invalid Data Received From HVAC Control Module\",\"SV_ERR_SYM_COM_CCU_PLAUS.21629\"),\r\n        DTCStruct(21630,\"U016400\",\"Lost Communication With HVAC Control Module\",\"SV_ERR_SYM_COM_CCU_TOUT.21630\"),\r\n        DTCStruct(21635,\"U041700\",\"Invalid Data Received From Park Brake Control Module\",\"SV_ERR_SYM_COM_EPB_PLAUS.21635\"),\r\n        DTCStruct(21636,\"U012800\",\"Lost Communication With Brake System Control Module\",\"SV_ERR_SYM_COM_EPB_TOUT.21636\"),\r\n        DTCStruct(21637,\"U042500\",\"Invalid Data Received From Auxiliary Heater Control Module\",\"SV_ERR_SYM_COM_ICH_PLAUS.21637\"),\r\n        DTCStruct(21638,\"U016600\",\"Lost Communication With Auxiliary Heater Control Module\",\"SV_ERR_SYM_COM_ICH_TOUT.21638\"),\r\n        DTCStruct(21639,\"U100B00\",\"Access and start authorization Implausible signal\",\"SV_ERR_SYM_COM_KLG_PLAUS.21639\"),\r\n        DTCStruct(21640,\"U100A00\",\"Access and start authorization No communication\",\"SV_ERR_SYM_COM_KLG_TOUT.21640\"),\r\n        DTCStruct(21644,\"U109500\",\"Electronic steering column lock control module No communication\",\"SV_ERR_SYM_COM_PSTE_LOCK_TOUT.21644\"),\r\n        DTCStruct(21645,\"U041900\",\"Invalid Data Received From Steering Effort Control Module\",\"SV_ERR_SYM_COM_SCU_PLAUS.21645\"),\r\n        DTCStruct(21646,\"U013000\",\"Lost Communication With Steering Effort Control Module\",\"SV_ERR_SYM_COM_SCU_TOUT.21646\"),\r\n        DTCStruct(21651,\"U112200\",\"Databus implausible message\",\"SV_ERR_SYM_COM_STS_PLAUS.21651\"),\r\n        DTCStruct(21652,\"U112100\",\"Databus missing message\",\"SV_ERR_SYM_COM_STS_TOUT.21652\"),\r\n        DTCStruct(21653,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_COM_TCU_PLAUS.21653\"),\r\n        DTCStruct(21654,\"U010100\",\"Lost Communication with TCM\",\"SV_ERR_SYM_COM_TCU_TOUT.21654\"),\r\n        DTCStruct(21655,\"U100400\",\"Towing recognition control module Implausible signal\",\"SV_ERR_SYM_COM_TRLCU_PLAUS.21655\"),\r\n        DTCStruct(21656,\"U100300\",\"Towing recognition control module No Communication\",\"SV_ERR_SYM_COM_TRLCU_TOUT.21656\"),\r\n        DTCStruct(21657,\"U044700\",\"Invalid Data Received From Gateway A\",\"SV_ERR_SYM_GEN_LOAD_POW_CAN.21657\"),\r\n        DTCStruct(21658,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_TOIL_GEAR_TM.21658\"),\r\n        DTCStruct(21659,\"U042400\",\"Invalid Data Received From HVAC Control Module\",\"SV_ERR_SYM_TQ_ACC_CAN.21659\"),\r\n        DTCStruct(21660,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_TQ_LM_GB_PT_MAX_ETCU.21660\"),\r\n        DTCStruct(21661,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_TQ_LOSS_GB_CAN.21661\"),\r\n        DTCStruct(22007,\"U043300\",\"Invalid Data Received From Cruise Control Front Distance Range Sensor\",\"SV_ERR_SYM_COM_DCC_PLAUS.22007\"),\r\n        DTCStruct(22008,\"U023500\",\"Lost Communication With Cruise Control Front Distance Range Sensor\",\"SV_ERR_SYM_COM_DCC_TOUT.22008\"),\r\n        DTCStruct(22043,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_MCC_ATIC_111.22043\"),\r\n        DTCStruct(22045,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_MCC_ATIC_140_DEV_0.22045\"),\r\n        DTCStruct(22046,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_MCC_ATIC_140_DEV_1.22046\"),\r\n        DTCStruct(22049,\"U042400\",\"Invalid Data Received From HVAC Control Module\",\"SV_ERR_SYM_ACP_CAN.22049\"),\r\n        DTCStruct(22050,\"U041900\",\"Invalid Data Received From Steering Effort Control Module\",\"SV_ERR_SYM_CAN_ANG_SCU.22050\"),\r\n        DTCStruct(22052,\"U000200\",\"High Speed CAN Communication Bus Performance\",\"SV_ERR_SYM_COM_0_TOT.22052\"),\r\n        DTCStruct(22054,\"U10BB00\",\"Power steering control module Implausible signal\",\"SV_ERR_SYM_COM_EPS_PLAUS.22054\"),\r\n        DTCStruct(22055,\"U013100\",\"Lost Communication With Power Steering Control Module\",\"SV_ERR_SYM_COM_EPS_TOUT.22055\"),\r\n        DTCStruct(22056,\"U045A00\",\"Invalid Data Received From Parking Assist Control Module A\",\"SV_ERR_SYM_COM_PARK_ASI_PLAUS.22056\"),\r\n        DTCStruct(22057,\"U015900\",\"Lost Communication With Parking Assist Control Module A\",\"SV_ERR_SYM_COM_PARK_ASI_TOUT.22057\"),\r\n        DTCStruct(22058,\"U042800\",\"Invalid Data Received From Steering Angle Sensor Module\",\"SV_ERR_SYM_COM_PSTE_PLAUS.22058\"),\r\n        DTCStruct(22059,\"U012600\",\"Lost Communication With Steering Angle Sensor Module\",\"SV_ERR_SYM_COM_PSTE_TOUT.22059\"),\r\n        DTCStruct(22062,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_DRG_TCU.22062\"),\r\n        DTCStruct(22063,\"U042300\",\"Invalid Data Received From Instrument Panel Cluster Control Module\",\"SV_ERR_SYM_FTL_CAN.22063\"),\r\n        DTCStruct(22064,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_GEAR_RATIO_TCU1.22064\"),\r\n        DTCStruct(22065,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_N_CONV.22065\"),\r\n        DTCStruct(22073,\"U042400\",\"Invalid Data Received From HVAC Control Module\",\"SV_ERR_SYM_TQ_AC_FAN_CAN.22073\"),\r\n        DTCStruct(22076,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_TQI_REL_MSR_REQ_CAN.22076\"),\r\n        DTCStruct(22092,\"U042300\",\"Invalid Data Received From Instrument Panel Cluster Control Module\",\"SV_ERR_SYM_KBI_TANKFUELL_PROZ.22092\"),\r\n        DTCStruct(22096,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_TQI_GB_INTV_FAST_ETCU.22096\"),\r\n        DTCStruct(22097,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_TQI_REL_ASR_REQ_SLOW.22097\"),\r\n        DTCStruct(22099,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_MCC_ATIC_139_LS.22099\"),\r\n        DTCStruct(22100,\"P060300\",\"Internal Contr.Module (KAM) Error\",\"SV_ERR_SYM_MCC_ATIC_139_PS.22100\"),\r\n        DTCStruct(22136,\"P011600\",\"Engine Coolant Temperature Sensor 1 Circuit Range/Performance\",\"SV_ERR_SYM_TCE_NEG_OFS_CHK.22136\"),\r\n        DTCStruct(22260,\"P011100\",\"Intake Air Temperature Sensor 1 Bank 1 Circuit Range/Performance\",\"SV_ERR_SYM_TEMP_CST_PLAUS_TIG_IM.22260\"),\r\n        DTCStruct(22261,\"P007100\",\"Ambient Air Temperature Sensor Circuit Range/Performance\",\"SV_ERR_SYM_TEMP_CST_PLAUS_TAA.22261\"),\r\n        DTCStruct(22262,\"P218300\",\"Engine Coolant Temperature Sensor 2 Circuit Range/Performance\",\"SV_ERR_SYM_TEMP_CST_PLAUS_TCR.22262\"),\r\n        DTCStruct(23079,\"U105400\",\"Information electronics control module 1 No Communication\",\"SV_ERR_SYM_COM_MFE_INFO_TOUT.23079\"),\r\n        DTCStruct(23096,\"P011300\",\"Intake Air Temperature Sensor 1 Bank 1 Circuit High\",\"SV_ERR_SYM_LTS_AIR_OC_IM.23096\"),\r\n        DTCStruct(23097,\"P011200\",\"Intake Air Temperature Sensor 1 Bank 1 Circuit Low\",\"SV_ERR_SYM_LTS_AIR_SCG_IM.23097\"),\r\n        DTCStruct(23128,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_VEL_WHL_FN_LE_COM.23128\"),\r\n        DTCStruct(23129,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_VEL_WHL_FN_RI_COM.23129\"),\r\n        DTCStruct(23130,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_VEL_WHL_RE_LE_COM.23130\"),\r\n        DTCStruct(23131,\"U041500\",\"Invalid Data Received From Anti-Lock Brake System Control Module\",\"SV_ERR_SYM_VEL_WHL_RE_RI_COM.23131\"),\r\n        DTCStruct(23142,\"U042300\",\"Invalid Data Received From Instrument Panel Cluster Control Module\",\"SV_ERR_SYM_KBI_STANDZEIT_02.23142\"),\r\n        DTCStruct(23143,\"U042300\",\"Invalid Data Received From Instrument Panel Cluster Control Module\",\"SV_ERR_SYM_VS_ICL_DISP_COM.23143\"),\r\n        DTCStruct(23175,\"P007200\",\"Ambient Air Temperature Sensor Circuit Low\",\"SV_ERR_SYM_TAA_INTC_EL_L.23175\"),\r\n        DTCStruct(23176,\"P007000\",\"Ambient Air Temperature Sensor Circuit\",\"SV_ERR_SYM_TAA_INTC_EL_H.23176\"),\r\n        DTCStruct(23648,\"P16C100\",\"Heater support pump Open circuit\",\"SV_ERR_SYM_PWM_CWP_EL_OC_1.23648\"),\r\n        DTCStruct(23649,\"P16BF00\",\"Heater support pump Short circuit to ground\",\"SV_ERR_SYM_PWM_CWP_EL_SCG_1.23649\"),\r\n        DTCStruct(23650,\"P16C000\",\"Heater support pump Short circuit to B+\",\"SV_ERR_SYM_PWM_CWP_EL_SCP_1.23650\"),\r\n        DTCStruct(23651,\"P16C600\",\"Heater support pump Dry running\",\"SV_ERR_SYM_PWM_CWP_FB_1_0.23651\"),\r\n        DTCStruct(23652,\"P16C700\",\"Heater support pump locked\",\"SV_ERR_SYM_PWM_CWP_FB_1_1.23652\"),\r\n        DTCStruct(23653,\"P16C800\",\"Heater support pump Overheated\",\"SV_ERR_SYM_PWM_CWP_FB_1_2.23653\"),\r\n        DTCStruct(24576,\"U041400\",\"Invalid Data Received From Four-Wheel Drive Clutch Control Module\",\"SV_ERR_SYM_TQ_LIM_4WD_PROT_MAX_COM.24576\"),\r\n        DTCStruct(25214,\"P218100\",\"Cooling System Performance\",\"SV_ERR_SYM_TH_AUX.25214\"),\r\n        DTCStruct(25279,\"U040200\",\"Invalid Data Received From Transmission Control Module\",\"SV_ERR_SYM_TOIL_TRANS.25279\"),\r\n        DTCStruct(25574,\"U043300\",\"Invalid Data Received From Cruise Control Front Distance Range Sensor\",\"SV_ERR_SYM_TQI_REQ_DCC.25574\"),\r\n        DTCStruct(26279,\"P010600\",\"Manifold Abs.Pressure or Bar.Pressure Range/Performance\",\"SV_ERR_SYM_PRS_IM_PLAUS.26279\"),\r\n        DTCStruct(26363,\"P023600\",\"Turbocharger Boost Sensor (A) Circ. Range/Performance\",\"SV_ERR_SYM_PRS_UP_THR_PLAUS.26363\"),\r\n        DTCStruct(26370,\"P006800\",\"MAP/MAF - Throttle Position Correlation\",\"SV_ERR_SYM_PRS_IM_CTL_MIN.26370\"),\r\n        DTCStruct(26372,\"P227900\",\"Intake Air System Leak\",\"SV_ERR_SYM_AR_PL_MAX_LAM_RNG.26372\"),\r\n        DTCStruct(26374,\"P307A00\",\"Intake system Air flow too low\",\"SV_ERR_SYM_AR_PL_MIN_LAM_RNG.26374\"),\r\n        DTCStruct(26376,\"P227900\",\"Intake Air System Leak\",\"SV_ERR_SYM_PUT_MAX_LAM_RNG.26376\"),\r\n        DTCStruct(27740,\"P060600\",\"ECM/PCM Processor\",\"SV_ERR_SYM_AMP_PLAUS.27740\"),\r\n        DTCStruct(28511,\"U043300\",\"Invalid Data Received From Cruise Control Front Distance Range Sensor\",\"SV_ERR_SYM_AC_DCC_FOL_CTL.28511\"),\r\n        DTCStruct(28541,\"U042400\",\"Invalid Data Received From HVAC Control Module\",\"SV_ERR_SYM_TQ_ACC_CAN_PQX.28541\"),\r\n        DTCStruct(29095,\"P211200\",\"Throttle Actuator Control System - Stuck closed\",\"SV_ERR_SYM_TPS_JAM_CLOSE.29095\"),\r\n        DTCStruct(29376,\"P138800\",\"Ctrl. module faulty\",\"SV_ERR_SYM_TRM_TSK_06_MON_1.29376\"),\r\n        DTCStruct(29377,\"P138800\",\"Ctrl. module faulty\",\"SV_ERR_SYM_TRM_MOTOR_20_MON_1.29377\"),\r\n        DTCStruct(29381,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_TRANS_MON_1.29381\"),\r\n        DTCStruct(29382,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_TQI_MON_1.29382\"),\r\n        DTCStruct(29383,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_TQ_MIN_CLU_MON_1.29383\"),\r\n        DTCStruct(29384,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_TQ_MAX_CLU_MON_1.29384\"),\r\n        DTCStruct(29385,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_TPS_MON_1.29385\"),\r\n        DTCStruct(29386,\"P168000\",\"Reset-resistant limp-home\",\"SV_ERR_SYM_RST_CHK_MON_1.29386\"),\r\n        DTCStruct(29387,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_MSR_MON_1.29387\"),\r\n        DTCStruct(29388,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_MFF_MON_1.29388\"),\r\n        DTCStruct(29389,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_GS_INC_MON_1.29389\"),\r\n        DTCStruct(29391,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_BLS_BTS_MON_1.29391\"),\r\n        DTCStruct(30705,\"P00AF00\",\"Turbocharger/Supercharger Boost Control A Module Performance\",\"SV_ERR_SYM_BPA_STUCK_CLOSE_1.30705\"),\r\n        DTCStruct(30706,\"P00AF00\",\"Turbocharger/Supercharger Boost Control A Module Performance\",\"SV_ERR_SYM_BPA_STUCK_OPEN_1.30706\"),\r\n        DTCStruct(30787,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_TQI_P_D_IS_MON_1.30787\"),\r\n        DTCStruct(30788,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_TQI_N_MAX_MON_1.30788\"),\r\n        DTCStruct(30789,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_TQI_I_IS_MON_1.30789\"),\r\n        DTCStruct(30790,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_TQ_LOSS_MON_1.30790\"),\r\n        DTCStruct(30791,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_PVS_MON_1.30791\"),\r\n        DTCStruct(30792,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_N_32_MON_1.30792\"),\r\n        DTCStruct(30794,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_STST_MON_1.30794\"),\r\n        DTCStruct(31537,\"P060C00\",\"Internal Control Module Main Processor Performance\",\"SV_ERR_SYM_CRU_MON_1.31537\"),\r\n        DTCStruct(31538,\"P138800\",\"Ctrl. module faulty\",\"SV_ERR_SYM_CONV_MON_1.31538\")\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/DTCs.kt b/app/src/main/java/com/app/simostools/DTCs.kt
--- a/app/src/main/java/com/app/simostools/DTCs.kt	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/java/com/app/simostools/DTCs.kt	(date 1638128806574)
@@ -7,7 +7,7 @@
 
 object DTCs {
     private val TAG         = "DTCs"
-    var list: Array<DTCStruct?> = arrayOf(
+    var list: List<DTCStruct?> = listOf(
         DTCStruct(14823,"P060600","ECM/PCM Processor","SV_ERR_SYM_ACQ_KNK.14823"),
         DTCStruct(14824,"P157500","Right Electro-Hydraulic Engine Mount Solenoid Valve Short circuit to B+","SV_ERR_SYM_AEB_SCP_0.14824"),
         DTCStruct(14825,"P157600","Right Electro-Hydraulic Engine Mount Solenoid Valve Short circuit to ground","SV_ERR_SYM_AEB_SCG_0.14825"),
Index: app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.R.attr\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.content.res.Configuration\r\nimport android.os.Bundle\r\nimport android.text.Html\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.LinearLayout\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.Fragment\r\nimport java.lang.Exception\r\n\r\n\r\nclass LoggingBaseFragment: Fragment() {\r\n    private var TAG                             = \"LoggingBaseFragment\"\r\n    private var mFragmentName                   = \"All\"\r\n    private var mLastWarning                    = false\r\n    private var mLayouts: Array<View?>?         = null\r\n    private var mGauges: Array<SwitchGauge?>?   = null\r\n    private var mPIDsPerLayout                  = 1\r\n    private var mLayoutName: Int                = R.id.loggingLayoutScroll\r\n    private var mPIDList                        = byteArrayOf()\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n\r\n        //Clear our layout\r\n        clearLayout()\r\n\r\n        DebugLog.d(TAG, \"onDestroy\")\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        return inflater.inflate(R.layout.fragment_logging_layout, container, false)\r\n    }\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        arguments?.takeIf { it.containsKey(LAYOUT_NAME) }?.apply {\r\n            mFragmentName = getString(LAYOUT_NAME, mFragmentName).toString()\r\n        }\r\n\r\n        //check orientation and type\r\n        checkOrientation()\r\n\r\n        buildLayout()\r\n\r\n        DebugLog.d(TAG, \"onViewCreated\")\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n\r\n        DebugLog.d(TAG, \"onDestroyView\")\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        //buildLayout()\r\n\r\n        val filter = IntentFilter()\r\n        filter.addAction(GUIMessage.READ_LOG.toString())\r\n        activity?.registerReceiver(mBroadcastReceiver, filter)\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = ConfigSettings.KEEP_SCREEN_ON.toBoolean()\r\n\r\n        //Set background color\r\n        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n\r\n        DebugLog.d(TAG, \"onResume\")\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        //Clear our layout\r\n        //clearLayout()\r\n\r\n        activity?.unregisterReceiver(mBroadcastReceiver)\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = false\r\n\r\n        //Set background color\r\n        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n\r\n        DebugLog.d(TAG, \"onPause\")\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n\r\n        DebugLog.d(TAG, \"onStart\")\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n\r\n        DebugLog.d(TAG, \"onStop\")\r\n    }\r\n\r\n    private fun checkOrientation() {\r\n        //check orientation and type\r\n        var currentOrientation = resources.configuration.orientation\r\n\r\n        if (ConfigSettings.ALWAYS_PORTRAIT.toBoolean())\r\n            currentOrientation = Configuration.ORIENTATION_PORTRAIT\r\n\r\n        when(currentOrientation) {\r\n            Configuration.ORIENTATION_LANDSCAPE -> {\r\n                mPIDsPerLayout = 3\r\n            }\r\n            Configuration.ORIENTATION_PORTRAIT -> {\r\n                mPIDsPerLayout = 2\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun clearLayout() {\r\n        mGauges?.let { gauges ->\r\n            for (i in 0 until gauges.count()) {\r\n                gauges[i] = null\r\n            }\r\n        }\r\n        mGauges = null\r\n\r\n        mLayouts?.let { layouts ->\r\n            for (i in 0 until layouts.count()) {\r\n                layouts[i] = null\r\n            }\r\n        }\r\n        mLayouts = null\r\n\r\n        view?.let { currentview ->\r\n            //Clear current layout\r\n            val lLayout = currentview.findViewById<LinearLayout>(mLayoutName)\r\n            lLayout.removeAllViews()\r\n        }\r\n\r\n        DebugLog.d(TAG, \"Cleared layout.\")\r\n    }\r\n\r\n    private fun buildLayout() {\r\n        view?.let { currentview ->\r\n            try {\r\n                //Build PID List\r\n                buildPIDList(mFragmentName == \"All\")\r\n\r\n                //Build layout\r\n                PIDs.getList()?.let { list ->\r\n                    var layoutCount = mPIDList.count() / mPIDsPerLayout\r\n                    if (mPIDList.count() % mPIDsPerLayout != 0)\r\n                        layoutCount++\r\n\r\n                    mLayouts = arrayOfNulls(layoutCount)\r\n                    mGauges = arrayOfNulls(mPIDList.count())\r\n                    for (i in 0 until mPIDList.count()) {\r\n                        //build child layout\r\n                        var progID = 0\r\n                        when (i % mPIDsPerLayout) {\r\n                            0 -> {\r\n                                val pidLayout = layoutInflater.inflate(R.layout.fragment_pid, null)\r\n                                val lLayout = currentview.findViewById<LinearLayout>(mLayoutName)\r\n                                lLayout.addView(pidLayout)\r\n                                mLayouts!![i / mPIDsPerLayout] = pidLayout\r\n                                progID = R.id.pid_gauge\r\n                            }\r\n                            1 -> progID = R.id.pid_gauge1\r\n                            2 -> progID = R.id.pid_gauge2\r\n                        }\r\n\r\n                        //get current pid and data\r\n                        val data = PIDs.getData()!![mPIDList[i].toInt()]!!\r\n                        val pid = list[mPIDList[i].toInt()]!!\r\n\r\n                        //Setup the progress bar\r\n                        mGauges!![i] = mLayouts!![i / mPIDsPerLayout]?.findViewById(progID)\r\n                        val gauge = mGauges!![i]!!\r\n                        gauge.isVisible = true\r\n                        gauge.setTextColor(ColorList.TEXT.value)\r\n                        gauge.setProgressColor(ColorList.GAUGE_NORMAL.value, false)\r\n                        gauge.setRimColor(ColorList.BT_RIM.value)\r\n                        gauge.setMinMaxColor(ColorList.GAUGE_WARN.value, false)\r\n                        gauge.setMinMax(ConfigSettings.DRAW_MIN_MAX.toBoolean(), false)\r\n                        val prog = when (data.inverted) {\r\n                            true -> (0 - (pid.value - pid.progMin)) * data.multiplier\r\n                            false -> (pid.value - pid.progMin) * data.multiplier\r\n                        }\r\n                        val progMin = when (data.inverted) {\r\n                            true -> (0 - (data.min - pid.progMin)) * data.multiplier\r\n                            false -> (data.min - pid.progMin) * data.multiplier\r\n                        }\r\n                        val progMax = when (data.inverted) {\r\n                            true -> (0 - (data.max - pid.progMin)) * data.multiplier\r\n                            false -> (data.max - pid.progMin) * data.multiplier\r\n                        }\r\n                        gauge.setProgress(prog, progMin, progMax, false)\r\n                        gauge.setProgressBackgroundColor(ColorList.GAUGE_BG.value, false)\r\n                        gauge.setStyle(ConfigSettings.GAUGE_TYPE.toGaugeType(), false)\r\n                        when (ConfigSettings.GAUGE_TYPE.toGaugeType()) {\r\n                            GaugeType.BAR_H -> {\r\n                                gauge.setProgressWidth(400f, false)\r\n                                gauge.textSize = 30f\r\n                            }\r\n                            GaugeType.BAR_V -> {\r\n                                gauge.setProgressWidth(400f, false)\r\n                                gauge.textSize = 30f\r\n                            }\r\n                            GaugeType.BASIC -> {\r\n                                gauge.setProgressWidth(400f, false)\r\n                                gauge.textSize = 30f\r\n                            }\r\n                            GaugeType.ROUND -> {\r\n                                gauge.setProgressWidth(50f, false)\r\n                                gauge.textSize = 24f\r\n                            }\r\n                        }\r\n                        if(kotlin.math.abs(pid.progMin) == kotlin.math.abs(pid.progMax))\r\n                            gauge.setCentered(true, false)\r\n                        gauge.setGraduations(ConfigSettings.DRAW_GRADUATIONS.toBoolean(), false)\r\n                        gauge.setIndex(i)\r\n                        gauge.setOnLongClickListener {\r\n                            onGaugeClick(it)\r\n                        }\r\n                        gauge.setEnable(pid.enabled)\r\n                    }\r\n                    DebugLog.d(TAG, \"buildLayout ${mGauges?.count()}\")\r\n                    updateGauges()\r\n                }\r\n            } catch (e: Exception) {\r\n                DebugLog.e(TAG, \"buildLayout - exception\", e)\r\n            }\r\n        } ?: DebugLog.d(TAG, \"buildLayout - view is invalid.\")\r\n    }\r\n\r\n    private fun updateGauges() {\r\n        mGauges?.let { gauges ->\r\n            //Set the UI values\r\n            var warnAny = false\r\n            var lastI = -1\r\n            try {\r\n                if(gauges.count() != mPIDList.count()) {\r\n                    DebugLog.d(TAG, \"updateGauges - gauge count does not match pid count[${gauges.count()}:${mPIDList.count()}]\")\r\n                }\r\n                for (i in 0 until mPIDList.count()) {\r\n                    //get the current pid\r\n                    val pid = PIDs.getList()!![mPIDList[i].toInt()]!!\r\n                    val data = PIDs.getData()!![mPIDList[i].toInt()]!!\r\n                    val gauge = gauges[i]!!\r\n\r\n                    var prog = when (data.inverted) {\r\n                        true -> (0 - (pid.value - pid.progMin)) * data.multiplier\r\n                        false -> (pid.value - pid.progMin) * data.multiplier\r\n                    }\r\n                    val progMin = when (data.inverted) {\r\n                        true -> (0 - (data.min - pid.progMin)) * data.multiplier\r\n                        false -> (data.min - pid.progMin) * data.multiplier\r\n                    }\r\n                    val progMax = when (data.inverted) {\r\n                        true -> (0 - (data.max - pid.progMin)) * data.multiplier\r\n                        false -> (data.max - pid.progMin) * data.multiplier\r\n                    }\r\n                    gauge.setProgress(prog, progMin, progMax, false)\r\n\r\n                    //constrain value\r\n                    if (prog > 100f) prog = 100f\r\n                    else if (prog < 0f) prog = 0f\r\n\r\n                    //check if previous value is different\r\n                    if (prog != gauge.getProgress()) {\r\n                        gauge.setProgress(prog, progMin, progMax, false)\r\n                    }\r\n\r\n                    //Check to see if we should be warning user\r\n                    if (!data.warn) {\r\n                        gauge.setProgressColor(ColorList.GAUGE_NORMAL.value, false)\r\n                        gauge.setMinMaxColor(ColorList.GAUGE_WARN.value, false)\r\n                        gauge.setProgressBackgroundColor(ColorList.GAUGE_BG.value, false)\r\n                    } else {\r\n                        gauge.setProgressColor(ColorList.GAUGE_WARN.value, false)\r\n                        gauge.setMinMaxColor(ColorList.GAUGE_NORMAL.value, false)\r\n                        gauge.setProgressBackgroundColor(ColorList.BG_WARN.value, false)\r\n                        warnAny = true\r\n                    }\r\n\r\n                    //update text which will invalidate and redraw\r\n                    gauge.text = Html.fromHtml(\r\n                        \"<b><small>${pid.name}<br></small><big>\" +\r\n                                \"<font color=\\\"#${ColorList.GAUGE_VALUE.value.toColorHex()}\\\">\" +\r\n                                \"${pid.format.format(pid.value)}</font></big></b>\" +\r\n                                \"<small><br>${pid.format.format(data.min)} <b>:</b> \" +\r\n                                \"${pid.format.format(data.max)}<br>${pid.unit}</small>\"\r\n                        , Html.FROM_HTML_OPTION_USE_CSS_COLORS)\r\n\r\n                    lastI = i\r\n                }\r\n\r\n                //If any visible PIDS are in warning state set background color to warn\r\n                if (warnAny) {\r\n                    if (!mLastWarning) {\r\n                        mLastWarning = true\r\n                        view?.setBackgroundColor(ColorList.BG_WARN.value)\r\n                    } else {\r\n                        mLastWarning = false\r\n                        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n                    }\r\n                } else {\r\n                    if (mLastWarning) {\r\n                        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n                    }\r\n                    mLastWarning = false\r\n                }\r\n\r\n                DebugLog.d(TAG, \"updateGauges [$lastI:${mPIDList.count()}]\")\r\n            } catch (e: Exception) {\r\n                DebugLog.e(TAG, \"updateGauges - exception [$lastI:${mPIDList.count()}]\", e)\r\n            }\r\n        }?: run {\r\n            DebugLog.d(TAG, \"updateGauges - gauges are invalid pidlist count ${mPIDList.count()}\")\r\n        }\r\n    }\r\n\r\n    private fun buildPIDList(all: Boolean) {\r\n        //Build our list of PIDS in this layout\r\n        PIDs.getList()?.let { list ->\r\n            //get list of custom PIDS\r\n            var customList = byteArrayOf()\r\n            for (i in 0 until list.count()) {\r\n                list[i]?.let { pid ->\r\n                    if (pid.enabled && (all || pid.tabs.contains(mFragmentName))) {\r\n                        customList += i.toByte()\r\n                    }\r\n                }\r\n            }\r\n            if(!all) {\r\n                for (i in 0 until customList.count()) {\r\n                    var movedAhead = false\r\n                    var lastPos = -1\r\n                    do {\r\n                        movedAhead = false\r\n                        list[customList[i].toInt()]?.let { pid ->\r\n                            pid.tabs.split(\".\").forEach {\r\n                                try {\r\n                                    val curPos = customList[i]\r\n                                    val pidPos = it.substringAfter(\"|\").toInt()\r\n                                    if (pidPos < customList.count()) {\r\n                                        customList[i] = customList[pidPos]\r\n                                        customList[pidPos] = curPos\r\n                                        if (pidPos > curPos && pidPos != lastPos)\r\n                                            movedAhead = true\r\n\r\n                                        lastPos = pidPos   //prevent an endless loop\r\n                                    } else {\r\n                                        lastPos = -1\r\n                                    }\r\n                                } catch (e: Exception) {\r\n                                    DebugLog.d(TAG, \"Error in PID layout position\")\r\n                                }\r\n                            }\r\n                        }\r\n                    } while (movedAhead)\r\n                }\r\n            }\r\n            mPIDList = customList\r\n        }\r\n    }\r\n\r\n    private fun onGaugeClick(view: View?): Boolean {\r\n        PIDs.resetData()\r\n        updateGauges()\r\n\r\n        return true\r\n    }\r\n\r\n    private val mBroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            when (intent.action) {\r\n                GUIMessage.READ_LOG.toString() -> {\r\n                    val readCount = intent.getIntExtra(\"readCount\", 0)\r\n                    val readTime = intent.getLongExtra(\"readTime\", 0)\r\n                    val readResult = intent.getSerializableExtra(\"readResult\") as UDSReturn\r\n\r\n                    //Make sure we received an ok\r\n                    if (readResult != UDSReturn.OK) {\r\n                        return\r\n                    }\r\n\r\n                    //Update callback\r\n                    updateGauges()\r\n                }\r\n                else -> { }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt b/app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt
--- a/app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt	(date 1637982611908)
@@ -211,21 +211,12 @@
                         gauge.setProgressBackgroundColor(ColorList.GAUGE_BG.value, false)
                         gauge.setStyle(ConfigSettings.GAUGE_TYPE.toGaugeType(), false)
                         when (ConfigSettings.GAUGE_TYPE.toGaugeType()) {
-                            GaugeType.BAR_H -> {
-                                gauge.setProgressWidth(400f, false)
-                                gauge.textSize = 30f
-                            }
-                            GaugeType.BAR_V -> {
-                                gauge.setProgressWidth(400f, false)
-                                gauge.textSize = 30f
-                            }
-                            GaugeType.BASIC -> {
-                                gauge.setProgressWidth(400f, false)
-                                gauge.textSize = 30f
-                            }
+                            GaugeType.BAR_H -> gauge.setProgressWidth(400f, false)
+                            GaugeType.BAR_V -> gauge.setProgressWidth(400f, false)
+                            GaugeType.BASIC -> gauge.setProgressWidth(400f, false)
                             GaugeType.ROUND -> {
                                 gauge.setProgressWidth(50f, false)
-                                gauge.textSize = 24f
+                                gauge.textSize = gauge.textSize * 0.25f
                             }
                         }
                         if(kotlin.math.abs(pid.progMin) == kotlin.math.abs(pid.progMax))
Index: app/src/main/java/com/app/simostools/SwitchGraph.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/SwitchGraph.kt b/app/src/main/java/com/app/simostools/SwitchGraph.kt
new file mode 100644
--- /dev/null	(date 1638157045625)
+++ b/app/src/main/java/com/app/simostools/SwitchGraph.kt	(date 1638157045625)
@@ -0,0 +1,151 @@
+package com.app.simostools
+
+import android.annotation.SuppressLint
+import android.content.Context
+import android.graphics.*
+import android.util.AttributeSet
+import android.view.MotionEvent
+import android.view.View
+import kotlin.math.sqrt
+
+class SwitchGraph: View {
+    constructor(context: Context) : super(context) {
+    }
+    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {
+    }
+    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {
+    }
+    private val bgPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        style = Paint.Style.FILL
+        color = Color.BLACK
+    }
+    private val linePaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        style = Paint.Style.STROKE
+        color = Color.RED
+        strokeWidth = 5.0f
+    }
+    private val cursorPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        style = Paint.Style.STROKE
+        color = Color.WHITE
+        strokeWidth = 2.0f
+    }
+    private val textPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        style       = Paint.Style.FILL_AND_STROKE
+        color       = Color.WHITE
+        strokeWidth = 2.0f
+        textSize    = 50.0f
+    }
+    private var mCurrentWidth               = 0f
+    private var mCurrentHeight              = 0f
+    private var mCursorPosition             = 0f
+    private var mZoomAmount                 = 1f
+    private var mZoomingAmount              = 0f
+    private var mZooming                    = false
+    private var mZoomingX                   = 0f
+    private var mZoomingY                   = 0f
+    var data:Array<PlayBackDataStruct?>?    = null
+
+    override fun onDraw(canvas: Canvas) {
+        //draw background
+        canvas.drawRect(0f, 0f, mCurrentWidth, mCurrentHeight, bgPaint)
+
+        //draw zoom
+        data?.let { dataList ->
+            textPaint.color = Color.WHITE
+            canvas.drawText(
+                "Z[$mZoomAmount]",
+                0f,
+                50f,
+                textPaint
+            )
+
+            //draw text
+            var textPosition = 0
+            for(i in 0 until dataList.count()) {
+                dataList[i]?.let { data ->
+                    if(data.enabled) {
+                        var xPosition = ((mCursorPosition / mCurrentWidth) * data.data.count()).toInt()
+                        if(xPosition >= data.data.count())
+                            xPosition = data.data.count()-1
+                        if(xPosition < 0)
+                            xPosition = 0
+                        val xValue = data.data[xPosition]
+                        textPaint.color = data.color
+                        canvas.drawText(
+                            "${data.name} [$xValue]",
+                            0f,
+                            mCurrentHeight - (66f * textPosition),
+                            textPaint
+                        )
+                        textPosition++
+                    }
+                }
+            }
+
+            //draw line graphs
+            for(i in 0 until dataList.count()) {
+                val pidItem = dataList[i]
+                pidItem?.let {
+                    if (pidItem.data.count() > 0 && pidItem.enabled) {
+                        linePaint.color = pidItem.color
+                        val startX = (1.0f - (mZoomAmount + mZoomingAmount)) * mCursorPosition
+                        val incrementX = mCurrentWidth / pidItem.data.count() * (mZoomAmount + mZoomingAmount)
+                        val incrementY = mCurrentHeight / (pidItem.max - pidItem.min)
+                        var lastY = pidItem.data[0] * incrementY
+                        for (x in 0 until pidItem.data.count()) {
+                            canvas.drawLine(x * incrementX + startX, mCurrentHeight-lastY, (x + 1) * incrementX + startX, mCurrentHeight-(pidItem.data[x] * incrementY), linePaint)
+                            lastY = pidItem.data[x] * incrementY
+                        }
+                    }
+                }
+            }
+
+            //draw cursor
+            canvas.drawLine(mCursorPosition, mCurrentHeight, mCursorPosition, 0f, cursorPaint)
+        }
+        super.onDraw(canvas)
+    }
+
+    override fun onSizeChanged(width: Int, height: Int, oldWidth: Int, oldHeight: Int) {
+        mCurrentWidth = width.toFloat()
+        mCurrentHeight = height.toFloat()
+
+        invalidate()
+    }
+
+    @SuppressLint("ClickableViewAccessibility")
+    override fun onTouchEvent(event: MotionEvent?): Boolean {
+        event?.let {
+            if(it.pointerCount > 1) {
+                if(!mZooming) {
+                    mZooming = true
+                    mZoomingX = it.x
+                    mZoomingY = it.y
+                } else {
+                    when (it.action) {
+                        else -> {
+                            val zAmount = (it.x-mZoomingX) * 0.005f
+                            mZoomingAmount = if(zAmount + mZoomAmount < 1f) 1.0f - mZoomAmount
+                            else zAmount
+
+                            invalidate()
+                        }
+                    }
+                }
+            } else {
+                if(mZooming) {
+                    mZooming = false
+                    mZoomAmount += mZoomingAmount
+                    mZoomingAmount = 0f
+                }
+                when (it.action) {
+                    else -> {
+                        mCursorPosition = it.x
+                        invalidate()
+                    }
+                }
+            }
+        }
+        return true
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/app/simostools/PlaybackFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/PlaybackFragment.kt b/app/src/main/java/com/app/simostools/PlaybackFragment.kt
new file mode 100644
--- /dev/null	(date 1638137991796)
+++ b/app/src/main/java/com/app/simostools/PlaybackFragment.kt	(date 1638137991796)
@@ -0,0 +1,251 @@
+package com.app.simostools
+
+import android.app.Activity
+import android.content.Intent
+import android.graphics.Color
+import android.net.Uri
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.LinearLayout
+import android.widget.Toast
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.core.view.isVisible
+import androidx.fragment.app.Fragment
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.ViewModelProvider
+import androidx.navigation.fragment.findNavController
+import java.lang.Exception
+import java.lang.Math.random
+
+var gPlaybackData: Array<PlayBackDataStruct?>?  = null
+
+class PlaybackViewModel : ViewModel() {
+}
+
+data class PlayBackDataStruct(var name: String,
+                                var tabs: String,
+                                var min: Float,
+                                var max: Float,
+                                var enabled: Boolean,
+                                var color: Int,
+                                var data: FloatArray)
+
+class PlaybackFragment: Fragment() {
+    private var TAG                     = "PlaybackFragment"
+    private var mGraph:SwitchGraph?     = null
+    private var mButtons:LinearLayout?  = null
+    private lateinit var mViewModel: PlaybackViewModel
+
+    var resultPickLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
+        if (result.resultCode == Activity.RESULT_OK) {
+            val uri: Uri? = result.data?.data
+            uri?.let {
+                loadPlaybackCSV(uri)
+                Toast.makeText(activity, "Success", Toast.LENGTH_SHORT).show()
+            }?: Toast.makeText(activity, "Failed", Toast.LENGTH_SHORT).show()
+        } else {
+            Toast.makeText(activity, "Failed", Toast.LENGTH_SHORT).show()
+        }
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+
+        DebugLog.d(TAG, "onDestroy")
+    }
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+
+        return inflater.inflate(R.layout.fragment_playback, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        mViewModel = ViewModelProvider(this).get(PlaybackViewModel::class.java)
+
+        val setEnabledButton = view.findViewById<SwitchButton>(R.id.buttonSetPIDS)
+        setEnabledButton.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                gPlaybackData?.let {
+                    findNavController().navigate(R.id.action_PlaybackFragment_to_PlaybackEnabledFragment)
+                }
+            }
+        }
+
+        val setTabsButton = view.findViewById<SwitchButton>(R.id.buttonSetTabs)
+        setTabsButton.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                gPlaybackData?.let {
+                    findNavController().navigate(R.id.action_PlaybackFragment_to_PlaybackTabsFragment)
+                }
+            }
+        }
+
+        val loadButton = view.findViewById<SwitchButton>(R.id.buttonLoad)
+        loadButton.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                var chooseFile = Intent(Intent.ACTION_GET_CONTENT)
+                chooseFile.type = "*/*"
+                chooseFile = Intent.createChooser(chooseFile, "Choose a CSV")
+                resultPickLauncher.launch(chooseFile)
+            }
+        }
+
+        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)
+        backButton.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                findNavController().navigateUp()
+            }
+        }
+
+        mButtons = view.findViewById(R.id.layoutButtons)
+
+        mGraph = view.findViewById(R.id.switchGraph)
+        mGraph?.data = gPlaybackData
+
+        DebugLog.d(TAG, "onViewCreated")
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+
+        DebugLog.d(TAG, "onDestroyView")
+    }
+
+    override fun onResume() {
+        super.onResume()
+
+        //Set background color
+        view?.setBackgroundColor(ColorList.BG_NORMAL.value)
+
+        DebugLog.d(TAG, "onResume")
+    }
+
+    override fun onPause() {
+        super.onPause()
+
+        DebugLog.d(TAG, "onPause")
+    }
+
+    override fun onStart() {
+        super.onStart()
+
+        DebugLog.d(TAG, "onStart")
+    }
+
+    override fun onStop() {
+        super.onStop()
+
+        DebugLog.d(TAG, "onStop")
+    }
+
+    private fun loadPlaybackCSV(uri: Uri) {
+        val inputStream = activity?.contentResolver?.openInputStream(uri)
+        var fileData = String(inputStream?.readBytes()?: byteArrayOf())
+        inputStream?.close()
+
+        var readHeader = false
+        var readFirst = false
+        do {
+            //get data line by line
+            var dataLine = fileData.substringBefore("\n", "")
+            fileData = fileData.substringAfter("\n", "")
+
+            //get items from the current line
+            var lineItems: Array<String> = arrayOf()
+            do {
+                val lineItem = dataLine.substringBefore(",", "")
+                dataLine = dataLine.substringAfter(",", "")
+                if(lineItem.isNotEmpty())
+                    lineItems += lineItem
+            } while (dataLine.isNotEmpty())
+
+            //Are we reading the header?
+            if(!readHeader) {
+                readHeader = true
+                gPlaybackData = null
+
+                gPlaybackData = arrayOfNulls(lineItems.count())
+                gPlaybackData?.let { playbackData ->
+                    for (i in 0 until lineItems.count()) {
+                        val r = (random() * 255).toFloat()
+                        val g = (random() * 255).toFloat()
+                        val b = (random() * 255).toFloat()
+                        playbackData[i] = PlayBackDataStruct(lineItems[i], "", 0f, 0f, false, Color.rgb(r, g, b), floatArrayOf())
+                        PIDs.getList()?.let { pidList ->
+                            pidList.forEach { pid ->
+                                pid?.let {
+                                    if (lineItems[i].contains(pid.name)) {
+                                        playbackData[i]?.min = pid.progMin
+                                        playbackData[i]?.max = pid.progMax
+                                        playbackData[i]?.enabled = true
+                                        playbackData[i]?.tabs = pid.tabs
+                                    }
+                                }
+                            }
+                        }
+                        DebugLog.d(TAG, "Data item: ${lineItems[i]}")
+                    }
+                }
+            } else {
+                //Read data
+                gPlaybackData?.let { pidList ->
+                    for (i in 0 until lineItems.count()) {
+                        if (pidList.count() > i) {
+                            val newValue = try {
+                                lineItems[i].toFloat()
+                            } catch (e: Exception) {
+                                0f
+                            }
+
+                            val pidItem = pidList[i]
+                            pidItem?.let {
+                                it.data = it.data.plus(newValue)
+
+                                if (!it.enabled) {
+                                    if (!readFirst) {
+                                        it.min = newValue
+                                        it.max = newValue
+                                    } else {
+                                        if (newValue > it.max)
+                                            it.max = newValue
+
+                                        if (newValue < it.min)
+                                            it.min = newValue
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+                readFirst = true
+            }
+        } while(fileData.isNotEmpty())
+
+        gPlaybackData?.let { playbackData ->
+            playbackData.forEach {
+                it?.enabled = false
+            }
+        }
+
+        mGraph?.data = gPlaybackData
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_playback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_playback.xml b/app/src/main/res/layout/fragment_playback.xml
new file mode 100644
--- /dev/null	(date 1638137981369)
+++ b/app/src/main/res/layout/fragment_playback.xml	(date 1638137981369)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".PlaybackFragment"
+    android:id="@+id/PlaybackLayout">
+
+    <com.app.simostools.SwitchGraph
+        android:id="@+id/switchGraph"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toTopOf="@+id/layoutButtons"/>
+
+    <LinearLayout
+        android:id="@+id/layoutButtons"
+        android:layout_width="0dp"
+        android:layout_height="128dp"
+        android:orientation="vertical"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/switchGraph"
+        app:layout_constraintBottom_toBottomOf="parent" >
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:orientation="horizontal">
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonSetPIDS"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_set_pids"
+                android:textSize="24sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonSetTabs"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_set_tabs"
+                android:textSize="24sp" />
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:orientation="horizontal">
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonLoad"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_load_csv"
+                android:textSize="24sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonBack"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_back"
+                android:textSize="24sp" />
+
+        </LinearLayout>
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainFragment\"\r\n    android:id=\"@+id/MainLayout\">\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imageMainLogo\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        android:src=\"@drawable/simostools\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/imageMainButtons\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/imageMainButtons\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_weight=\"1\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/imageMainLogo\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <LinearLayout\r\n            android:layout_weight=\"1\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"0dp\"\r\n            android:orientation=\"horizontal\">\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainLogging\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:text=\"@string/button_logging\"\r\n                android:textSize=\"24sp\" />\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainFlashing\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:text=\"@string/button_flashing\"\r\n                android:textSize=\"24sp\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_weight=\"1\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"0dp\"\r\n            android:orientation=\"horizontal\">\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainUtilities\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:text=\"@string/button_utilities\"\r\n                android:textSize=\"24sp\" />\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainSettings\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"0dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:text=\"@string/button_settings\"\r\n                android:textSize=\"24sp\" />\r\n\r\n        </LinearLayout>\r\n        <com.app.simostools.SwitchButton\r\n            android:id=\"@+id/buttonMainExit\"\r\n            android:layout_marginHorizontal=\"64dp\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"64dp\"\r\n            android:text=\"@string/button_exit\"\r\n            android:textSize=\"24sp\" />\r\n\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_main.xml b/app/src/main/res/layout/fragment_main.xml
--- a/app/src/main/res/layout/fragment_main.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/layout/fragment_main.xml	(date 1637980490151)
@@ -58,6 +58,14 @@
             android:layout_height="0dp"
             android:orientation="horizontal">
 
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonMainPlayback"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_playback"
+                android:textSize="24sp" />
+
             <com.app.simostools.SwitchButton
                 android:id="@+id/buttonMainUtilities"
                 android:layout_weight="1"
@@ -66,6 +74,14 @@
                 android:text="@string/button_utilities"
                 android:textSize="24sp" />
 
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:orientation="horizontal">
+
             <com.app.simostools.SwitchButton
                 android:id="@+id/buttonMainSettings"
                 android:layout_weight="1"
@@ -74,14 +90,14 @@
                 android:text="@string/button_settings"
                 android:textSize="24sp" />
 
-        </LinearLayout>
-        <com.app.simostools.SwitchButton
-            android:id="@+id/buttonMainExit"
-            android:layout_marginHorizontal="64dp"
-            android:layout_width="match_parent"
-            android:layout_height="64dp"
-            android:text="@string/button_exit"
-            android:textSize="24sp" />
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonMainExit"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_exit"
+                android:textSize="24sp" />
 
+        </LinearLayout>
     </LinearLayout>
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout-sw600dp-land/fragment_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainFragment\"\r\n    android:id=\"@+id/MainLayout\">\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imageMainLogo\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        android:src=\"@drawable/simostools\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/imageMainButtons\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/imageMainButtons\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"1\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/imageMainLogo\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <LinearLayout\r\n            android:layout_weight=\"1\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainLogging\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"0dp\"\r\n                android:text=\"@string/button_logging\"\r\n                android:textSize=\"42sp\" />\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainUtilities\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"0dp\"\r\n                android:text=\"@string/button_utilities\"\r\n                android:textSize=\"42sp\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_weight=\"1\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainFlashing\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"0dp\"\r\n                android:text=\"@string/button_flashing\"\r\n                android:textSize=\"42sp\" />\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainSettings\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"0dp\"\r\n                android:text=\"@string/button_settings\"\r\n                android:textSize=\"42sp\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <com.app.simostools.SwitchButton\r\n            android:id=\"@+id/buttonMainExit\"\r\n            android:layout_marginVertical=\"64dp\"\r\n            android:layout_width=\"128dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:text=\"@string/button_exit\"\r\n            android:textSize=\"42sp\" />\r\n\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp-land/fragment_main.xml b/app/src/main/res/layout-sw600dp-land/fragment_main.xml
--- a/app/src/main/res/layout-sw600dp-land/fragment_main.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/layout-sw600dp-land/fragment_main.xml	(date 1637980490158)
@@ -43,11 +43,19 @@
                 android:textSize="42sp" />
 
             <com.app.simostools.SwitchButton
-                android:id="@+id/buttonMainUtilities"
+                android:id="@+id/buttonMainPlayback"
                 android:layout_weight="1"
                 android:layout_width="match_parent"
                 android:layout_height="0dp"
-                android:text="@string/button_utilities"
+                android:text="@string/button_playback"
+                android:textSize="42sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonMainSettings"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_settings"
                 android:textSize="42sp" />
 
         </LinearLayout>
@@ -67,22 +75,22 @@
                 android:textSize="42sp" />
 
             <com.app.simostools.SwitchButton
-                android:id="@+id/buttonMainSettings"
+                android:id="@+id/buttonMainUtilities"
                 android:layout_weight="1"
                 android:layout_width="match_parent"
                 android:layout_height="0dp"
-                android:text="@string/button_settings"
+                android:text="@string/button_utilities"
                 android:textSize="42sp" />
 
-        </LinearLayout>
-
-        <com.app.simostools.SwitchButton
-            android:id="@+id/buttonMainExit"
-            android:layout_marginVertical="64dp"
-            android:layout_width="128dp"
-            android:layout_height="match_parent"
-            android:text="@string/button_exit"
-            android:textSize="42sp" />
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonMainExit"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_exit"
+                android:textSize="42sp" />
 
+        </LinearLayout>
+
     </LinearLayout>
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/app/simostools/PlaybackEnabledFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/PlaybackEnabledFragment.kt b/app/src/main/java/com/app/simostools/PlaybackEnabledFragment.kt
new file mode 100644
--- /dev/null	(date 1638136074832)
+++ b/app/src/main/java/com/app/simostools/PlaybackEnabledFragment.kt	(date 1638136074832)
@@ -0,0 +1,122 @@
+package com.app.simostools
+
+import android.graphics.Color
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.LinearLayout
+import androidx.fragment.app.Fragment
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.ViewModelProvider
+import androidx.navigation.fragment.findNavController
+
+class PlaybackEnabledViewModel : ViewModel() {
+}
+
+class PlaybackEnabledFragment: Fragment() {
+    private var TAG                                                         = "PlaybackEnabledFragment"
+    private var mEnableList:Array<androidx.appcompat.widget.SwitchCompat?>? = null
+    private lateinit var mViewModel: PlaybackEnabledViewModel
+
+    override fun onDestroy() {
+        super.onDestroy()
+
+        mEnableList = null
+
+        DebugLog.d(TAG, "onDestroy")
+    }
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+
+        return inflater.inflate(R.layout.fragment_playback_enabled, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        mViewModel = ViewModelProvider(this).get(PlaybackEnabledViewModel::class.java)
+
+        val setButton = view.findViewById<SwitchButton>(R.id.buttonOk)
+        setButton.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                gPlaybackData?.let { playbackData ->
+                    mEnableList?.let { enableList ->
+                        playbackData.forEachIndexed() { i, pid ->
+                            pid?.enabled = enableList[i]?.isChecked ?: false
+                        }
+                    }
+                }
+                findNavController().navigateUp()
+            }
+        }
+
+        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)
+        backButton.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                findNavController().navigateUp()
+            }
+        }
+
+        gPlaybackData?.let {
+            mEnableList = arrayOfNulls(it.count())
+            mEnableList?.let { enableList ->
+                val lLayout = view.findViewById<LinearLayout>(R.id.playbackLayoutScroll)
+                it.forEachIndexed() { i, pid ->
+                    val pidLayout = androidx.appcompat.widget.SwitchCompat(requireContext())
+                    pidLayout.text = pid?.name
+                    pidLayout.setTextColor(ColorList.TEXT.value)
+                    pidLayout.textSize = 24f
+                    pidLayout.isChecked = pid?.enabled ?: false
+                    pidLayout.setTextColor(pid?.color?: Color.WHITE)
+                    enableList[i] = pidLayout
+                    lLayout.addView(pidLayout)
+                }
+            }
+        }
+
+        DebugLog.d(TAG, "onViewCreated")
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+
+        DebugLog.d(TAG, "onDestroyView")
+    }
+
+    override fun onResume() {
+        super.onResume()
+
+        //Set background color
+        view?.setBackgroundColor(ColorList.BG_NORMAL.value)
+
+        DebugLog.d(TAG, "onResume")
+    }
+
+    override fun onPause() {
+        super.onPause()
+
+        DebugLog.d(TAG, "onPause")
+    }
+
+    override fun onStart() {
+        super.onStart()
+
+        DebugLog.d(TAG, "onStart")
+    }
+
+    override fun onStop() {
+        super.onStop()
+
+        DebugLog.d(TAG, "onStop")
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout-sw600dp/fragment_playback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp/fragment_playback.xml b/app/src/main/res/layout-sw600dp/fragment_playback.xml
new file mode 100644
--- /dev/null	(date 1638153270546)
+++ b/app/src/main/res/layout-sw600dp/fragment_playback.xml	(date 1638153270546)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".PlaybackFragment"
+    android:id="@+id/PlaybackLayout">
+
+    <com.app.simostools.SwitchGraph
+        android:id="@+id/switchGraph"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toTopOf="@+id/layoutButtons"/>
+
+    <LinearLayout
+        android:id="@+id/layoutButtons"
+        android:layout_width="0dp"
+        android:layout_height="256dp"
+        android:orientation="vertical"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/switchGraph"
+        app:layout_constraintBottom_toBottomOf="parent" >
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:orientation="horizontal">
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonSetPIDS"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_set_pids"
+                android:textSize="42sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonSetTabs"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_set_tabs"
+                android:textSize="42sp" />
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            android:orientation="horizontal">
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonLoad"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_load_csv"
+                android:textSize="42sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonBack"
+                android:layout_weight="1"
+                android:layout_width="0dp"
+                android:layout_height="match_parent"
+                android:text="@string/button_back"
+                android:textSize="42sp" />
+
+        </LinearLayout>
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_playback_enabled.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_playback_enabled.xml b/app/src/main/res/layout/fragment_playback_enabled.xml
new file mode 100644
--- /dev/null	(date 1638067852584)
+++ b/app/src/main/res/layout/fragment_playback_enabled.xml	(date 1638067852584)
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".PlaybackEnabledFragment"
+    android:id="@+id/PlaybackEnabledLayout">
+
+    <ScrollView
+        android:id="@+id/playbackLayoutScrollMain"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginBottom="64dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <LinearLayout
+            android:id="@+id/playbackLayoutScroll"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+
+        </LinearLayout>
+    </ScrollView>
+
+    <LinearLayout
+        android:id="@+id/playbackEnabledButtons"
+        android:layout_width="match_parent"
+        android:layout_height="64dp"
+        android:orientation="horizontal"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/playbackLayoutScrollMain">
+
+        <com.app.simostools.SwitchButton
+            android:id="@+id/buttonOk"
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:text="@string/button_ok"
+            android:textSize="24sp" />
+
+        <com.app.simostools.SwitchButton
+            android:id="@+id/buttonBack"
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:text="@string/button_back"
+            android:textSize="24sp" />
+
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout-land/fragment_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainFragment\"\r\n    android:id=\"@+id/MainLayout\">\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imageMainLogo\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        android:src=\"@drawable/simostools\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/imageMainButtons\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/imageMainButtons\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_weight=\"1\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/imageMainLogo\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <LinearLayout\r\n            android:layout_weight=\"1\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainLogging\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"0dp\"\r\n                android:text=\"@string/button_logging\"\r\n                android:textSize=\"24sp\" />\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainUtilities\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"0dp\"\r\n                android:text=\"@string/button_utilities\"\r\n                android:textSize=\"24sp\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_weight=\"1\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainFlashing\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"0dp\"\r\n                android:text=\"@string/button_flashing\"\r\n                android:textSize=\"24sp\" />\r\n\r\n            <com.app.simostools.SwitchButton\r\n                android:id=\"@+id/buttonMainSettings\"\r\n                android:layout_weight=\"1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"0dp\"\r\n                android:text=\"@string/button_settings\"\r\n                android:textSize=\"24sp\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <com.app.simostools.SwitchButton\r\n            android:id=\"@+id/buttonMainExit\"\r\n            android:layout_marginVertical=\"64dp\"\r\n            android:layout_width=\"64dp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:text=\"@string/button_exit\"\r\n            android:textSize=\"24sp\" />\r\n\r\n    </LinearLayout>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-land/fragment_main.xml b/app/src/main/res/layout-land/fragment_main.xml
--- a/app/src/main/res/layout-land/fragment_main.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/layout-land/fragment_main.xml	(date 1637980490155)
@@ -43,11 +43,19 @@
                 android:textSize="24sp" />
 
             <com.app.simostools.SwitchButton
-                android:id="@+id/buttonMainUtilities"
+                android:id="@+id/buttonMainPlayback"
                 android:layout_weight="1"
                 android:layout_width="match_parent"
                 android:layout_height="0dp"
-                android:text="@string/button_utilities"
+                android:text="@string/button_playback"
+                android:textSize="24sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonMainSettings"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_settings"
                 android:textSize="24sp" />
 
         </LinearLayout>
@@ -67,22 +75,21 @@
                 android:textSize="24sp" />
 
             <com.app.simostools.SwitchButton
-                android:id="@+id/buttonMainSettings"
+                android:id="@+id/buttonMainUtilities"
                 android:layout_weight="1"
                 android:layout_width="match_parent"
                 android:layout_height="0dp"
-                android:text="@string/button_settings"
+                android:text="@string/button_utilities"
                 android:textSize="24sp" />
 
-        </LinearLayout>
-
-        <com.app.simostools.SwitchButton
-            android:id="@+id/buttonMainExit"
-            android:layout_marginVertical="64dp"
-            android:layout_width="64dp"
-            android:layout_height="match_parent"
-            android:text="@string/button_exit"
-            android:textSize="24sp" />
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonMainExit"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_exit"
+                android:textSize="24sp" />
 
+        </LinearLayout>
     </LinearLayout>
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout-sw600dp-land/fragment_playback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp-land/fragment_playback.xml b/app/src/main/res/layout-sw600dp-land/fragment_playback.xml
new file mode 100644
--- /dev/null	(date 1638153270543)
+++ b/app/src/main/res/layout-sw600dp-land/fragment_playback.xml	(date 1638153270543)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".PlaybackFragment"
+    android:id="@+id/PlaybackLayout">
+
+    <com.app.simostools.SwitchGraph
+        android:id="@+id/switchGraph"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/layoutButtons"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent"/>
+
+    <LinearLayout
+        android:id="@+id/layoutButtons"
+        android:layout_width="256dp"
+        android:layout_height="0dp"
+        android:orientation="horizontal"
+        app:layout_constraintStart_toEndOf="@+id/switchGraph"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent" >
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonSetPIDS"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_set_pids"
+                android:textSize="42sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonSetTabs"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_set_tabs"
+                android:textSize="42sp" />
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonLoad"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_load_csv"
+                android:textSize="42sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonBack"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_back"
+                android:textSize="42sp" />
+
+        </LinearLayout>
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout-land/fragment_playback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-land/fragment_playback.xml b/app/src/main/res/layout-land/fragment_playback.xml
new file mode 100644
--- /dev/null	(date 1638137981377)
+++ b/app/src/main/res/layout-land/fragment_playback.xml	(date 1638137981377)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".PlaybackFragment"
+    android:id="@+id/PlaybackLayout">
+
+    <com.app.simostools.SwitchGraph
+        android:id="@+id/switchGraph"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/layoutButtons"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent"/>
+
+    <LinearLayout
+        android:id="@+id/layoutButtons"
+        android:layout_width="128dp"
+        android:layout_height="0dp"
+        android:orientation="horizontal"
+        app:layout_constraintStart_toEndOf="@+id/switchGraph"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent" >
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonSetPIDS"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_set_pids"
+                android:textSize="24sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonSetTabs"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_set_tabs"
+                android:textSize="24sp" />
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonLoad"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_load_csv"
+                android:textSize="24sp" />
+
+            <com.app.simostools.SwitchButton
+                android:id="@+id/buttonBack"
+                android:layout_weight="1"
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:text="@string/button_back"
+                android:textSize="24sp" />
+
+        </LinearLayout>
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_pid.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_height=\"match_parent\"\r\n    android:layout_width=\"match_parent\"\r\n    android:orientation=\"horizontal\"\r\n    android:id=\"@+id/fragment_pid\"\r\n    android:baselineAligned=\"false\">\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge\"\r\n        android:textSize=\"20sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"175dp\"/>\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge1\"\r\n        android:textSize=\"20sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"175dp\"\r\n        android:visibility=\"invisible\"/>\r\n\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_pid.xml b/app/src/main/res/layout/fragment_pid.xml
--- a/app/src/main/res/layout/fragment_pid.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/layout/fragment_pid.xml	(date 1637982398336)
@@ -9,14 +9,14 @@
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge"
-        android:textSize="20sp"
+        android:textSize="30sp"
         android:layout_weight="1"
         android:layout_width="0dp"
         android:layout_height="175dp"/>
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge1"
-        android:textSize="20sp"
+        android:textSize="30sp"
         android:layout_weight="1"
         android:layout_width="0dp"
         android:layout_height="175dp"
Index: app/src/main/java/com/app/simostools/BTService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.app.*\r\nimport android.bluetooth.*\r\nimport android.bluetooth.BluetoothGatt.CONNECTION_PRIORITY_HIGH\r\nimport android.bluetooth.le.ScanCallback\r\nimport android.bluetooth.le.ScanFilter\r\nimport android.bluetooth.le.ScanResult\r\nimport android.bluetooth.le.ScanSettings\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Handler\r\nimport android.os.IBinder\r\nimport android.os.Looper\r\nimport android.os.ParcelUuid\r\nimport android.widget.Toast\r\nimport java.util.*\r\nimport java.util.concurrent.ConcurrentLinkedQueue\r\nimport java.util.concurrent.Semaphore\r\n\r\n// Header we expect to receive on BLE packets\r\nclass BLEHeader {\r\n    var hdID: Int = BLE_HEADER_ID\r\n    var cmdFlags: Int = 0\r\n    var rxID: Int = BLE_HEADER_RX\r\n    var txID: Int = BLE_HEADER_TX\r\n    var cmdSize: Int = 0\r\n    var tickCount: Int = 0\r\n\r\n    fun isValid(): Boolean {\r\n        return hdID == BLE_HEADER_ID\r\n    }\r\n\r\n    fun toByteArray(): ByteArray {\r\n        val bArray = ByteArray(8)\r\n        bArray[0] = (hdID and 0xFF).toByte()\r\n        bArray[1] = (cmdFlags and 0xFF).toByte()\r\n        bArray[2] = (rxID and 0xFF).toByte()\r\n        bArray[3] = ((rxID and 0xFF00) shr 8).toByte()\r\n        bArray[4] = (txID and 0xFF).toByte()\r\n        bArray[5] = ((txID and 0xFF00) shr 8).toByte()\r\n        bArray[6] = (cmdSize and 0xFF).toByte()\r\n        bArray[7] = ((cmdSize and 0xFF00) shr 8).toByte()\r\n\r\n        return bArray\r\n    }\r\n\r\n    fun fromByteArray(bArray: ByteArray) {\r\n        hdID = bArray[0] and 0xFF\r\n        cmdFlags = bArray[1] and 0xFF\r\n        rxID = ((bArray[3] and 0xFF) shl 8) + (bArray[2] and 0xFF)\r\n        txID = ((bArray[5] and 0xFF) shl 8) + (bArray[4] and 0xFF)\r\n        cmdSize = ((bArray[7] and 0xFF) shl 8) + (bArray[6] and 0xFF)\r\n        tickCount = ((rxID  and 0xFFFF) shl 16) + (txID  and 0xFFFF)\r\n    }\r\n\r\n    fun size(): Int {\r\n        return 8\r\n    }\r\n\r\n    fun size_partial(): Int {\r\n        return 2\r\n    }\r\n}\r\n\r\nclass BTService: Service() {\r\n    //constants\r\n    val TAG = \"BTService\"\r\n\r\n    // Member fields\r\n    private var mScanning: Boolean                              = false\r\n    private var mConnectionState: BLEConnectionState            = BLEConnectionState.NONE\r\n    private val mWriteSemaphore: Semaphore                      = Semaphore(1)\r\n    private val mReadQueue: ConcurrentLinkedQueue<ByteArray>    = ConcurrentLinkedQueue<ByteArray>()\r\n    private val mWriteQueue: ConcurrentLinkedQueue<ByteArray>   = ConcurrentLinkedQueue<ByteArray>()\r\n    private var mBluetoothGatt: BluetoothGatt?                  = null\r\n    private var mBluetoothDevice: BluetoothDevice?              = null\r\n    private var mConnectionThread: ConnectionThread?            = null\r\n    private var mLogWriteState: Boolean                         = false\r\n    private var mScanningTimer: Timer?                          = null\r\n    private var mMTUSize: Int                                   = 23\r\n    private var mFinished: Boolean                              = false\r\n    private var mStarted: Boolean                               = false\r\n\r\n    //Gatt additional properties\r\n    private fun BluetoothGattCharacteristic.isReadable(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_READ)\r\n    private fun BluetoothGattCharacteristic.isWritable(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_WRITE)\r\n    private fun BluetoothGattCharacteristic.isWritableWithoutResponse(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE)\r\n    private fun BluetoothGattCharacteristic.isIndicatable(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_INDICATE)\r\n    private fun BluetoothGattCharacteristic.isNotifiable(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_NOTIFY)\r\n    private fun BluetoothGattCharacteristic.containsProperty(property: Int): Boolean = properties and property != 0\r\n\r\n    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {\r\n        super.onStartCommand(intent, flags, startId)\r\n\r\n        if(!mFinished) {\r\n            when (intent.action) {\r\n                BTServiceTask.STOP_SERVICE.toString()       -> doStopService(startId)\r\n                BTServiceTask.START_SERVICE.toString()      -> doStartService()\r\n                BTServiceTask.REQ_STATUS.toString()         -> sendStatus()\r\n                BTServiceTask.DO_CONNECT.toString()         -> doConnect()\r\n                BTServiceTask.DO_DISCONNECT.toString()      -> doDisconnect()\r\n                BTServiceTask.DO_START_LOG.toString()       -> mConnectionThread?.setTaskState(UDSTask.LOGGING)\r\n                BTServiceTask.DO_START_FLASH.toString()     -> mConnectionThread?.setTaskState(UDSTask.FLASHING)\r\n                BTServiceTask.DO_GET_INFO.toString()        -> mConnectionThread?.setTaskState(UDSTask.INFO)\r\n                BTServiceTask.DO_CLEAR_DTC.toString()       -> mConnectionThread?.setTaskState(UDSTask.DTC_CLEAR)\r\n                BTServiceTask.DO_GET_DTC.toString()         -> mConnectionThread?.setTaskState(UDSTask.DTC_GET)\r\n                BTServiceTask.DO_SET_ADAPTER.toString()     -> mConnectionThread?.setTaskState(UDSTask.SET_ADAPTER)\r\n                BTServiceTask.DO_STOP_TASK.toString()       -> mConnectionThread?.setTaskState(UDSTask.NONE)\r\n                BTServiceTask.FLASH_CONFIRMED.toString()    -> confirmFlashProceed()\r\n                BTServiceTask.FLASH_CANCELED.toString()     -> cancelFlash()\r\n            }\r\n        }\r\n\r\n        return if(mFinished) {\r\n            START_NOT_STICKY\r\n        } else {\r\n            // If we get killed, after returning from here, restart\r\n            START_STICKY\r\n        }\r\n    }\r\n\r\n    override fun onBind(intent: Intent): IBinder? {\r\n        // We don't provide binding, so return null\r\n        return null\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        Toast.makeText(this, \"${getString(R.string.app_name)} Done\", Toast.LENGTH_SHORT).show()\r\n        doDisconnect()\r\n        super.onDestroy()\r\n    }\r\n\r\n    private val mScanCallback = object : ScanCallback() {\r\n        val TAG = \"mScanCallback\"\r\n\r\n        override fun onScanResult(callbackType: Int, result: ScanResult) {\r\n            super.onScanResult(callbackType, result)\r\n            result.device?.let { device ->\r\n                val name = device.name?: \"\"\r\n                DebugLog.i(TAG, \"Found BLE device $name\")\r\n\r\n                if (mBluetoothDevice == null && name.contentEquals(ConfigSettings.ADAPTER_NAME.value.toString())) {\r\n                    mBluetoothDevice = device\r\n\r\n                    stopScanning()\r\n\r\n                    DebugLog.i(TAG, \"Initiating connection to $name\")\r\n                    device.connectGatt(applicationContext, false, mGattCallback, 2)\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun onScanFailed(errorCode: Int) {\r\n            super.onScanFailed(errorCode)\r\n            DebugLog.w(TAG, \"onScanFailed: code $errorCode\")\r\n        }\r\n    }\r\n\r\n    private val mGattCallback = object : BluetoothGattCallback() {\r\n        val TAG = \"BTGATTCallback\"\r\n\r\n        override fun onConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {\r\n            super.onConnectionStateChange(gatt, status, newState)\r\n\r\n            //get device name\r\n            val deviceName = gatt.device.name\r\n\r\n            //If we are connected to the wrong device close and return\r\n            if(mBluetoothDevice != gatt.device) {\r\n                DebugLog.w(TAG, \"Connection made to wrong device, connection closed: $deviceName\")\r\n                gatt.safeClose()\r\n                return\r\n            }\r\n\r\n            if (status == BluetoothGatt.GATT_SUCCESS) {\r\n                if (newState == BluetoothProfile.STATE_CONNECTED) {\r\n                    DebugLog.i(TAG, \"Successfully connected to $deviceName\")\r\n\r\n                    try {\r\n                        //made connection, store our gatt\r\n                        mBluetoothGatt = gatt\r\n\r\n                        //discover gatt table\r\n                        Handler(Looper.getMainLooper()).post {\r\n                            gatt.discoverServices()\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        DebugLog.e(TAG, \"Exception while requesting to discover services: \", e)\r\n                        doDisconnect()\r\n                    }\r\n                } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {\r\n                    DebugLog.i(TAG, \"Successfully disconnected from $deviceName\")\r\n\r\n                    //disable the read notification\r\n                    disableNotifications(gatt.getService(BLE_SERVICE_UUID).getCharacteristic(BLE_DATA_RX_UUID))\r\n\r\n                    //If gatt doesn't match ours make sure we close it\r\n                    if(gatt != mBluetoothGatt) {\r\n                        gatt.safeClose()\r\n                    }\r\n\r\n                    //Do a full disconnect\r\n                    doDisconnect()\r\n                }\r\n            } else {\r\n                DebugLog.i(TAG, \"Error $status encountered for $deviceName! Disconnecting...\")\r\n\r\n                //If gatt doesn't match ours make sure we close it\r\n                if(gatt != mBluetoothGatt) {\r\n                    gatt.safeClose()\r\n                }\r\n\r\n                //Set new connection error state\r\n                val bleState = BLEConnectionState.ERROR\r\n                bleState.errorMessage = status.toString()\r\n\r\n                //Do a full disconnect\r\n                doDisconnect(bleState)\r\n            }\r\n        }\r\n\r\n        override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {\r\n            super.onServicesDiscovered(gatt, status)\r\n\r\n            //If gatt doesn't match ours make sure we close it\r\n            if(gatt != mBluetoothGatt) {\r\n                gatt.safeClose()\r\n                return\r\n            }\r\n\r\n            //If success request MTU\r\n            if(status == BluetoothGatt.GATT_SUCCESS) {\r\n                //Request new MTU\r\n                with(gatt) {\r\n                    DebugLog.i(TAG, \"Discovered ${services.size} services for ${device.name}\")\r\n\r\n                    printGattTable()\r\n                    try {\r\n                        requestMtu(BLE_GATT_MTU_SIZE)\r\n                    } catch (e: Exception) {\r\n                        DebugLog.e(TAG,\"Exception while discovering services:\", e)\r\n                        doDisconnect()\r\n                    }\r\n                }\r\n            } else {\r\n                DebugLog.w(TAG, \"Failed to discover services for ${gatt.device.name}\")\r\n\r\n                //Set new connection error state\r\n                val bleState = BLEConnectionState.ERROR\r\n                bleState.errorMessage = status.toString()\r\n\r\n                //Do a full disconnect\r\n                doDisconnect(bleState)\r\n            }\r\n        }\r\n\r\n        override fun onMtuChanged(gatt: BluetoothGatt, mtu: Int, status: Int) {\r\n            super.onMtuChanged(gatt, mtu, status)\r\n\r\n            DebugLog.d(TAG, \"ATT MTU changed to $mtu, success: ${status == BluetoothGatt.GATT_SUCCESS}\")\r\n\r\n            //get device name\r\n            val deviceName = gatt.device.name\r\n            if(status == BluetoothGatt.GATT_SUCCESS) {\r\n                //Make sure we are on the right connection\r\n                if(gatt != mBluetoothGatt) {\r\n                    DebugLog.i(TAG, \"Gatt does not match mBluetoothGatt, closing connection to $deviceName\")\r\n\r\n                    gatt.safeClose()\r\n                    return\r\n                }\r\n\r\n                //Store MTU Size\r\n                mMTUSize = mtu\r\n\r\n                //Set new connection state\r\n                setConnectionState(BLEConnectionState.CONNECTED)\r\n                try {\r\n                    gatt.requestConnectionPriority(CONNECTION_PRIORITY_HIGH)\r\n                    enableNotifications(gatt.getService(BLE_SERVICE_UUID)!!.getCharacteristic(BLE_DATA_RX_UUID))\r\n                } catch (e: Exception) {\r\n                    DebugLog.e(TAG,\"Exception enabling ble notifications.\", e)\r\n                    doDisconnect()\r\n                }\r\n            } else {\r\n                //If gatt doesn't match ours make sure we close it\r\n                if(gatt != mBluetoothGatt) {\r\n                    gatt.safeClose()\r\n                }\r\n\r\n                //Set new connection error state\r\n                val newState = BLEConnectionState.ERROR\r\n                newState.errorMessage = status.toString()\r\n\r\n                //Do a full disconnect\r\n                doDisconnect(newState)\r\n            }\r\n        }\r\n\r\n        override fun onDescriptorWrite(gatt: BluetoothGatt?, descriptor: BluetoothGattDescriptor?, status: Int) {\r\n            super.onDescriptorWrite(gatt, descriptor, status)\r\n            when (status) {\r\n                BluetoothGatt.GATT_SUCCESS -> {\r\n                    DebugLog.d(\"onDescWrite\", \"success ${descriptor.toString()}\")\r\n                }\r\n                else -> {\r\n                    DebugLog.w(\"onDescWrite\", \"failed ${descriptor.toString()}\")\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun onCharacteristicRead(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic, status: Int) {\r\n            super.onCharacteristicRead(gatt, characteristic, status)\r\n            with(characteristic) {\r\n                when (status) {\r\n                    BluetoothGatt.GATT_SUCCESS -> {\r\n                        DebugLog.d(TAG, \"Read characteristic $uuid | length: ${value.count()}\")\r\n                    }\r\n                    BluetoothGatt.GATT_READ_NOT_PERMITTED -> {\r\n                        DebugLog.w(TAG, \"Read not permitted for $uuid!\")\r\n                    }\r\n                    else -> {\r\n                        DebugLog.w(TAG, \"Characteristic read failed for $uuid, error: $status\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun onCharacteristicWrite(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic, status: Int) {\r\n            super.onCharacteristicWrite(gatt, characteristic, status)\r\n            with(characteristic) {\r\n                when (status) {\r\n                    BluetoothGatt.GATT_SUCCESS -> {\r\n                        DebugLog.d(\"BluetoothGattCallback\", \"Wrote to characteristic $uuid | length: ${value.count()}\")\r\n                    }\r\n                    BluetoothGatt.GATT_INVALID_ATTRIBUTE_LENGTH -> {\r\n                        DebugLog.w(\"BluetoothGattCallback\", \"Write exceeded connection ATT MTU!\")\r\n                    }\r\n                    BluetoothGatt.GATT_WRITE_NOT_PERMITTED -> {\r\n                        DebugLog.w(\"BluetoothGattCallback\", \"Write not permitted for $uuid!\")\r\n                    }\r\n                    else -> {\r\n                        DebugLog.w(\"BluetoothGattCallback\", \"Characteristic write failed for $uuid, error: $status\")\r\n                    }\r\n                }\r\n            }\r\n            mWriteSemaphore.release()\r\n        }\r\n\r\n        override fun onCharacteristicChanged(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic) {\r\n            super.onCharacteristicChanged(gatt, characteristic)\r\n            with(characteristic) {\r\n                DebugLog.d(\"BluetoothGattCallback\", \"Read from characteristic $uuid | length: ${value.count()}\")\r\n\r\n                //parse packet and check for multiple responses\r\n                val bleHeader = BLEHeader()\r\n                while(value.count() > 0) {\r\n                    bleHeader.fromByteArray(value)\r\n                    value = if(bleHeader.cmdSize+8 <= value.count()) {\r\n                        mReadQueue.add(value.copyOfRange(0, bleHeader.cmdSize + 8))\r\n                        value.copyOfRange(bleHeader.cmdSize + 8, value.count())\r\n                    } else {\r\n                        byteArrayOf()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun BluetoothGatt.safeClose() {\r\n        //get device name\r\n        val deviceName = this.device.name\r\n\r\n        DebugLog.i(TAG, \"Closing connection to $deviceName\")\r\n\r\n        try {\r\n            this.close()\r\n        } catch(e: Exception){\r\n            DebugLog.e(TAG, \"Exception while closing connection to $deviceName\", e)\r\n        }\r\n    }\r\n\r\n    private fun BluetoothGatt.printGattTable() {\r\n        if (services.isEmpty()) {\r\n            DebugLog.w(\"printGattTable\", \"No service and characteristic available, call discoverServices() first?\")\r\n            return\r\n        }\r\n        services.forEach { service ->\r\n            val characteristicsTable = service.characteristics.joinToString(separator = \"\\n|--\", prefix = \"|--\") {\r\n                it.uuid.toString()\r\n            }\r\n            DebugLog.d(\"printGattTable\", \"\\nService ${service.uuid}\\nCharacteristics:\\n$characteristicsTable\")\r\n        }\r\n    }\r\n\r\n    private fun writeDescriptor(descriptor: BluetoothGattDescriptor, payload: ByteArray) {\r\n        mBluetoothGatt?.let { gatt ->\r\n            descriptor.value = payload\r\n            gatt.writeDescriptor(descriptor)\r\n        } ?: error(\"Not connected to a BLE device!\")\r\n    }\r\n\r\n    private fun enableNotifications(characteristic: BluetoothGattCharacteristic) {\r\n        val payload = when {\r\n            characteristic.isIndicatable() -> BluetoothGattDescriptor.ENABLE_INDICATION_VALUE\r\n            characteristic.isNotifiable() -> BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE\r\n            else -> {\r\n                DebugLog.w(\"ConnectionManager\", \"${characteristic.uuid} doesn't support notifications/indications\")\r\n                return\r\n            }\r\n        }\r\n\r\n        characteristic.getDescriptor(BLE_CCCD_UUID)?.let { cccDescriptor ->\r\n            if (mBluetoothGatt?.setCharacteristicNotification(characteristic, true) == false) {\r\n                DebugLog.w(\"ConnectionManager\", \"setCharacteristicNotification failed for ${characteristic.uuid}\")\r\n                return\r\n            }\r\n            writeDescriptor(cccDescriptor, payload)\r\n        } ?: DebugLog.w(\"ConnectionManager\", \"${characteristic.uuid} doesn't contain the CCC descriptor!\")\r\n    }\r\n\r\n    private fun disableNotifications(characteristic: BluetoothGattCharacteristic) {\r\n        if (!characteristic.isNotifiable() && !characteristic.isIndicatable()) {\r\n            DebugLog.w(\"ConnectionManager\", \"${characteristic.uuid} doesn't support indications/notifications\")\r\n            return\r\n        }\r\n\r\n        characteristic.getDescriptor(BLE_CCCD_UUID)?.let { cccDescriptor ->\r\n            if (mBluetoothGatt?.setCharacteristicNotification(characteristic, false) == false) {\r\n                DebugLog.w(\"ConnectionManager\", \"setCharacteristicNotification failed for ${characteristic.uuid}\")\r\n                return\r\n            }\r\n            writeDescriptor(cccDescriptor, BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE)\r\n        } ?: DebugLog.w(\"ConnectionManager\", \"${characteristic.uuid} doesn't contain the CCC descriptor!\")\r\n    }\r\n\r\n    @Synchronized\r\n    private fun stopScanning() {\r\n        if(mScanning) {\r\n            //Disable scan timer\r\n            mScanningTimer?.cancel()\r\n            mScanningTimer?.purge()\r\n            mScanningTimer = null\r\n\r\n            DebugLog.i(TAG, \"Stop Scanning\")\r\n            (getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager).adapter.bluetoothLeScanner.stopScan(mScanCallback)\r\n            mScanning = false\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doStopService(startId: Int) {\r\n        mFinished = true\r\n        doDisconnect()\r\n        LogFile.close()\r\n        stopForeground(true)\r\n        stopSelf(startId)\r\n    }\r\n\r\n    @Synchronized\r\n    private fun confirmFlashProceed(){\r\n        UDSFlasher.setFlashConfirmed(true)\r\n    }\r\n\r\n    @Synchronized\r\n    private fun cancelFlash(){\r\n        UDSFlasher.cancelFlash()\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doStartService() {\r\n        if(!mStarted) {\r\n            mStarted = true\r\n            val serviceChannel = NotificationChannel(\r\n                CHANNEL_ID,\r\n                CHANNEL_NAME,\r\n                NotificationManager.IMPORTANCE_DEFAULT\r\n            )\r\n            val manager = getSystemService(NotificationManager::class.java)\r\n            manager.createNotificationChannel(serviceChannel)\r\n\r\n            val notification: Notification = Notification.Builder(this, CHANNEL_ID)\r\n                .setContentTitle(getText(R.string.app_name))\r\n                .setContentText(getText(R.string.app_name))\r\n                .setSmallIcon(R.drawable.simostools)\r\n                .build()\r\n\r\n            // Notification ID cannot be 0.\r\n            startForeground(1, notification)\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doConnect() {\r\n        doDisconnect()\r\n\r\n        DebugLog.i(TAG, \"Searching for BLE device.\")\r\n\r\n        val filter = listOf(\r\n            ScanFilter.Builder().setServiceUuid(ParcelUuid.fromString(BLE_SERVICE_UUID.toString()))\r\n                .build()\r\n        )\r\n\r\n        //Disable current scan timer\r\n        mScanningTimer?.cancel()\r\n        mScanningTimer?.purge()\r\n        mScanningTimer = null\r\n\r\n        //start scanning timer\r\n        mScanningTimer = Timer()\r\n        val task = object : TimerTask() {\r\n            override fun run() {\r\n                doTimeout()\r\n            }\r\n        }\r\n        mScanningTimer?.schedule(task, BLE_SCAN_PERIOD)\r\n\r\n        //Set new connection status\r\n        setConnectionState(BLEConnectionState.CONNECTING)\r\n\r\n        //Start scanning for BLE devices\r\n        val settings = ScanSettings.Builder().build()\r\n        (getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager).adapter.bluetoothLeScanner.startScan(filter, settings, mScanCallback)\r\n        mScanning = true\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doDisconnect(newState: BLEConnectionState = BLEConnectionState.NONE) {\r\n        stopScanning()\r\n        closeConnectionThread()\r\n\r\n        //get device name\r\n        mBluetoothDevice?.let {\r\n            DebugLog.i(TAG, \"Disconnecting from BLE device: ${it.name}\")\r\n            mBluetoothDevice = null\r\n        }\r\n\r\n        //if we have gatt, close it\r\n        mBluetoothGatt?.let {\r\n            it.safeClose()\r\n            mBluetoothGatt = null\r\n        }\r\n\r\n        if(!mFinished) {\r\n            //Set new connection status\r\n            setConnectionState(newState)\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doTimeout() {\r\n        stopScanning()\r\n\r\n        if(mConnectionState != BLEConnectionState.CONNECTED) {\r\n            //Set new connection status\r\n            setConnectionState(BLEConnectionState.NONE)\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun closeConnectionThread() {\r\n        mConnectionThread?.cancel()\r\n        mConnectionThread = null\r\n    }\r\n\r\n    @Synchronized\r\n    private fun createConnectionThread() {\r\n        closeConnectionThread()\r\n\r\n        mConnectionThread = ConnectionThread()\r\n        mConnectionThread?.let { thread ->\r\n            thread.priority = BLE_THREAD_PRIORITY\r\n            thread.start()\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun setConnectionState(newState: BLEConnectionState)\r\n    {\r\n        if(mConnectionState == newState)\r\n            return\r\n\r\n        when(newState) {\r\n            BLEConnectionState.ERROR -> closeConnectionThread()\r\n            BLEConnectionState.NONE -> closeConnectionThread()\r\n            BLEConnectionState.CONNECTING -> {}\r\n            BLEConnectionState.CONNECTED -> createConnectionThread()\r\n        }\r\n\r\n        //Broadcast a new message\r\n        mConnectionState = newState\r\n        mConnectionState.errorMessage = newState.errorMessage\r\n        mConnectionState.deviceName = mBluetoothGatt?.device?.name ?: \"\"\r\n        val intentMessage = Intent(GUIMessage.STATE_CONNECTION.toString())\r\n        intentMessage.putExtra(GUIMessage.STATE_CONNECTION.toString(), mConnectionState)\r\n        sendBroadcast(intentMessage)\r\n    }\r\n\r\n    @Synchronized\r\n    private fun sendStatus() {\r\n        if(mConnectionThread != null) {\r\n            mConnectionThread?.sendTaskState()\r\n        } else {\r\n            val intentMessage = Intent(GUIMessage.STATE_CONNECTION.toString())\r\n            intentMessage.putExtra(GUIMessage.STATE_CONNECTION.toString(), mConnectionState)\r\n            sendBroadcast(intentMessage)\r\n        }\r\n    }\r\n\r\n    private inner class ConnectionThread: Thread() {\r\n        private var mTask: UDSTask              = UDSTask.NONE\r\n        private var mTaskNext: UDSTask          = UDSTask.NONE\r\n        private var mTaskTick: Int              = 0\r\n        private var mTaskTime: Long             = 0\r\n        private var mTaskTimeNext: Long         = 0\r\n        private var mTaskTimeOut: Long          = 0\r\n        private var mTaskNextBroadcast: Long    = 0\r\n        private var mPasswordAccepted: Boolean  = true\r\n\r\n        init {\r\n            setTaskState(UDSTask.NONE)\r\n            DebugLog.d(TAG, \"create ConnectionThread\")\r\n        }\r\n\r\n        override fun run() {\r\n            DebugLog.d(TAG, \"BEGIN mConnectionThread\")\r\n\r\n            //sendPassword(\"\")\r\n\r\n            while (mConnectionState == BLEConnectionState.CONNECTED && !currentThread().isInterrupted) {\r\n                //See if there are any packets waiting to be sent\r\n                if (!mWriteQueue.isEmpty() && mWriteSemaphore.tryAcquire()) {\r\n                    try {\r\n                        val buff = mWriteQueue.poll()\r\n                        buff?.let {\r\n                            DebugLog.c(TAG, buff,true)\r\n\r\n                            mBluetoothGatt?.let { gatt ->\r\n                                val txChar = gatt.getService(BLE_SERVICE_UUID)!!.getCharacteristic(BLE_DATA_TX_UUID)\r\n                                val writeType = when {\r\n                                    txChar.isWritable() -> BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT\r\n                                    txChar.isWritableWithoutResponse() -> BluetoothGattCharacteristic.WRITE_TYPE_NO_RESPONSE\r\n                                    else -> error(\"Characteristic ${txChar.uuid} cannot be written to\")\r\n                                }\r\n                                txChar.writeType = writeType\r\n                                txChar.value = it\r\n                                gatt.writeCharacteristic(txChar)\r\n                            } ?: error(\"Not connected to a BLE device!\")\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        DebugLog.e(TAG, \"Exception during write\", e)\r\n                        mWriteSemaphore.release()\r\n                        cancel()\r\n                        break\r\n                    }\r\n                }\r\n\r\n                //See if there are any packets waiting to be read\r\n                if (!mReadQueue.isEmpty()) {\r\n                    try {\r\n                        val buff = mReadQueue.poll()\r\n                        buff?.let {\r\n                            DebugLog.c(TAG, buff, false)\r\n\r\n                            //Process packet\r\n                            processPacket(buff)\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        DebugLog.e(TAG, \"Exception during read\", e)\r\n                        cancel()\r\n                        break\r\n                    }\r\n                }\r\n\r\n                //Ready for next task?\r\n                if(mTaskNext != UDSTask.NONE) {\r\n                    if(mTaskTimeNext < System.currentTimeMillis()) {\r\n                        DebugLog.i(TAG, \"Task finished.\")\r\n                        startNextTask()\r\n                    } else if(mTaskTimeOut < System.currentTimeMillis()) {\r\n                        //Write debug log\r\n                        DebugLog.w(TAG, \"Task failed to finish.\")\r\n                        startNextTask()\r\n                    }\r\n                } else {\r\n                    //Have we sat idle waiting without receiving a packet?\r\n                    if(mTaskTimeNext < System.currentTimeMillis()) {\r\n                        DebugLog.d(TAG, \"Task timeout.\")\r\n\r\n                        //Process packet\r\n                        processPacket(null)\r\n                    }\r\n                }\r\n            }\r\n            DebugLog.d(TAG, \"END mConnectionThread\")\r\n        }\r\n\r\n        fun cancel() {\r\n            interrupt()\r\n        }\r\n\r\n        @Synchronized\r\n        fun setTaskState(newTask: UDSTask)\r\n        {\r\n            //if we are not connected abort\r\n            if (mConnectionState != BLEConnectionState.CONNECTED) {\r\n                mTask = UDSTask.NONE\r\n                return\r\n            }\r\n\r\n            if(newTask == mTask)\r\n                return\r\n\r\n            //queue up next task and set start time\r\n            mTaskTimeNext   = System.currentTimeMillis() + TASK_END_DELAY\r\n            mTaskTimeOut    = System.currentTimeMillis() + TASK_END_TIMEOUT\r\n            mTaskNext       = newTask\r\n\r\n            //If we are doing something call for a stop\r\n            if(mTask != UDSTask.NONE) {\r\n                stopTask()\r\n            }\r\n        }\r\n\r\n        @Synchronized\r\n        fun sendTaskState() {\r\n            if(mTask == UDSTask.LOGGING && UDSLogger.isEnabled()) {\r\n                val intentMessage = Intent(GUIMessage.WRITE_LOG.toString())\r\n                intentMessage.putExtra(GUIMessage.WRITE_LOG.toString(), UDSLogger.isEnabled())\r\n                sendBroadcast(intentMessage)\r\n            } else {\r\n                val intentMessage = Intent(GUIMessage.STATE_TASK.toString())\r\n                intentMessage.putExtra(GUIMessage.STATE_TASK.toString(), mTask)\r\n                sendBroadcast(intentMessage)\r\n            }\r\n        }\r\n\r\n        private fun writePacket(buff: ByteArray?) {\r\n            buff?.let {\r\n                try {\r\n                    //Store buff to local variable\r\n                    var buffer = it\r\n\r\n                    //Make sure we have a header\r\n                    if (buffer.count() < 8) {\r\n                        DebugLog.w(TAG, \"Unable to write empty packet.\")\r\n                        return\r\n                    }\r\n\r\n                    //Do we need to split the packet?\r\n                    var packetSize = mMTUSize - 3\r\n                    if(buffer.count() > packetSize) {\r\n                        //Set split packet flag\r\n                        it[1] = ((it[1].toInt() or BLECommandFlags.SPLIT_PK.value) and 0xFF).toByte()\r\n\r\n                        //Add the first split packet\r\n                        mWriteQueue.add(buffer.copyOfRange(0, packetSize))\r\n                        buffer = buffer.copyOfRange(packetSize, buffer.count())\r\n\r\n                        //Remaining packets\r\n                        packetSize -= BLEHeader().size_partial()\r\n                        var packetCount = 1\r\n                        while (buffer.count() > 0) {\r\n                            val dataSize = if(buffer.count() > packetSize) packetSize\r\n                                            else buffer.count()\r\n                            mWriteQueue.add(byteArrayOf(BLE_HEADER_PT.toByte(), (packetCount++ and 0xFF).toByte()) + buffer.copyOfRange(0, dataSize))\r\n                            buffer = buffer.copyOfRange(dataSize, buffer.count())\r\n                        }\r\n                    } else {\r\n                        //Packet fits MTU\r\n                        mWriteQueue.add(buffer)\r\n                    }\r\n                } catch(e: Exception) {\r\n                    DebugLog.e(TAG, \"Exception while writing packet.\", e)\r\n                }\r\n            } ?: DebugLog.w(TAG, \"Unable to write null packet.\")\r\n        }\r\n\r\n        private fun startNextTask() {\r\n            mTaskTimeNext   = System.currentTimeMillis() + TASK_BUMP_DELAY\r\n            mTask           = mTaskNext\r\n            mTaskNext       = UDSTask.NONE\r\n            mTaskTick       = 0\r\n            mTaskTime       = System.currentTimeMillis()\r\n\r\n            //Write debug log\r\n            DebugLog.i(TAG, \"Task started: $mTask\")\r\n\r\n            sendTaskState()\r\n\r\n            when (mTask) {\r\n                UDSTask.LOGGING     -> startTaskLogging()\r\n                UDSTask.FLASHING    -> startTaskFlashing()\r\n                UDSTask.INFO        -> startTaskGetInfo()\r\n                UDSTask.DTC_GET     -> startTaskGetDTC()\r\n                UDSTask.DTC_CLEAR   -> startTaskClearDTC()\r\n                UDSTask.SET_ADAPTER -> startTaskSetAdapter()\r\n                UDSTask.NONE        -> {}\r\n            }\r\n        }\r\n\r\n        private fun stopTask() {\r\n            //Write debug log\r\n            DebugLog.i(TAG, \"Task stopped: $mTask\")\r\n\r\n            //set task to none\r\n            mTask = UDSTask.NONE\r\n\r\n            sendTaskState()\r\n\r\n            //Set LED to green\r\n            setBridgeLED(0,0x80, 0)\r\n\r\n            //clear current persist messages\r\n            clearBridgePersist()\r\n        }\r\n\r\n        private fun startTaskLogging(){\r\n            //set connection settings\r\n            try {\r\n                setBridgePersistDelay(1000 / ConfigSettings.LOGGING_RATE.toInt())\r\n                setBridgePersistQDelay(ConfigSettings.Q_CORRECTION.toInt())\r\n            } catch (e: Exception) {\r\n                DebugLog.e(TAG, \"Invalid logging rates.\", e)\r\n            }\r\n\r\n            val intentMessage = Intent(GUIMessage.FLASH_INFO_CLEAR.toString())\r\n            sendBroadcast(intentMessage)\r\n\r\n            //Write first frame\r\n            writePacket(UDSLogger.startTask(0))\r\n        }\r\n\r\n        private fun startTaskFlashing(){\r\n            DebugLog.d(TAG,\"Setting stmin to 350\")\r\n            setBridgeSTMIN(350)\r\n            writePacket(UDSFlasher.startTask(0))\r\n        }\r\n\r\n        private fun startTaskGetInfo(){\r\n            writePacket(UDSInfo.startTask(0))\r\n        }\r\n\r\n        private fun startTaskClearDTC() {\r\n            writePacket(UDSdtc.startTask(0, true))\r\n        }\r\n\r\n        private fun startTaskGetDTC() {\r\n            writePacket(UDSdtc.startTask(0, false))\r\n        }\r\n\r\n        private fun startTaskSetAdapter() {\r\n            changeGAPName(ConfigSettings.ADAPTER_NAME.value.toString())\r\n            setTaskState(UDSTask.NONE)\r\n        }\r\n\r\n        private fun processPacket(buff: ByteArray?) {\r\n            if(mPasswordAccepted) {\r\n                when (mTask) {\r\n                    UDSTask.NONE        -> processPacketNone(buff)\r\n                    UDSTask.LOGGING     -> processPacketLogging(buff)\r\n                    UDSTask.FLASHING    -> processPacketFlashing(buff)\r\n                    UDSTask.INFO        -> processPacketGetInfo(buff)\r\n                    UDSTask.DTC_GET     -> processPacketGetDTC(buff)\r\n                    UDSTask.DTC_CLEAR   -> processPacketClearDTC(buff)\r\n                    UDSTask.SET_ADAPTER -> processPacketSetAdapter(buff)\r\n                }\r\n\r\n                //Only increment task packet count when buffer isn't empty\r\n                buff?.let {\r\n                    if (it.count() >= BLEHeader().size()) {\r\n                        mTaskTick++\r\n                    }\r\n                }\r\n\r\n                //check if we are ready to switch to a new task\r\n                if (mTaskNext != UDSTask.NONE) {\r\n                    mTaskTimeNext = System.currentTimeMillis() + TASK_END_DELAY\r\n\r\n                    //Write debug log\r\n                    DebugLog.d(TAG, \"Packet extended task start delay.\")\r\n                } else {\r\n                    mTaskTimeNext = System.currentTimeMillis() + TASK_BUMP_DELAY\r\n                }\r\n            } else {\r\n                buff?.let {\r\n                    if (it.count() == BLEHeader().size() + 1) {\r\n                        val bleHeader = BLEHeader()\r\n                        bleHeader.fromByteArray(it)\r\n                        if(bleHeader.isValid() && it[8] == 0xFF.toByte()) {\r\n                            DebugLog.i(TAG, \"Password accepted.\")\r\n                            mPasswordAccepted = true\r\n                        } else {\r\n                            DebugLog.i(TAG, \"Password failed.\")\r\n                            doDisconnect()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private fun processPacketNone(buff: ByteArray?) {\r\n            buff?.let {\r\n                if(buff.count() > 8) {\r\n                    //Broadcast a new message\r\n                    val intentMessage = Intent(GUIMessage.READ.toString())\r\n                    intentMessage.putExtra(\r\n                        GUIMessage.READ.toString(),\r\n                        buff.copyOfRange(8, buff.size)\r\n                    )\r\n                    sendBroadcast(intentMessage)\r\n                }\r\n            }\r\n        }\r\n\r\n        private fun processPacketLogging(buff: ByteArray?) {\r\n            buff?.let {\r\n                //Process frame\r\n                val result = UDSLogger.processPacket(mTaskTick, buff, applicationContext)\r\n\r\n                //Are we still sending initial frames?\r\n                if (mTaskTick < UDSLogger.frameCount() - 1) {\r\n                    //If we failed init abort\r\n                    if (result != UDSReturn.OK) {\r\n                        DebugLog.w(TAG, \"Unable to initialize logging, UDS Error: $result\")\r\n                        setTaskState(UDSTask.NONE)\r\n                    } else { //else continue init\r\n                        writePacket(UDSLogger.startTask(mTaskTick+1))\r\n                    }\r\n                } else { //We are receiving data\r\n                    if (result != UDSReturn.OK) {\r\n                        DebugLog.w(TAG, \"Logging data error , UDS Error: $result\")\r\n                        setTaskState(UDSTask.NONE)\r\n                    } else {\r\n                        //Broadcast new PID data\r\n                        if (System.currentTimeMillis() > mTaskNextBroadcast) {\r\n                            val intentMessage = Intent(GUIMessage.READ_LOG.toString())\r\n                            intentMessage.putExtra(\"readCount\", mTaskTick)\r\n                            intentMessage.putExtra(\"readTime\", System.currentTimeMillis() - mTaskTime)\r\n                            intentMessage.putExtra(\"readResult\", result)\r\n                            sendBroadcast(intentMessage)\r\n                            try {\r\n                                mTaskNextBroadcast = System.currentTimeMillis() + (1000 / (ConfigSettings.DISPLAY_RATE.toInt())).toLong()\r\n                            } catch (e: Exception) {\r\n                                mTaskNextBroadcast = System.currentTimeMillis() + 100\r\n                                DebugLog.d(TAG, \"Invalid display rate\")\r\n                            }\r\n                        }\r\n\r\n                        //If we changed logging write states broadcast a new message and set LED color\r\n                        if (UDSLogger.isEnabled() != mLogWriteState) {\r\n                            //Broadcast new message\r\n                            val intentMessage = Intent(GUIMessage.WRITE_LOG.toString())\r\n                            intentMessage.putExtra(\r\n                                GUIMessage.WRITE_LOG.toString(),\r\n                                UDSLogger.isEnabled()\r\n                            )\r\n                            sendBroadcast(intentMessage)\r\n\r\n                            if (UDSLogger.isEnabled()) {\r\n                                setBridgeLED(0, 0, 0x80)\r\n                            } else {\r\n                                setBridgeLED(0, 0x80, 0)\r\n                            }\r\n\r\n                            //Update current write state\r\n                            mLogWriteState = UDSLogger.isEnabled()\r\n                        }\r\n                    }\r\n                }\r\n            } ?: if(UDSLogger.processPacket(mTaskTick, buff, applicationContext) != UDSReturn.OK) {\r\n                DebugLog.w(TAG, \"Logging timeout.\")\r\n                setTaskState(UDSTask.NONE)\r\n            }\r\n        }\r\n\r\n        private fun processPacketFlashing(buff: ByteArray?) {\r\n\r\n            if(buff != null) {\r\n                val response = buff.copyOfRange(8, buff.size)\r\n\r\n                val flashStatus = UDSFlasher.processFlashCAL(mTaskTick, response)\r\n\r\n                if (UDSFlasher.getInfo() != \"\") {\r\n                    DebugLog.d(\r\n                        TAG,\r\n                        \"Received status message from UDSFlash: ${UDSFlasher.getInfo()}\"\r\n                    )\r\n                    val intentMessage = Intent(GUIMessage.FLASH_INFO.toString())\r\n                    intentMessage.putExtra(GUIMessage.FLASH_INFO.toString(), UDSFlasher.getInfo())\r\n                    sendBroadcast(intentMessage)\r\n                }\r\n\r\n                val progress = UDSFlasher.getProgress()\r\n\r\n                if(progress > 0){\r\n                    DebugLog.d(TAG, \"Total Progress: $progress\")\r\n\r\n                    val intentMessage = Intent(GUIMessage.FLASH_PROGRESS_SHOW.toString())\r\n                    intentMessage.putExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), true)\r\n                    sendBroadcast(intentMessage)\r\n\r\n                    val intentMessage2 = Intent(GUIMessage.FLASH_PROGRESS.toString())\r\n                    intentMessage2.putExtra(GUIMessage.FLASH_PROGRESS.toString(), progress)\r\n                    sendBroadcast(intentMessage2)\r\n                }\r\n                else{\r\n                    val intentMessage = Intent(GUIMessage.FLASH_PROGRESS_SHOW.toString())\r\n                    intentMessage.putExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), false)\r\n                    sendBroadcast(intentMessage)\r\n                }\r\n\r\n\r\n                when (flashStatus) {\r\n                    UDSReturn.FLASH_CONFIRM -> {\r\n                        val intentMessage = Intent(GUIMessage.FLASH_CONFIRM.toString())\r\n                        sendBroadcast(intentMessage)\r\n                    }\r\n                    UDSReturn.OK -> {\r\n                        val intentMessage = Intent(GUIMessage.FLASH_BUTTON_RESET.toString())\r\n                        sendBroadcast(intentMessage)\r\n                    }\r\n                    UDSReturn.ABORTED -> {\r\n                        val intentMessage = Intent(GUIMessage.FLASH_BUTTON_RESET.toString())\r\n                        sendBroadcast(intentMessage)\r\n                    }\r\n                    UDSReturn.FLASH_COMPLETE -> {\r\n\r\n                    }\r\n                    UDSReturn.CLEAR_DTC_REQUEST -> {\r\n\r\n                            //Send clear request\r\n                            val bleHeader = BLEHeader()\r\n                            bleHeader.rxID = 0x7E8\r\n                            bleHeader.txID = 0x700\r\n                            bleHeader.cmdSize = 1\r\n                            bleHeader.cmdFlags = BLECommandFlags.PER_CLEAR.value\r\n                            val dataBytes = byteArrayOf(0x04.toByte())\r\n                            val buf = bleHeader.toByteArray() + dataBytes\r\n                            mWriteQueue.add(buf)\r\n\r\n                    }\r\n                    UDSReturn.COMMAND_QUEUED -> {\r\n                        var queuedCommand = buildBLEFrame(UDSFlasher.getCommand())\r\n                        //DebugLog.d(TAG,\"UDSFlash, built BLE frame: \" + queuedCommand.toHex())\r\n\r\n                        writePacket(queuedCommand)\r\n\r\n                    }\r\n                    else -> {\r\n                        DebugLog.d(TAG, \"Received ${flashStatus} from UDSFlash\")\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                if(UDSFlasher.getSubtask() == FLASH_ECU_CAL_SUBTASK.FLASH_BLOCK || UDSFlasher.getSubtask() == FLASH_ECU_CAL_SUBTASK.PATCH_BLOCK){\r\n                    //Do NOTHING\r\n                }\r\n                else {\r\n                    DebugLog.d(TAG, \"Sending tester present.... Flasher is idle\")\r\n                    mWriteQueue.add(buildBLEFrame(UDS_COMMAND.TESTER_PRESENT.bytes))\r\n                }\r\n            }\r\n        }\r\n\r\n        private fun processPacketGetInfo(buff: ByteArray?) {\r\n            buff?.let {\r\n                if (UDSInfo.processPacket(mTaskTick, buff) == UDSReturn.OK) {\r\n                    val intentMessage = Intent(GUIMessage.UTILITY_INFO.toString())\r\n                    intentMessage.putExtra(GUIMessage.UTILITY_INFO.toString(), UDSInfo.getInfo())\r\n                    sendBroadcast(intentMessage)\r\n\r\n                    if (mTaskTick < UDSInfo.getStartCount() - 1) {\r\n                        writePacket(UDSInfo.startTask(mTaskTick + 1))\r\n                    } else {\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                } else {\r\n                    setTaskState(UDSTask.NONE)\r\n                }\r\n            }?: if(UDSInfo.processPacket(mTaskTick, buff) != UDSReturn.OK) {\r\n                DebugLog.w(TAG, \"GetInfo timeout.\")\r\n                setTaskState(UDSTask.NONE)\r\n            }\r\n        }\r\n\r\n        private fun processPacketGetDTC(buff: ByteArray?) {\r\n            buff?.let {\r\n                when (UDSdtc.processPacket(mTaskTick, buff, false)) {\r\n                    UDSReturn.OK -> {\r\n                        if (mTaskTick < UDSdtc.getStartCount(false) - 1) {\r\n                            writePacket(UDSdtc.startTask(mTaskTick + 1, false))\r\n                        }\r\n                    }\r\n                    UDSReturn.COMPLETE -> {\r\n                        val intentMessage = Intent(GUIMessage.UTILITY_INFO.toString())\r\n                        intentMessage.putExtra(GUIMessage.UTILITY_INFO.toString(), UDSdtc.getInfo())\r\n                        sendBroadcast(intentMessage)\r\n\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                    else -> {\r\n                        val intentMessage = Intent(GUIMessage.UTILITY_INFO.toString())\r\n                        intentMessage.putExtra(GUIMessage.UTILITY_INFO.toString(), UDSdtc.getInfo())\r\n                        sendBroadcast(intentMessage)\r\n\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                }\r\n            }?: if(UDSdtc.processPacket(mTaskTick, buff, false) != UDSReturn.OK) {\r\n                DebugLog.w(TAG, \"GetDTC timeout.\")\r\n                setTaskState(UDSTask.NONE)\r\n            }\r\n        }\r\n\r\n        private fun processPacketClearDTC(buff: ByteArray?) {\r\n            buff?.let {\r\n                if (UDSdtc.processPacket(mTaskTick, buff, true) == UDSReturn.OK) {\r\n                    val intentMessage = Intent(GUIMessage.UTILITY_INFO.toString())\r\n                    intentMessage.putExtra(GUIMessage.UTILITY_INFO.toString(), UDSdtc.getInfo())\r\n                    sendBroadcast(intentMessage)\r\n\r\n                    if (mTaskTick < UDSdtc.getStartCount(true) - 1) {\r\n                        writePacket(UDSdtc.startTask(mTaskTick + 1, true))\r\n                    } else {\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                } else {\r\n                    setTaskState(UDSTask.NONE)\r\n                }\r\n            }?: if(UDSdtc.processPacket(mTaskTick, buff, true) != UDSReturn.OK) {\r\n                DebugLog.w(TAG, \"ClearDTC timeout.\")\r\n                setTaskState(UDSTask.NONE)\r\n            }\r\n        }\r\n\r\n        private fun processPacketSetAdapter(buff: ByteArray?) {\r\n            buff?.let {\r\n\r\n            }\r\n        }\r\n\r\n        private fun clearBridgePersist() {\r\n            //Disable persist mode\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 0\r\n            bleHeader.cmdFlags = BLECommandFlags.PER_CLEAR.value\r\n            writePacket(bleHeader.toByteArray())\r\n        }\r\n\r\n        private fun setBridgePersistDelay(delay: Int) {\r\n            //Set persist delay\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 2\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.PERSIST_DELAY.value\r\n            val dataBytes = byteArrayOf((delay and 0xFF).toByte(), ((delay and 0xFF00) shr 8).toByte())\r\n            val buff = bleHeader.toByteArray() + dataBytes\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun setBridgePersistQDelay(delay: Int) {\r\n            //Set persist Q delay\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 2\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.PERSIST_Q_DELAY.value\r\n            val dataBytes = byteArrayOf((delay and 0xFF).toByte(), ((delay and 0xFF00) shr 8).toByte())\r\n            val buff = bleHeader.toByteArray() + dataBytes\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun setBridgeLED(r: Int, g: Int, b: Int) {\r\n            //Set LED color\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 4\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.LED_COLOR.value\r\n            val dataBytes = byteArrayOf((b and 0xFF).toByte(), (r and 0xFF).toByte(), (g and 0xFF).toByte(), 0x00.toByte())\r\n            val buff = bleHeader.toByteArray() + dataBytes\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun setBridgeSTMIN(amount: Int) {\r\n            //set STMIN\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 2\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.ISOTP_STMIN.value\r\n            val buff = bleHeader.toByteArray() + byteArrayOf((amount shr 0).toByte(), (amount shr 8).toByte())\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun buildBLEFrame(udsCommand: ByteArray): ByteArray{\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = udsCommand.size\r\n            bleHeader.cmdFlags = BLECommandFlags.PER_CLEAR.value\r\n\r\n            return bleHeader.toByteArray() + udsCommand\r\n        }\r\n\r\n        private fun setPassword(password: String) {\r\n            //set password\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = password.length\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.PASSWORD.value\r\n            val buff = bleHeader.toByteArray() + password.toByteArray()\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun sendPassword(password: String) {\r\n            //send password\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = password.length\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLECommandFlags.SET_GET.value or BLESettings.PASSWORD.value\r\n            val buff = bleHeader.toByteArray() + password.toByteArray()\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun changeGAPName(gap: String) {\r\n            //set GAP name\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = gap.length\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.GAP.value\r\n            val buff = bleHeader.toByteArray() + gap.toByteArray()\r\n            writePacket(buff)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/BTService.kt b/app/src/main/java/com/app/simostools/BTService.kt
--- a/app/src/main/java/com/app/simostools/BTService.kt	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/java/com/app/simostools/BTService.kt	(date 1638134053968)
@@ -14,9 +14,18 @@
 import android.os.Looper
 import android.os.ParcelUuid
 import android.widget.Toast
+import androidx.core.os.HandlerCompat.postDelayed
 import java.util.*
 import java.util.concurrent.ConcurrentLinkedQueue
 import java.util.concurrent.Semaphore
+import android.R.attr.name
+import android.R.attr.name
+
+
+
+
+
+
 
 // Header we expect to receive on BLE packets
 class BLEHeader {
@@ -126,11 +135,15 @@
     }
 
     override fun onDestroy() {
-        Toast.makeText(this, "${getString(R.string.app_name)} Done", Toast.LENGTH_SHORT).show()
-        doDisconnect()
+        //Toast.makeText(this, "${getString(R.string.app_name)} Done", Toast.LENGTH_SHORT).show()
         super.onDestroy()
     }
 
+    override fun onCreate() {
+        super.onCreate()
+        //Toast.makeText(this, "${getString(R.string.app_name)} Started", Toast.LENGTH_SHORT).show()
+    }
+
     private val mScanCallback = object : ScanCallback() {
         val TAG = "mScanCallback"
 
@@ -443,7 +456,7 @@
             mScanningTimer?.purge()
             mScanningTimer = null
 
-            DebugLog.i(TAG, "Stop Scanning")
+            DebugLog.i(TAG, "Stop Scanning.")
             (getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager).adapter.bluetoothLeScanner.stopScan(mScanCallback)
             mScanning = false
         }
@@ -453,9 +466,21 @@
     private fun doStopService(startId: Int) {
         mFinished = true
         doDisconnect()
-        LogFile.close()
+        UDSLogger.clear()
+        PIDs.clear()
+        UDSFlasher.clear()
+        DebugLog.i(TAG, "Shutting down down service.")
+        DebugLog.close()
+        /*val handler = Handler()
+        val r: Runnable = object : Runnable {
+            override fun run() {
+                stopForeground(true)
+                stopSelfResult(startId)
+            }
+        }
+        handler.postDelayed(r, 1000)*/
         stopForeground(true)
-        stopSelf(startId)
+        stopSelfResult(startId)
     }
 
     @Synchronized
Index: app/src/main/res/layout-sw600dp/fragment_pid.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_height=\"match_parent\"\r\n    android:layout_width=\"match_parent\"\r\n    android:orientation=\"horizontal\"\r\n    android:id=\"@+id/fragment_pid\"\r\n    android:baselineAligned=\"false\">\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge\"\r\n        android:textSize=\"32sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"250dp\"/>\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge1\"\r\n        android:textSize=\"32sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"250dp\"\r\n        android:visibility=\"invisible\"/>\r\n\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp/fragment_pid.xml b/app/src/main/res/layout-sw600dp/fragment_pid.xml
--- a/app/src/main/res/layout-sw600dp/fragment_pid.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/layout-sw600dp/fragment_pid.xml	(date 1637982398329)
@@ -9,14 +9,14 @@
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge"
-        android:textSize="32sp"
+        android:textSize="42sp"
         android:layout_weight="1"
         android:layout_width="0dp"
         android:layout_height="250dp"/>
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge1"
-        android:textSize="32sp"
+        android:textSize="42sp"
         android:layout_weight="1"
         android:layout_width="0dp"
         android:layout_height="250dp"
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources xmlns:xliff=\"urn:oasis:names:tc:xliff:document:1.2\">\r\n    <string name=\"app_name\">Simos Tools</string>\r\n    <!-- Strings used for nav -->\r\n    <string name=\"nav_main\">Main</string>\r\n    <string name=\"nav_flashing\">Flashing</string>\r\n    <string name=\"nav_utilities\">Utilities</string>\r\n    <string name=\"nav_logging\">Logging</string>\r\n    <string name=\"nav_settings\">Settings</string>\r\n    <string name=\"nav_color\">Color</string>\r\n    <!-- Strings used for tabs -->\r\n    <string name=\"tab_tools\">Tools</string>\r\n    <string name=\"tab_settings\">Settings</string>\r\n    <string name=\"tab_logging\">Logging</string>\r\n    <!-- Strings used for buttons -->\r\n    <string name=\"switch_enable\">Enable</string>\r\n    <!-- Strings used for buttons -->\r\n    <string name=\"button_exit\">Exit</string>\r\n    <string name=\"button_flashing\">Flashing</string>\r\n    <string name=\"button_logging\">Logging</string>\r\n    <string name=\"button_tune_info\">Tune Info</string>\r\n    <string name=\"button_flash_cal\">Flash CAL</string>\r\n    <string name=\"button_flash_full\">Flash Full</string>\r\n    <string name=\"button_get_info\">Get Info</string>\r\n    <string name=\"button_dtc_get\">DTC Get</string>\r\n    <string name=\"button_dtc_clear\">DTC Clear</string>\r\n    <string name=\"button_back\">Back</string>\r\n    <string name=\"button_stop\">Stop</string>\r\n    <string name=\"button_start\">Start</string>\r\n    <string name=\"button_reset\">Reset</string>\r\n    <string name=\"button_save\">Save</string>\r\n    <string name=\"button_set\">Set</string>\r\n    <string name=\"button_utilities\">Utilities</string>\r\n    <string name=\"button_cancel\">Cancel</string>\r\n    <string name=\"button_settings\">Settings</string>\r\n    <string name=\"button_set_adapter_name\">Set adapter name</string>\r\n    <string name=\"button_set_bg_normal_color\">Set background normal color</string>\r\n    <string name=\"button_set_bg_warning_color\">Set background warning color</string>\r\n    <string name=\"button_set_text_color\">Set text color</string>\r\n    <string name=\"button_set_gauge_normal_color\">Set gauge normal color</string>\r\n    <string name=\"button_set_gauge_warn_color\">Set gauge warn color</string>\r\n    <string name=\"button_set_gauge_bg_color\">Set gauge background color</string>\r\n    <string name=\"button_set_gauge_value_color\">Set gauge value color</string>\r\n    <string name=\"button_set_st_error\">Set state error color</string>\r\n    <string name=\"button_set_st_none\">Set state none color</string>\r\n    <string name=\"button_set_st_connecting\">Set state connecting color</string>\r\n    <string name=\"button_set_st_connected\">Set state connected color</string>\r\n    <string name=\"button_set_st_logging\">Set state logging color</string>\r\n    <string name=\"button_set_st_writing\">Set state writing color</string>\r\n    <string name=\"button_set_bt_text\">Set button text color</string>\r\n    <string name=\"button_set_bt_rim\">Set button rim color</string>\r\n    <string name=\"button_set_bt_bg\">Set button back ground color</string>\r\n    <!-- Strings used for checkboxes -->\r\n    <string name=\"check_settings_draw_minmax\">Draw min/max?</string>\r\n    <string name=\"check_settings_draw_grad\">Draw graduations?</string>\r\n    <string name=\"check_settings_invert_cruise\">Invert cruise button?</string>\r\n    <string name=\"check_settings_screen_on\">Keep screen on?</string>\r\n    <string name=\"check_settings_calculate_hp\">Calculate HP?</string>\r\n    <string name=\"check_settings_use_accelerometers\">Use Accelerometers? (3E)</string>\r\n    <string name=\"check_settings_always_portrait\">Always use portrait view?</string>\r\n    <string name=\"check_settings_auto_log\">Start logging when idle?</string>\r\n    <!-- Strings used for radio buttons -->\r\n    <string name=\"radio_settings_display_bar_h\">Bar horizontal</string>\r\n    <string name=\"radio_settings_display_bar_v\">Bar vertical</string>\r\n    <string name=\"radio_settings_display_bb\">Basic</string>\r\n    <string name=\"radio_settings_display_round\">Round</string>\r\n    <string name=\"radio_settings_mode_22\">22</string>\r\n    <string name=\"radio_settings_mode_3E\">3E</string>\r\n    <string name=\"radio_settings_mode_downloads\">Downloads</string>\r\n    <string name=\"radio_settings_mode_documents\">Documents</string>\r\n    <string name=\"radio_settings_mode_application\">Application</string>\r\n    <!-- Strings used for textview -->\r\n    <string name=\"textview_settings_curb_weight\">Curb weight: <xliff:g id=\"rate\">%1$d</xliff:g>kg</string>\r\n    <string name=\"textview_settings_driver_weight\">Driver weight: <xliff:g id=\"rate\">%1$d</xliff:g>kg</string>\r\n    <string name=\"textview_settings_tire_diameter\">Tire diameter: <xliff:g id=\"rate\">%1$f</xliff:g>m</string>\r\n    <string name=\"textview_settings_drag_coefficient\">Drag coefficient: <xliff:g id=\"rate\">%1$f</xliff:g></string>\r\n    <string name=\"textview_settings_gear_1\">Gear 1 ratio:</string>\r\n    <string name=\"textview_settings_gear_2\">Gear 2 ratio:</string>\r\n    <string name=\"textview_settings_gear_3\">Gear 3 ratio:</string>\r\n    <string name=\"textview_settings_gear_4\">Gear 4 ratio:</string>\r\n    <string name=\"textview_settings_gear_5\">Gear 5 ratio:</string>\r\n    <string name=\"textview_settings_gear_6\">Gear 6 ratio:</string>\r\n    <string name=\"textview_settings_gear_7\">Gear 7 ratio:</string>\r\n    <string name=\"textview_settings_gear_final\">Final gear ratio:</string>\r\n    <string name=\"textview_settings_display_rate\">Max display rate: <xliff:g id=\"rate\">%1$d</xliff:g>hz</string>\r\n    <string name=\"textview_settings_logging_rate\">Max logging rate: <xliff:g id=\"rate\">%1$d</xliff:g>hz</string>\r\n    <string name=\"textview_settings_q_correction\">Q correction: <xliff:g id=\"rate\">%1$d</xliff:g>ms</string>\r\n    <string name=\"textview_settings_mode\">Logging mode:</string>\r\n    <string name=\"textview_settings_display\">Gauges:</string>\r\n    <string name=\"textview_settings_list\">Use PID list:</string>\r\n    <string name=\"textview_settings_directory\">Output directory:</string>\r\n    <string name=\"textview_settings_misc_options\">Misc options:</string>\r\n    <string name=\"textview_settings_log_name\">Log name:</string>\r\n    <string name=\"textview_settings_color_options\">Color options:</string>\r\n    <string name=\"textview_settings_hp_options\">Calculated HP options:</string>\r\n    <string name=\"textview_settings_import_csv\">Import PID CSV:</string>\r\n    <string name=\"textview_settings_import_22_csv\">22 CSV</string>\r\n    <string name=\"textview_settings_import_3E_csv\">3E CSV</string>\r\n    <string name=\"textview_settings_import_22_csv_reset\">Reset 22 CSV</string>\r\n    <string name=\"textview_settings_import_3E_csv_reset\">Reset 3E CSV</string>\r\n    <string name=\"textview_settings_adapter_name\">Adapter name:</string>\r\n    <string name=\"textview_settings_pid_up\">↑</string>\r\n    <string name=\"textview_settings_pid_down\">↓</string>\r\n    <string name=\"textview_settings_pid_name\">Name:</string>\r\n    <string name=\"textview_settings_pid_unit\">Unit:</string>\r\n    <string name=\"textview_settings_pid_address\">Address:</string>\r\n    <string name=\"textview_settings_pid_length\">Length:</string>\r\n    <string name=\"textview_settings_pid_gauge_min\">Gauge Min:</string>\r\n    <string name=\"textview_settings_pid_gauge_max\">Gauge Max:</string>\r\n    <string name=\"textview_settings_pid_warn_min\">Warn Min:</string>\r\n    <string name=\"textview_settings_pid_warn_max\">Warn Max:</string>\r\n    <string name=\"textview_settings_pid_equation\">Equation:</string>\r\n    <string name=\"textview_settings_pid_smoothing\">Smoothing:</string>\r\n    <string name=\"textview_settings_pid_assign_to\">Assign To:</string>\r\n    <string name=\"textview_settings_pid_format\">Format:</string>\r\n    <string name=\"textview_settings_pid_enabled\">Enabled</string>\r\n    <string name=\"textview_settings_pid_tabs\">Tabs:</string>\r\n    <string name=\"textview_color_r\">R: <xliff:g id=\"value\">%1$d</xliff:g></string>\r\n    <string name=\"textview_color_g\">G: <xliff:g id=\"value\">%1$d</xliff:g></string>\r\n    <string name=\"textview_color_b\">B: <xliff:g id=\"value\">%1$d</xliff:g></string>\r\n    <string name=\"textview_fps\">fps: <xliff:g id=\"value\">%1$s</xliff:g></string>\r\n    <string name=\"textview_fps_null\">fps: 0</string>\r\n    <!-- Strings used for edit text -->\r\n    <string name=\"edittext_pid_name\"><xliff:g id=\"value\">%1$s</xliff:g></string>\r\n    <!-- Strings used for misc -->\r\n    <string name=\"bt_status\">Bluetooth: </string>\r\n    <string name=\"bt_connect\">Connect</string>\r\n    <string name=\"bt_disconnect\">Disconnect</string>\r\n    <string name=\"bt_device_name\">\"BT uart\"</string>\r\n    <string name=\"ble_not_supported\">BLE not supported.</string>\r\n    <string name=\"error_bluetooth_not_supported\">BLE not supported error.</string>\r\n    <string name=\"title_connecting\">connecting...</string>\r\n    <string name=\"title_not_connected\">not connected</string>\r\n    <string name=\"title_error\">error <xliff:g id=\"error_name\">%1$s</xliff:g></string>\r\n    <string name=\"title_connected_to\">connected to <xliff:g id=\"device_name\">%1$s</xliff:g></string>\r\n    <!-- Strings used for filenames -->\r\n    <string name=\"filename_pid_csv\">PIDList<xliff:g id=\"log_mode\">%1$s</xliff:g>.csv</string>\r\n    <string name=\"filename_debug_log\">debug.log</string>\r\n    <string name=\"filename_config\">config.cfg</string>\r\n\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/values/strings.xml	(date 1638137981373)
@@ -7,6 +7,9 @@
     <string name="nav_logging">Logging</string>
     <string name="nav_settings">Settings</string>
     <string name="nav_color">Color</string>
+    <string name="nav_playback">Playback</string>
+    <string name="nav_playback_enabled">Playback Enabled</string>
+    <string name="nav_playback_tabs">Playback Tabs</string>
     <!-- Strings used for tabs -->
     <string name="tab_tools">Tools</string>
     <string name="tab_settings">Settings</string>
@@ -14,6 +17,12 @@
     <!-- Strings used for buttons -->
     <string name="switch_enable">Enable</string>
     <!-- Strings used for buttons -->
+    <string name="button_playback">Log Viewer</string>
+    <string name="button_none">None</string>
+    <string name="button_ok">Ok</string>
+    <string name="button_set_pids">Set PIDS</string>
+    <string name="button_set_tabs">Set Tabs</string>
+    <string name="button_load_csv">Load CSV</string>
     <string name="button_exit">Exit</string>
     <string name="button_flashing">Flashing</string>
     <string name="button_logging">Logging</string>
Index: app/src/main/res/layout-land/fragment_pid.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_height=\"match_parent\"\r\n    android:layout_width=\"match_parent\"\r\n    android:orientation=\"horizontal\"\r\n    android:id=\"@+id/fragment_pid\"\r\n    android:baselineAligned=\"false\">\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge\"\r\n        android:textSize=\"20sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"140dp\"/>\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge1\"\r\n        android:textSize=\"20sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"140dp\"\r\n        android:visibility=\"invisible\"/>\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge2\"\r\n        android:textSize=\"20sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"140dp\"\r\n        android:visibility=\"invisible\"/>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-land/fragment_pid.xml b/app/src/main/res/layout-land/fragment_pid.xml
--- a/app/src/main/res/layout-land/fragment_pid.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/layout-land/fragment_pid.xml	(date 1637982398332)
@@ -9,14 +9,14 @@
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge"
-        android:textSize="20sp"
+        android:textSize="30sp"
         android:layout_weight="1"
         android:layout_width="0dp"
         android:layout_height="140dp"/>
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge1"
-        android:textSize="20sp"
+        android:textSize="30sp"
         android:layout_weight="1"
         android:layout_width="0dp"
         android:layout_height="140dp"
@@ -24,7 +24,7 @@
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge2"
-        android:textSize="20sp"
+        android:textSize="30sp"
         android:layout_weight="1"
         android:layout_width="0dp"
         android:layout_height="140dp"
Index: app/src/main/res/layout-sw600dp-land/fragment_pid.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_height=\"match_parent\"\r\n    android:layout_width=\"match_parent\"\r\n    android:orientation=\"horizontal\"\r\n    android:id=\"@+id/fragment_pid\"\r\n    android:baselineAligned=\"false\">\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge\"\r\n        android:textSize=\"32sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"240dp\"/>\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge1\"\r\n        android:textSize=\"32sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"240dp\"\r\n        android:visibility=\"invisible\"/>\r\n\r\n    <com.app.simostools.SwitchGauge\r\n        android:id=\"@+id/pid_gauge2\"\r\n        android:textSize=\"32sp\"\r\n        android:layout_weight=\"1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"240dp\"\r\n        android:visibility=\"invisible\"/>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp-land/fragment_pid.xml b/app/src/main/res/layout-sw600dp-land/fragment_pid.xml
--- a/app/src/main/res/layout-sw600dp-land/fragment_pid.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/layout-sw600dp-land/fragment_pid.xml	(date 1637982720309)
@@ -9,25 +9,25 @@
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge"
-        android:textSize="32sp"
+        android:textSize="42sp"
         android:layout_weight="1"
         android:layout_width="0dp"
-        android:layout_height="240dp"/>
+        android:layout_height="260dp"/>
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge1"
-        android:textSize="32sp"
+        android:textSize="42sp"
         android:layout_weight="1"
         android:layout_width="0dp"
-        android:layout_height="240dp"
+        android:layout_height="260dp"
         android:visibility="invisible"/>
 
     <com.app.simostools.SwitchGauge
         android:id="@+id/pid_gauge2"
-        android:textSize="32sp"
+        android:textSize="42sp"
         android:layout_weight="1"
         android:layout_width="0dp"
-        android:layout_height="240dp"
+        android:layout_height="260dp"
         android:visibility="invisible"/>
 
 </LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/app/simostools/UDSlog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.Context\r\nimport java.lang.Exception\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport kotlin.math.sqrt\r\n\r\nobject UDSLogger {\r\n    private val TAG                 = \"UDSlog\"\r\n    private var mLastEnabled        = false\r\n    private var mMode               = UDSLoggingMode.MODE_22\r\n    private var mTorquePID          = -1\r\n    private var mEngineRPMPID       = -1\r\n    private var mMS2PID             = -1\r\n    private var mGearPID            = -1\r\n    private var mVelocityPID        = -1\r\n    private var mTireCircumference  = -1f\r\n    private var mFoundMS2PIDS       = false\r\n    private var mFoundTQPIDS        = false\r\n    private var mEnabledArray22     = byteArrayOf()\r\n    private var mEnabledArray3E     = byteArrayOf()\r\n    private var mAddressArray22     = byteArrayOf()\r\n    private var mAddressArray3E     = byteArrayOf()\r\n    private var mTimeoutCounter     = TIME_OUT_LOGGING\r\n    private var mCalculatedTQ       = 0f\r\n    private var mCalculatedHP       = 0f\r\n    private var mLastFrameSize      = -1\r\n    private var mRevision           = \"SimosTools [R1.4:We don't respond to emails]\"\r\n\r\n    fun getTQ(): Float {\r\n        return mCalculatedTQ\r\n    }\r\n\r\n    fun getHP(): Float {\r\n        return mCalculatedHP\r\n    }\r\n\r\n    fun isEnabled(): Boolean {\r\n        return mLastEnabled\r\n    }\r\n\r\n    fun setMode(mode: UDSLoggingMode) {\r\n        mMode = mode\r\n    }\r\n\r\n    fun getMode(): UDSLoggingMode {\r\n        return mMode\r\n    }\r\n\r\n    fun frameCount(): Int {\r\n        return when (mMode) {\r\n            UDSLoggingMode.MODE_22 -> frameCount22()\r\n            UDSLoggingMode.MODE_3E -> frameCount3E()\r\n        }\r\n    }\r\n\r\n    fun startTask(index: Int): ByteArray {\r\n        return when(mMode) {\r\n            UDSLoggingMode.MODE_22 -> buildFrame22(index)\r\n            UDSLoggingMode.MODE_3E -> buildFrame3E(index)\r\n        }\r\n    }\r\n\r\n    fun processPacket(tick: Int, buff: ByteArray?, context: Context): UDSReturn {\r\n        buff?.let {\r\n            resetTimeout()\r\n\r\n            return when (mMode) {\r\n                UDSLoggingMode.MODE_22 -> processFrame22(tick, buff, context)\r\n                UDSLoggingMode.MODE_3E -> processFrame3E(tick, buff, context)\r\n            }\r\n        }\r\n\r\n        return addTimeout()\r\n    }\r\n\r\n    private fun addTimeout(): UDSReturn {\r\n        if(--mTimeoutCounter == 0) {\r\n            return UDSReturn.ERROR_TIME_OUT\r\n        }\r\n\r\n        return UDSReturn.OK\r\n    }\r\n\r\n    private fun resetTimeout() {\r\n        mTimeoutCounter = TIME_OUT_LOGGING\r\n    }\r\n\r\n    private fun isCalcHP(): Boolean {\r\n        if(ConfigSettings.CALCULATE_HP.toBoolean() && (mFoundTQPIDS || mFoundMS2PIDS)) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    private fun calcTQ() {\r\n        PIDs.getList()?.let { list ->\r\n            if (ConfigSettings.CALCULATE_HP.toBoolean()) {\r\n                if (mFoundMS2PIDS && ConfigSettings.USE_MS2.toBoolean()) {\r\n                    try {\r\n                        val gearValue = list[mGearPID]!!.value.toInt()\r\n\r\n                        if (gearValue in 1..7) {\r\n                            val ms2Value = sqrt(list[mMS2PID]!!.value)\r\n                            val velValue = list[mVelocityPID]!!.value\r\n                            val weightValue = ConfigSettings.CURB_WEIGHT.toFloat() * KG_TO_N\r\n                            val ratioValue = sqrt(GearRatios.values()[gearValue - 1].ratio * GearRatios.FINAL.ratio)\r\n                            val dragValue = 1.0 + ((velValue * velValue).toDouble() * ConfigSettings.DRAG_COEFFICIENT.toDouble())\r\n\r\n                            mCalculatedTQ = ((weightValue * ms2Value / ratioValue / mTireCircumference / TQ_CONSTANT).toDouble() * dragValue).toFloat()\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        mCalculatedTQ = 0f\r\n                    }\r\n                } else if (mFoundTQPIDS) {\r\n                    mCalculatedTQ = try {\r\n                        list[mTorquePID]!!.value\r\n                    } catch (e: Exception) {\r\n                        0f\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun calcHP() {\r\n        PIDs.getList()?.let { list ->\r\n            if (ConfigSettings.CALCULATE_HP.toBoolean() && mEngineRPMPID != -1) {\r\n                mCalculatedHP = try {\r\n                    val rpmValue = list[mEngineRPMPID]!!.value\r\n                    mCalculatedTQ * rpmValue / 7127f\r\n                } catch (e: Exception) {\r\n                    0f\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun resetHPPIDS() {\r\n        mFoundTQPIDS = false\r\n        mFoundMS2PIDS = false\r\n        mTorquePID = -1\r\n        mEngineRPMPID = -1\r\n        mMS2PID = -1\r\n        mGearPID = -1\r\n        mVelocityPID = -1\r\n        mTireCircumference = ConfigSettings.TIRE_DIAMETER.toFloat() * 3.14f\r\n    }\r\n\r\n    private fun findHPPIDS() {\r\n        when(mMode) {\r\n            UDSLoggingMode.MODE_22 -> findHPPIDS22()\r\n            UDSLoggingMode.MODE_3E -> findHPPIDS3E()\r\n        }\r\n    }\r\n\r\n    private fun findHPPIDS22() {\r\n        PIDs.list22?.let { list ->\r\n            for (x in 0 until list.count()) {\r\n                //Look for torque PID\r\n                if (list[x]?.address == 0x437C.toLong()) {\r\n                    mTorquePID = x\r\n                }\r\n\r\n                //Look for rpm PID\r\n                if (list[x]?.address == 0xf40C.toLong()) {\r\n                    mEngineRPMPID = x\r\n                }\r\n            }\r\n            //pid we find the PIDs required?\r\n            if (mEngineRPMPID != -1 && mTorquePID != -1)\r\n                mFoundTQPIDS = true\r\n        }\r\n    }\r\n\r\n    private fun findHPPIDS3E() {\r\n        PIDs.list3E?.let { list ->\r\n            for (x in 0 until list.count()) {\r\n                //Look for torque PID\r\n                if (list[x]?.address == 0xd0015344) {\r\n                    mTorquePID = x\r\n                }\r\n                //Look for rpm PID\r\n                if (list[x]?.address == 0xd0012400) {\r\n                    mEngineRPMPID = x\r\n                }\r\n\r\n                //Look for MS2 PID\r\n                if (list[x]?.address == 0xd00141ba) {\r\n                    mMS2PID = x\r\n                }\r\n\r\n                //Look for Gear PID\r\n                if (list[x]?.address == 0xd000f39a) {\r\n                    mGearPID = x\r\n                }\r\n\r\n                //Look for Velocity PID\r\n                if (list[x]?.address == 0xd00155b6) {\r\n                    mVelocityPID = x\r\n                }\r\n            }\r\n        }\r\n        //pid we find the PIDs required?\r\n        if(mEngineRPMPID != -1 && mMS2PID != -1 && mGearPID != -1 && mVelocityPID != -1)\r\n            mFoundMS2PIDS = true\r\n\r\n        if(mEngineRPMPID != -1 && mTorquePID != -1)\r\n            mFoundTQPIDS = true\r\n    }\r\n\r\n    private fun frameCount22(): Int {\r\n        return ((mAddressArray22.count() - 1) / 16) + 1\r\n    }\r\n\r\n    private fun frameCount3E(): Int {\r\n        return (mAddressArray3E.count() / 0x8F) + 2\r\n    }\r\n\r\n    private fun buildEnabledArray(mode: UDSLoggingMode = getMode()): ByteArray {\r\n        PIDs.getList(mode)?.let { list ->\r\n            //build list of addresses that are enabled\r\n            var enabledArray: ByteArray = byteArrayOf()\r\n            for (i in 0 until list.count()) {\r\n                val pid: PIDStruct? = list[i]\r\n                pid?.let {\r\n                    if (it.enabled) {\r\n                        enabledArray += i.toByte()\r\n                    }\r\n                }\r\n            }\r\n\r\n            return enabledArray\r\n        }\r\n\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun buildAddress22(): ByteArray {\r\n        PIDs.list22?.let { list ->\r\n            //build list of addresses that are enabled\r\n            var addressArray: ByteArray = byteArrayOf()\r\n            for (i in 0 until mEnabledArray22.count()) {\r\n                val pid: PIDStruct? = list[mEnabledArray22[i].toInt()]\r\n                pid?.let {\r\n                    if (it.enabled && it.address != UDSLoggingMode.MODE_22.addressMax) {\r\n                        addressArray += it.address.toArray2()\r\n                    }\r\n                }\r\n            }\r\n\r\n            return addressArray\r\n        }\r\n\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun buildAddress3E(): ByteArray {\r\n        PIDs.list3E?.let { list ->\r\n            //build list of addresses that are enabled\r\n            var addressArray: ByteArray = byteArrayOf()\r\n            for (i in 0 until mEnabledArray3E.count()) {\r\n                val pid: PIDStruct? = list[mEnabledArray3E[i].toInt()]\r\n                pid?.let {\r\n                    if (it.enabled && it.address != UDSLoggingMode.MODE_3E.addressMax) {\r\n                        addressArray += (it.length and 0xFF).toByte()\r\n                        addressArray += it.address.toArray4()\r\n                    }\r\n                }\r\n            }\r\n            addressArray += 0\r\n\r\n            return addressArray\r\n        }\r\n\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun buildFrame22(index: Int): ByteArray {\r\n        if(index == 0) {\r\n            mEnabledArray22 = buildEnabledArray()\r\n            mAddressArray22 = buildAddress22()\r\n            resetHPPIDS()\r\n            findHPPIDS()\r\n        }\r\n\r\n        val frameCount = frameCount22()\r\n        if (index in 0 until frameCount) {\r\n            //Build header\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 1\r\n            bleHeader.cmdFlags = when (index) {\r\n                0 -> BLECommandFlags.PER_ADD.value or BLECommandFlags.PER_CLEAR.value\r\n                frameCount - 1 -> BLECommandFlags.PER_ADD.value or BLECommandFlags.PER_ENABLE.value\r\n                else -> BLECommandFlags.PER_ADD.value\r\n            }\r\n\r\n            //add pids to buffer\r\n            val startIndex =\r\n                if (index * 16 > mAddressArray22.count()) mAddressArray22.count()\r\n                else index * 16\r\n            val endIndex =\r\n                if (startIndex + 16 > mAddressArray22.count()) mAddressArray22.count()\r\n                else startIndex + 16\r\n\r\n            val buff = byteArrayOf(0x22.toByte()) + mAddressArray22.copyOfRange(startIndex, endIndex)\r\n            bleHeader.cmdSize = buff.count()\r\n            val writeBuffer = bleHeader.toByteArray() + buff\r\n\r\n            DebugLog.d(TAG, \"Building 22 frame $index with length ${writeBuffer.count()}: ${writeBuffer.toHex()}\")\r\n            return writeBuffer\r\n        }\r\n\r\n        DebugLog.d(TAG, \"Building 22 frame $index does not exist\")\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun buildFrame3E(index: Int): ByteArray {\r\n        if(index == 0) {\r\n            mEnabledArray3E = buildEnabledArray()\r\n            mAddressArray3E = buildAddress3E()\r\n            resetHPPIDS()\r\n            findHPPIDS()\r\n        }\r\n\r\n        //Do we even have any PIDs in the range?  If not send persist message\r\n        if (index * 0x8F >= mAddressArray3E.count()) {\r\n            if(index == frameCount3E() - 1) {\r\n                val bleHeader = BLEHeader()\r\n                bleHeader.cmdSize = 6\r\n                bleHeader.cmdFlags =\r\n                    BLECommandFlags.PER_CLEAR.value or BLECommandFlags.PER_ADD.value or BLECommandFlags.PER_ENABLE.value\r\n\r\n                val writeBuffer: ByteArray = bleHeader.toByteArray() + byteArrayOf(\r\n                    0x3e.toByte(),\r\n                    0x33.toByte(),\r\n                    0xb0.toByte(),\r\n                    0x01.toByte(),\r\n                    0xe7.toByte(),\r\n                    0x00.toByte()\r\n                )\r\n\r\n                mLastFrameSize = -1\r\n                DebugLog.d(TAG, \"Building 3E frame $index with length ${writeBuffer.count()}: ${writeBuffer.toHex()}\")\r\n                return writeBuffer\r\n            }\r\n\r\n            mLastFrameSize = -1\r\n            DebugLog.d(TAG, \"Building 3E frame $index does not exist\")\r\n            return byteArrayOf()\r\n        }\r\n\r\n        //constrain copy range or we will receive an exception\r\n        val endOfArray = if ((1 + index) * 0x8F > mAddressArray3E.count()) {\r\n            mAddressArray3E.count()\r\n        } else {\r\n            (1 + index) * 0x8F\r\n        }\r\n        val selectArray: ByteArray = mAddressArray3E.copyOfRange(index * 0x8F, endOfArray)\r\n        val bleHeader = BLEHeader()\r\n        bleHeader.cmdSize = 8 + selectArray.count()\r\n        bleHeader.cmdFlags = BLECommandFlags.PER_CLEAR.value\r\n\r\n        val memoryOffset = 0xB001E700 + (index * 0x8F)\r\n        val writeBuffer: ByteArray = bleHeader.toByteArray() + byteArrayOf(\r\n            0x3e.toByte(),\r\n            0x32.toByte()\r\n        ) + memoryOffset.toArray4() + selectArray.count().toArray2() + selectArray\r\n\r\n        mLastFrameSize = selectArray.count()\r\n        DebugLog.d(TAG, \"Building 3E frame $index with length ${writeBuffer.count()}:${writeBuffer.toHex()}:$mLastFrameSize\")\r\n        return writeBuffer\r\n    }\r\n\r\n    private fun processFrame22(tick: Int, buff: ByteArray?, context: Context): UDSReturn {\r\n        // if the buffer is null abort\r\n        if (buff == null) {\r\n            return UDSReturn.ERROR_NULL\r\n        }\r\n\r\n        // check to make sure ble header byte matches\r\n        val bleHeader = BLEHeader()\r\n        bleHeader.fromByteArray(buff)\r\n        val bData = buff.copyOfRange(8, buff.size)\r\n        if (!bleHeader.isValid()) {\r\n            return UDSReturn.ERROR_HEADER\r\n        }\r\n\r\n        // does the size of the data match the header?\r\n        if (bData.count() != bleHeader.cmdSize) {\r\n            return UDSReturn.ERROR_CMDSIZE\r\n        }\r\n\r\n        // make sure we received an 'OK' from the ECU\r\n        if (bData[0] != 0x62.toByte()) {\r\n            return UDSReturn.ERROR_RESPONSE\r\n        }\r\n\r\n        //In init state\r\n        if (tick < frameCount22()) {\r\n            return UDSReturn.OK\r\n        }\r\n\r\n        // process the data in the buffer\r\n        var i = 1\r\n        while (i <= bleHeader.cmdSize - 3) {\r\n            val pid: PIDStruct =\r\n                PIDs.getPID(((bData[i++] and 0xFF) shl 8) + (bData[i++] and 0xFF).toLong())\r\n                    ?: return UDSReturn.ERROR_UNKNOWN\r\n            if (pid.length == 1) {\r\n                if (pid.signed) {\r\n                    PIDs.setValue(pid, (bData[i++] and 0xFF).toByte().toFloat())\r\n                } else {\r\n                    PIDs.setValue(pid, (bData[i++] and 0xFF).toFloat())\r\n                }\r\n            } else {\r\n                if (pid.signed) {\r\n                    PIDs.setValue(\r\n                        pid,\r\n                        (((bData[i++] and 0xFF) shl 8) + (bData[i++] and 0xFF)).toShort()\r\n                            .toFloat()\r\n                    )\r\n                } else {\r\n                    PIDs.setValue(\r\n                        pid,\r\n                        (((bData[i++] and 0xFF) shl 8) + (bData[i++] and 0xFF)).toFloat()\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        //Calculate HP and tq PIDS?\r\n        calcTQ()\r\n        calcHP()\r\n\r\n        //Check and process non-addressable PIDS\r\n        PIDs.list22?.let { list ->\r\n            for (x in 0 until mEnabledArray22.count()) {\r\n                //Is this a real address?\r\n                list[x]?.let { pid ->\r\n                    if (pid.address == UDSLoggingMode.MODE_22.addressMax) {\r\n                        PIDs.setValue(pid, 0f)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Update Log once all pids have been updated\r\n        if (tick % frameCount22() == 0) {\r\n            //Update PID data\r\n            PIDs.updateData()\r\n\r\n            //don't log until stream is constant\r\n            if(tick < 50)\r\n                return UDSReturn.OK\r\n\r\n            //Check if we need to write to log\r\n            return writeToLog(bleHeader.tickCount, context)\r\n        }\r\n\r\n        return UDSReturn.OK\r\n    }\r\n\r\n    private fun processFrame3E(tick: Int, buff: ByteArray?, context: Context): UDSReturn {\r\n        PIDs.getList()?.let { list ->\r\n            // if the buffer is null abort\r\n            if (buff == null) {\r\n                return UDSReturn.ERROR_NULL\r\n            }\r\n\r\n            // check to make sure ble header byte matches\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.fromByteArray(buff)\r\n            val bData = buff.copyOfRange(8, buff.size)\r\n            if (!bleHeader.isValid()) {\r\n                return UDSReturn.ERROR_HEADER\r\n            }\r\n\r\n            // does the size of the data match the header?\r\n            if (bData.count() != bleHeader.cmdSize) {\r\n                return UDSReturn.ERROR_CMDSIZE\r\n            }\r\n\r\n            // make sure we received an 'OK' from the ECU\r\n            if (bData.count() < 3 || bData[0] != 0x7e.toByte()) {\r\n                DebugLog.d(TAG, \"ERROR in response from ECU: \" + bData.toHex())\r\n                return UDSReturn.ERROR_RESPONSE\r\n            }\r\n\r\n            // make sure we received an 'OK' from the ECU while initiating\r\n            if(tick < frameCount3E()-1) {\r\n                if(bData[1] != 0x00.toByte() || bData[2] != (mLastFrameSize and 0xFF).toByte())\r\n                    return UDSReturn.ERROR_RESPONSE\r\n\r\n                return UDSReturn.OK\r\n            }\r\n\r\n            //Update PID Values\r\n            var dPos = 1\r\n            for (i in 0 until mEnabledArray3E.count()) {\r\n                val pid = list[mEnabledArray3E[i].toInt()]!!\r\n                try {\r\n                    //Is this a real address?\r\n                    if (pid.address == UDSLoggingMode.MODE_3E.addressMax) {\r\n                        PIDs.setValue(pid, 0f)\r\n                    } else {\r\n                        //make sure we are in range, if not report error\r\n                        if (dPos + pid.length > bData.count()) {\r\n                            return UDSReturn.ERROR_UNKNOWN\r\n                        }\r\n\r\n                        //Build the value in little endian\r\n                        var newValue: Int = bData[dPos + pid.length - 1] and 0xFF\r\n                        for (d in 1 until pid.length) {\r\n                            newValue = newValue shl 8\r\n                            newValue += bData[dPos + pid.length - d - 1] and 0xFF\r\n                        }\r\n                        dPos += pid.length\r\n\r\n                        //set pid values\r\n                        if (pid.signed) {\r\n                            when (pid.length) {\r\n                                1 -> PIDs.setValue(pid, newValue.toByte().toFloat())\r\n                                2 -> PIDs.setValue(pid, newValue.toShort().toFloat())\r\n                                4 -> PIDs.setValue(pid, newValue.toFloat())\r\n                            }\r\n                        } else {\r\n                            when (pid.length) {\r\n                                1 -> PIDs.setValue(pid, newValue.toFloat())\r\n                                2 -> PIDs.setValue(pid, newValue.toFloat())\r\n                                4 -> PIDs.setValue(pid, Float.fromBits(newValue))\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (e: Exception) {\r\n                    return UDSReturn.ERROR_UNKNOWN\r\n                }\r\n            }\r\n\r\n            //Calculate HP and tq PIDS?\r\n            calcTQ()\r\n            calcHP()\r\n\r\n            //Update PID data\r\n            PIDs.updateData()\r\n\r\n            //don't log until stream is constant\r\n            if(tick < 25)\r\n                return UDSReturn.OK\r\n\r\n            //Check if we need to write to log\r\n            return writeToLog(bleHeader.tickCount, context)\r\n        }\r\n\r\n        return UDSReturn.ERROR_NULL\r\n    }\r\n\r\n    private fun writeToLog(tick: Int, context: Context): UDSReturn {\r\n        PIDs.getList()?.let { list ->\r\n            val dEnable = list[list.count() - 1]\r\n            if ((!ConfigSettings.INVERT_CRUISE.toBoolean() && dEnable?.value != 0.0f) ||\r\n                (ConfigSettings.INVERT_CRUISE.toBoolean() && dEnable?.value == 0.0f)\r\n            ) {\r\n                //If we were not enabled before we must open a log to start writing\r\n                if (!mLastEnabled) {\r\n                    val currentDateTime = LocalDateTime.now()\r\n                    LogFile.create(\r\n                        \"${ConfigSettings.LOG_NAME}-${\r\n                            currentDateTime.format(\r\n                                DateTimeFormatter.ofPattern(\"yyyy_MM_dd-HH_mm_ss\")\r\n                            )\r\n                        }.csv\", context\r\n                    )\r\n\r\n                    //Add time its required\r\n                    var strItems: String? = \"Time\"\r\n\r\n                    //Add PIDs including units\r\n                    for (x in 0 until list.count()) {\r\n                        if(x != list.count()-1) strItems += \",${list[x]?.name} (${list[x]?.unit})\"\r\n                            else strItems += \",$mRevision\"\r\n                    }\r\n\r\n                    //Send it\r\n                    LogFile.addLine(strItems)\r\n                }\r\n                mLastEnabled = true\r\n\r\n                //Write new values to log\r\n                var strItems: String? = (tick.toFloat() / 1000.0f).toString()\r\n                for (x in 0 until list.count()) {\r\n                    strItems += \",${list[x]?.value}\"\r\n                }\r\n\r\n                //Send it\r\n                LogFile.addLine(strItems)\r\n            } else {\r\n                if (mLastEnabled) {\r\n                    LogFile.close()\r\n                }\r\n                mLastEnabled = false\r\n            }\r\n\r\n            return UDSReturn.OK\r\n        }\r\n\r\n        return UDSReturn.ERROR_UNKNOWN\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/UDSlog.kt b/app/src/main/java/com/app/simostools/UDSlog.kt
--- a/app/src/main/java/com/app/simostools/UDSlog.kt	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/java/com/app/simostools/UDSlog.kt	(date 1638128806567)
@@ -28,6 +28,14 @@
     private var mLastFrameSize      = -1
     private var mRevision           = "SimosTools [R1.4:We don't respond to emails]"
 
+    fun clear() {
+        LogFile.close()
+        mEnabledArray22 = byteArrayOf()
+        mEnabledArray3E = byteArrayOf()
+        mAddressArray22 = byteArrayOf()
+        mAddressArray3E = byteArrayOf()
+    }
+
     fun getTQ(): Float {
         return mCalculatedTQ
     }
Index: app/src/main/res/navigation/nav_graph_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/nav_graph\"\r\n    app:startDestination=\"@id/MainFragment\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/MainFragment\"\r\n        android:name=\"com.app.simostools.MainFragment\"\r\n        android:label=\"@string/nav_main\"\r\n        tools:layout=\"@layout/fragment_main\">\r\n\r\n        <action\r\n            android:id=\"@+id/action_MainFragment_to_LoggingFragment\"\r\n            app:destination=\"@id/LoggingFragment\"/>\r\n\r\n        <action\r\n            android:id=\"@+id/action_MainFragment_to_FlashingFragment\"\r\n            app:destination=\"@id/FlashingFragment\"/>\r\n\r\n        <action\r\n            android:id=\"@+id/action_MainFragment_to_UtilitiesFragment\"\r\n            app:destination=\"@id/UtilitiesFragment\"/>\r\n\r\n        <action\r\n            android:id=\"@+id/action_MainFragment_to_SettingsFragment\"\r\n            app:destination=\"@id/SettingsFragment\"/>\r\n\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/LoggingFragment\"\r\n        android:name=\"com.app.simostools.LoggingMainFragment\"\r\n        android:label=\"@string/nav_logging\"\r\n        tools:layout=\"@layout/fragment_logging_main\">\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/FlashingFragment\"\r\n        android:name=\"com.app.simostools.FlashingFragment\"\r\n        android:label=\"@string/nav_flashing\"\r\n        tools:layout=\"@layout/fragment_flashing\">\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/UtilitiesFragment\"\r\n        android:name=\"com.app.simostools.UtilitiesFragment\"\r\n        android:label=\"@string/nav_utilities\"\r\n        tools:layout=\"@layout/fragment_utilities\">\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/SettingsFragment\"\r\n        android:name=\"com.app.simostools.SettingsMainFragment\"\r\n        android:label=\"@string/nav_settings\"\r\n        tools:layout=\"@layout/fragment_settings_main\">\r\n\r\n        <action\r\n            android:id=\"@+id/action_SettingsFragment_to_ColorFragment\"\r\n            app:destination=\"@id/ColorFragment\"/>\r\n\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/ColorFragment\"\r\n        android:name=\"com.app.simostools.ColorFragment\"\r\n        android:label=\"@string/nav_color\"\r\n        tools:layout=\"@layout/fragment_color\">\r\n    </fragment>\r\n\r\n</navigation>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/nav_graph_main.xml b/app/src/main/res/navigation/nav_graph_main.xml
--- a/app/src/main/res/navigation/nav_graph_main.xml	(revision 5d56bf9daffba38b30f99d25b900d33a7cfd12bf)
+++ b/app/src/main/res/navigation/nav_graph_main.xml	(date 1638137179806)
@@ -19,6 +19,10 @@
             android:id="@+id/action_MainFragment_to_FlashingFragment"
             app:destination="@id/FlashingFragment"/>
 
+        <action
+            android:id="@+id/action_MainFragment_to_PlaybackFragment"
+            app:destination="@id/PlaybackFragment"/>
+
         <action
             android:id="@+id/action_MainFragment_to_UtilitiesFragment"
             app:destination="@id/UtilitiesFragment"/>
@@ -42,6 +46,36 @@
         android:label="@string/nav_flashing"
         tools:layout="@layout/fragment_flashing">
     </fragment>
+
+    <fragment
+        android:id="@+id/PlaybackFragment"
+        android:name="com.app.simostools.PlaybackFragment"
+        android:label="@string/nav_playback"
+        tools:layout="@layout/fragment_playback">
+
+        <action
+            android:id="@+id/action_PlaybackFragment_to_PlaybackEnabledFragment"
+            app:destination="@id/PlaybackEnabledFragment"/>
+
+        <action
+            android:id="@+id/action_PlaybackFragment_to_PlaybackTabsFragment"
+            app:destination="@id/PlaybackTabsFragment"/>
+
+    </fragment>
+
+    <fragment
+        android:id="@+id/PlaybackEnabledFragment"
+        android:name="com.app.simostools.PlaybackEnabledFragment"
+        android:label="@string/nav_playback_enabled"
+        tools:layout="@layout/fragment_playback_enabled">
+    </fragment>
+
+    <fragment
+        android:id="@+id/PlaybackTabsFragment"
+        android:name="com.app.simostools.PlaybackTabsFragment"
+        android:label="@string/nav_playback_tabs"
+        tools:layout="@layout/fragment_playback_tabs">
+    </fragment>
 
     <fragment
         android:id="@+id/UtilitiesFragment"
