Index: app/src/main/java/com/app/simostools/MainFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport androidx.core.content.ContextCompat.startForegroundService\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.fragment.findNavController\r\n\r\nclass MainFragment : Fragment() {\r\n    private val TAG = \"MainFragment\"\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_main, container, false)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n\r\n        DebugLog.d(TAG, \"onDestroy\")\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        val loggingButton = view.findViewById<SwitchButton>(R.id.buttonMainLogging)\r\n        loggingButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                sendServiceMessage(BTServiceTask.DO_START_LOG.toString())\r\n                findNavController().navigate(R.id.action_MainFragment_to_LoggingFragment)\r\n            }\r\n        }\r\n\r\n        val flashingButton = view.findViewById<SwitchButton>(R.id.buttonMainFlashing)\r\n        flashingButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                findNavController().navigate(R.id.action_MainFragment_to_FlashingFragment)\r\n            }\r\n        }\r\n\r\n        val logViewerButton = view.findViewById<SwitchButton>(R.id.buttonLogViewer)\r\n        logViewerButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                gLogViewerLoadLast = false\r\n                findNavController().navigate(R.id.action_MainFragment_to_LogViewerFragment)\r\n            }\r\n        }\r\n\r\n        val utilitiesButton = view.findViewById<SwitchButton>(R.id.buttonMainUtilities)\r\n        utilitiesButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                findNavController().navigate(R.id.action_MainFragment_to_UtilitiesFragment)\r\n            }\r\n        }\r\n\r\n        val settingsButton = view.findViewById<SwitchButton>(R.id.buttonMainSettings)\r\n        settingsButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                TempPIDS.reset(context)\r\n                ColorSettings.resetColors()\r\n                findNavController().navigate(R.id.action_MainFragment_to_SettingsFragment)\r\n            }\r\n        }\r\n\r\n        val exitButton = view.findViewById<SwitchButton>(R.id.buttonMainExit)\r\n        exitButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                //Write pid default files\r\n                UDSLoggingMode.values().forEach { mode ->\r\n                    //write current PID list\r\n                    PIDCSVFile.write(\r\n                        getString(R.string.filename_pid_csv, mode.cfgName),\r\n                        requireActivity(),\r\n                        PIDs.getList(mode),\r\n                        true\r\n                    )\r\n                }\r\n\r\n                //write current PID list\r\n                PIDCSVFile.write(\r\n                    getString(R.string.filename_pid_csv, \"DSG\"),\r\n                    requireActivity(),\r\n                    PIDs.getDSGList(),\r\n                    true\r\n                )\r\n\r\n                //clear globals\r\n                gLogViewerData = null\r\n                gUtilitiesMsgList = emptyArray()\r\n                gFlashMsgList = emptyArray()\r\n\r\n                //stop timer\r\n                (activity as MainActivity).stopGUITimer()\r\n\r\n                //Stop our BT Service\r\n                sendServiceMessage(BTServiceTask.STOP_SERVICE.toString())\r\n                requireActivity().finish()\r\n            }\r\n        }\r\n\r\n        //Set background color\r\n        view.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n        view.findViewById<ImageView>(R.id.imageMainLogo).setBackgroundColor(ColorList.BG_NORMAL.value)\r\n\r\n        DebugLog.d(TAG, \"onViewCreated\")\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        if(!ConfigSettings.AUTO_LOG.toBoolean())\r\n            sendServiceMessage(BTServiceTask.DO_STOP_TASK.toString())\r\n\r\n        DebugLog.d(TAG, \"onResume\")\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        DebugLog.d(TAG, \"onPause\")\r\n    }\r\n\r\n    private fun sendServiceMessage(type: String) {\r\n        activity?.let {\r\n            val serviceIntent = Intent(it, BTService::class.java)\r\n            serviceIntent.action = type\r\n            startForegroundService(it, serviceIntent)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/MainFragment.kt b/app/src/main/java/com/app/simostools/MainFragment.kt
--- a/app/src/main/java/com/app/simostools/MainFragment.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/MainFragment.kt	(date 1639333461577)
@@ -58,6 +58,7 @@
             setTextColor(ColorList.BT_TEXT.value)
             setOnClickListener {
                 gLogViewerLoadLast = false
+                gLogViewerLoadTab = "Default"
                 findNavController().navigate(R.id.action_MainFragment_to_LogViewerFragment)
             }
         }
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n}\r\n\r\nandroid {\r\n    compileSdk 31\r\n\r\n    defaultConfig {\r\n        applicationId \"com.app.simostools\"\r\n        minSdk 28\r\n        targetSdk 31\r\n        versionCode 15\r\n        versionName \"0.15\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_11\r\n        targetCompatibility JavaVersion.VERSION_11\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '11'\r\n    }\r\n\r\n    buildFeatures{\r\n        viewBinding true\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation 'androidx.core:core-ktx:1.7.0'\r\n    implementation 'androidx.appcompat:appcompat:1.3.1'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'\r\n    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation \"androidx.recyclerview:recyclerview:1.2.1\"\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/build.gradle	(date 1639335594924)
@@ -10,8 +10,8 @@
         applicationId "com.app.simostools"
         minSdk 28
         targetSdk 31
-        versionCode 15
-        versionName "0.15"
+        versionCode 16
+        versionName "0.16"
 
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
     }
Index: app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.content.res.Configuration\r\nimport android.os.Bundle\r\nimport android.text.Html\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.LinearLayout\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.Fragment\r\nimport java.lang.Exception\r\n\r\nclass LoggingBaseFragment: Fragment() {\r\n    private var TAG                             = \"LoggingBaseFragment\"\r\n    private var mFragmentName                   = \"ECU\"\r\n    private var mLastWarning                    = false\r\n    private var mLayouts: Array<View?>?         = null\r\n    private var mGauges: Array<SwitchGauge?>?   = null\r\n    private var mPIDsPerLayout                  = 1\r\n    private var mLayoutName: Int                = R.id.loggingLayoutScroll\r\n    private var mPIDList                        = byteArrayOf()\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n\r\n        //Clear our layout\r\n        clearLayout()\r\n\r\n        DebugLog.d(TAG, \"onDestroy\")\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        return inflater.inflate(R.layout.fragment_logging_layout, container, false)\r\n    }\r\n\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        arguments?.takeIf { it.containsKey(LAYOUT_NAME) }?.apply {\r\n            mFragmentName = getString(LAYOUT_NAME, mFragmentName).toString()\r\n        }\r\n\r\n        //check orientation and type\r\n        checkOrientation()\r\n        buildLayout()\r\n\r\n        DebugLog.d(TAG, \"onViewCreated\")\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n\r\n        DebugLog.d(TAG, \"onDestroyView\")\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        //buildLayout()\r\n\r\n        val filter = IntentFilter()\r\n        filter.addAction(GUIMessage.READ_LOG.toString())\r\n        activity?.registerReceiver(mBroadcastReceiver, filter)\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = ConfigSettings.KEEP_SCREEN_ON.toBoolean()\r\n\r\n        //Set background color\r\n        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n\r\n        DebugLog.d(TAG, \"onResume\")\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        //Clear our layout\r\n        //clearLayout()\r\n\r\n        activity?.unregisterReceiver(mBroadcastReceiver)\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = false\r\n\r\n        //Set background color\r\n        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n\r\n        DebugLog.d(TAG, \"onPause\")\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n\r\n        DebugLog.d(TAG, \"onStart\")\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n\r\n        DebugLog.d(TAG, \"onStop\")\r\n    }\r\n\r\n    private fun checkOrientation() {\r\n        //check orientation and type\r\n        var currentOrientation = resources.configuration.orientation\r\n\r\n        if (ConfigSettings.ALWAYS_PORTRAIT.toBoolean())\r\n            currentOrientation = Configuration.ORIENTATION_PORTRAIT\r\n\r\n        when(currentOrientation) {\r\n            Configuration.ORIENTATION_LANDSCAPE -> {\r\n                mPIDsPerLayout = 3\r\n            }\r\n            Configuration.ORIENTATION_PORTRAIT -> {\r\n                mPIDsPerLayout = 2\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun clearLayout() {\r\n        mGauges?.let { gauges ->\r\n            for (i in 0 until gauges.count()) {\r\n                gauges[i] = null\r\n            }\r\n        }\r\n        mGauges = null\r\n\r\n        mLayouts?.let { layouts ->\r\n            for (i in 0 until layouts.count()) {\r\n                layouts[i] = null\r\n            }\r\n        }\r\n        mLayouts = null\r\n\r\n        view?.let { currentview ->\r\n            //Clear current layout\r\n            val lLayout = currentview.findViewById<LinearLayout>(mLayoutName)\r\n            lLayout.removeAllViews()\r\n        }\r\n\r\n        DebugLog.d(TAG, \"Cleared layout.\")\r\n    }\r\n\r\n    private fun buildLayout() {\r\n        view?.let { currentview ->\r\n\r\n            try {\r\n                //Build PID List\r\n                buildPIDList(mFragmentName == \"ECU\", mFragmentName == \"DSG\")\r\n\r\n                //Build layout\r\n                val pidList = if(mFragmentName == \"DSG\") PIDs.getDSGList()\r\n                else PIDs.getList()\r\n                pidList?.let { list ->\r\n                    var layoutCount = mPIDList.count() / mPIDsPerLayout\r\n                    if (mPIDList.count() % mPIDsPerLayout != 0)\r\n                        layoutCount++\r\n\r\n                    mLayouts = arrayOfNulls(layoutCount)\r\n                    mGauges = arrayOfNulls(mPIDList.count())\r\n                    for (i in 0 until mPIDList.count()) {\r\n                        //build child layout\r\n                        var progID = 0\r\n                        when (i % mPIDsPerLayout) {\r\n                            0 -> {\r\n                                val pidLayout = layoutInflater.inflate(R.layout.fragment_pid, null)\r\n                                val lLayout = currentview.findViewById<LinearLayout>(mLayoutName)\r\n                                lLayout.addView(pidLayout)\r\n                                mLayouts!![i / mPIDsPerLayout] = pidLayout\r\n                                progID = R.id.pid_gauge\r\n                            }\r\n                            1 -> progID = R.id.pid_gauge1\r\n                            2 -> progID = R.id.pid_gauge2\r\n                        }\r\n\r\n                        //get current data\r\n                        val pidData = if(mFragmentName == \"DSG\") PIDs.getDSGData()\r\n                        else PIDs.getData()\r\n\r\n                        val data = pidData!![mPIDList[i].toInt()]!!\r\n                        val pid = list[mPIDList[i].toInt()]!!\r\n\r\n                        //Setup the progress bar\r\n                        mGauges!![i] = mLayouts!![i / mPIDsPerLayout]?.findViewById(progID)\r\n                        val gauge = mGauges!![i]!!\r\n                        gauge.isVisible = true\r\n                        gauge.setTextColor(ColorList.TEXT.value)\r\n                        gauge.setProgressColor(ColorList.GAUGE_NORMAL.value, false)\r\n                        gauge.setRimColor(ColorList.BT_RIM.value)\r\n                        gauge.setMinMaxColor(ColorList.GAUGE_WARN.value, false)\r\n                        gauge.setMinMax(ConfigSettings.DRAW_MIN_MAX.toBoolean(), false)\r\n                        val prog = when (data.inverted) {\r\n                            true -> (0 - (pid.value - pid.progMin)) * data.multiplier\r\n                            false -> (pid.value - pid.progMin) * data.multiplier\r\n                        }\r\n                        val progMin = when (data.inverted) {\r\n                            true -> (0 - (data.min - pid.progMin)) * data.multiplier\r\n                            false -> (data.min - pid.progMin) * data.multiplier\r\n                        }\r\n                        val progMax = when (data.inverted) {\r\n                            true -> (0 - (data.max - pid.progMin)) * data.multiplier\r\n                            false -> (data.max - pid.progMin) * data.multiplier\r\n                        }\r\n                        gauge.setProgress(prog, progMin, progMax, false)\r\n                        gauge.setProgressBackgroundColor(ColorList.GAUGE_BG.value, false)\r\n                        gauge.setStyle(ConfigSettings.GAUGE_TYPE.toGaugeType(), false)\r\n                        when (ConfigSettings.GAUGE_TYPE.toGaugeType()) {\r\n                            GaugeType.BAR_H -> gauge.setProgressWidth(400f, false)\r\n                            GaugeType.BAR_V -> gauge.setProgressWidth(400f, false)\r\n                            GaugeType.BASIC -> gauge.setProgressWidth(400f, false)\r\n                            GaugeType.ROUND -> {\r\n                                gauge.setProgressWidth(50f, false)\r\n                                gauge.textSize = gauge.textSize * 0.25f\r\n                            }\r\n                        }\r\n                        if(kotlin.math.abs(pid.progMin) == kotlin.math.abs(pid.progMax))\r\n                            gauge.setCentered(true, false)\r\n                        gauge.setGraduations(ConfigSettings.DRAW_GRADUATIONS.toBoolean(), false)\r\n                        gauge.setIndex(i)\r\n                        gauge.setOnLongClickListener {\r\n                            onGaugeClick(it)\r\n                        }\r\n                        gauge.setEnable(pid.enabled)\r\n                    }\r\n                    DebugLog.d(TAG, \"buildLayout ${mGauges?.count()}\")\r\n                    updateGauges()\r\n                }\r\n            } catch (e: Exception) {\r\n                DebugLog.e(TAG, \"buildLayout - exception\", e)\r\n            }\r\n        } ?: DebugLog.d(TAG, \"buildLayout - view is invalid.\")\r\n    }\r\n\r\n    private fun updateGauges() {\r\n        mGauges?.let { gauges ->\r\n            //Set the UI values\r\n            var warnAny = false\r\n            var lastI = -1\r\n            try {\r\n                if(gauges.count() != mPIDList.count()) {\r\n                    DebugLog.d(TAG, \"updateGauges - gauge count does not match pid count[${gauges.count()}:${mPIDList.count()}]\")\r\n                }\r\n                for (i in 0 until mPIDList.count()) {\r\n                    //get current PID & data\r\n                    val pidList = if(mFragmentName == \"DSG\") PIDs.getDSGList()\r\n                    else PIDs.getList()\r\n                    val pidData = if(mFragmentName == \"DSG\") PIDs.getDSGData()\r\n                    else PIDs.getData()\r\n\r\n                    //get the current pid\r\n                    val pid = pidList!![mPIDList[i].toInt()]!!\r\n                    val data = pidData!![mPIDList[i].toInt()]!!\r\n                    val gauge = gauges[i]!!\r\n\r\n                    var prog = when (data.inverted) {\r\n                        true -> (0 - (pid.value - pid.progMin)) * data.multiplier\r\n                        false -> (pid.value - pid.progMin) * data.multiplier\r\n                    }\r\n                    val progMin = when (data.inverted) {\r\n                        true -> (0 - (data.min - pid.progMin)) * data.multiplier\r\n                        false -> (data.min - pid.progMin) * data.multiplier\r\n                    }\r\n                    val progMax = when (data.inverted) {\r\n                        true -> (0 - (data.max - pid.progMin)) * data.multiplier\r\n                        false -> (data.max - pid.progMin) * data.multiplier\r\n                    }\r\n                    gauge.setProgress(prog, progMin, progMax, false)\r\n\r\n                    //constrain value\r\n                    if (prog > 100f) prog = 100f\r\n                    else if (prog < 0f) prog = 0f\r\n\r\n                    //check if previous value is different\r\n                    if (prog != gauge.getProgress()) {\r\n                        gauge.setProgress(prog, progMin, progMax, false)\r\n                    }\r\n\r\n                    //Check to see if we should be warning user\r\n                    if (!data.warn) {\r\n                        gauge.setProgressColor(ColorList.GAUGE_NORMAL.value, false)\r\n                        gauge.setMinMaxColor(ColorList.GAUGE_WARN.value, false)\r\n                        gauge.setProgressBackgroundColor(ColorList.GAUGE_BG.value, false)\r\n                    } else {\r\n                        gauge.setProgressColor(ColorList.GAUGE_WARN.value, false)\r\n                        gauge.setMinMaxColor(ColorList.GAUGE_NORMAL.value, false)\r\n                        gauge.setProgressBackgroundColor(ColorList.BG_WARN.value, false)\r\n                        warnAny = true\r\n                    }\r\n\r\n                    //update text which will invalidate and redraw\r\n                    gauge.text = Html.fromHtml(\r\n                        \"<b><small>${pid.name}<br></small><big>\" +\r\n                                \"<font color=\\\"#${ColorList.GAUGE_VALUE.value.toColorHex()}\\\">\" +\r\n                                \"${pid.format.format(pid.value)}</font></big></b>\" +\r\n                                \"<small><br>${pid.format.format(data.min)} <b>:</b> \" +\r\n                                \"${pid.format.format(data.max)}<br>${pid.unit}</small>\"\r\n                        , Html.FROM_HTML_OPTION_USE_CSS_COLORS)\r\n\r\n                    lastI = i\r\n                }\r\n\r\n                //If any visible PIDS are in warning state set background color to warn\r\n                if (warnAny) {\r\n                    if (!mLastWarning) {\r\n                        mLastWarning = true\r\n                        view?.setBackgroundColor(ColorList.BG_WARN.value)\r\n                    } else {\r\n                        mLastWarning = false\r\n                        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n                    }\r\n                } else {\r\n                    if (mLastWarning) {\r\n                        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n                    }\r\n                    mLastWarning = false\r\n                }\r\n\r\n                DebugLog.d(TAG, \"updateGauges [${lastI+1}:${mPIDList.count()}]\")\r\n            } catch (e: Exception) {\r\n                DebugLog.e(TAG, \"updateGauges - exception [${lastI+1}:${mPIDList.count()}]\", e)\r\n            }\r\n        }?: run {\r\n            DebugLog.d(TAG, \"updateGauges - gauges are invalid pidlist count ${mPIDList.count()}\")\r\n        }\r\n    }\r\n\r\n    private fun buildPIDList(all: Boolean, dsg: Boolean) {\r\n        //Build our list of PIDS in this layout\r\n        val pidList = if(dsg) PIDs.getDSGList()\r\n        else PIDs.getList()\r\n        pidList?.let { list ->\r\n            //get list of custom PIDS\r\n            var customList = byteArrayOf()\r\n            for (i in 0 until list.count()) {\r\n                list[i]?.let { pid ->\r\n                    if (pid.enabled && (all || dsg || pid.tabs.contains(mFragmentName))) {\r\n                        customList += i.toByte()\r\n                    }\r\n                }\r\n            }\r\n            if(!all && !dsg) {\r\n                for (i in 0 until customList.count()) {\r\n                    var movedAhead = false\r\n                    var lastPos = -1\r\n                    do {\r\n                        movedAhead = false\r\n                        list[customList[i].toInt()]?.let { pid ->\r\n                            pid.tabs.split(\".\").forEach {\r\n                                try {\r\n                                    val curPos = customList[i]\r\n                                    val pidPos = it.substringAfter(\"|\").toInt()\r\n                                    if (pidPos < customList.count()) {\r\n                                        customList[i] = customList[pidPos]\r\n                                        customList[pidPos] = curPos\r\n                                        if (pidPos > curPos && pidPos != lastPos)\r\n                                            movedAhead = true\r\n\r\n                                        lastPos = pidPos   //prevent an endless loop\r\n                                    } else {\r\n                                        lastPos = -1\r\n                                    }\r\n                                } catch (e: Exception) {\r\n                                    DebugLog.d(TAG, \"Error in PID layout position\")\r\n                                }\r\n                            }\r\n                        }\r\n                    } while (movedAhead)\r\n                }\r\n            }\r\n            mPIDList = customList\r\n        }\r\n    }\r\n\r\n    private fun onGaugeClick(view: View?): Boolean {\r\n        PIDs.resetData(mFragmentName == \"DSG\")\r\n        updateGauges()\r\n\r\n        return true\r\n    }\r\n\r\n    private val mBroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            when (intent.action) {\r\n                GUIMessage.READ_LOG.toString() -> {\r\n                    val readCount = intent.getIntExtra(\"readCount\", 0)\r\n                    val readTime = intent.getLongExtra(\"readTime\", 0)\r\n                    val readResult = intent.getSerializableExtra(\"readResult\") as UDSReturn\r\n\r\n                    //Make sure we received an ok\r\n                    if (readResult != UDSReturn.OK) {\r\n                        return\r\n                    }\r\n\r\n                    //Update callback\r\n                    updateGauges()\r\n                }\r\n                else -> { }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt b/app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt
--- a/app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/LoggingLayoutFragment.kt	(date 1639239700354)
@@ -5,8 +5,15 @@
 import android.content.Intent
 import android.content.IntentFilter
 import android.content.res.Configuration
+import android.graphics.Typeface
+import android.graphics.Typeface.BOLD
 import android.os.Bundle
 import android.text.Html
+import android.text.Spannable
+import android.text.SpannableStringBuilder
+import android.text.style.ForegroundColorSpan
+import android.text.style.RelativeSizeSpan
+import android.text.style.StyleSpan
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
@@ -24,6 +31,8 @@
     private var mPIDsPerLayout                  = 1
     private var mLayoutName: Int                = R.id.loggingLayoutScroll
     private var mPIDList                        = byteArrayOf()
+    private var mCanUpdate: Boolean             = true
+    private var mNextUpdate: Long               = 0
 
     override fun onDestroy() {
         super.onDestroy()
@@ -65,8 +74,7 @@
     override fun onResume() {
         super.onResume()
 
-        //buildLayout()
-
+        //Start listening for message from server
         val filter = IntentFilter()
         filter.addAction(GUIMessage.READ_LOG.toString())
         activity?.registerReceiver(mBroadcastReceiver, filter)
@@ -83,9 +91,7 @@
     override fun onPause() {
         super.onPause()
 
-        //Clear our layout
-        //clearLayout()
-
+        //Stop listening for messages from server
         activity?.unregisterReceiver(mBroadcastReceiver)
 
         //Do we keep the screen on?
@@ -152,7 +158,6 @@
 
     private fun buildLayout() {
         view?.let { currentview ->
-
             try {
                 //Build PID List
                 buildPIDList(mFragmentName == "ECU", mFragmentName == "DSG")
@@ -240,7 +245,11 @@
         } ?: DebugLog.d(TAG, "buildLayout - view is invalid.")
     }
 
+    @Synchronized
     private fun updateGauges() {
+        mCanUpdate = false
+        val frameStartTime = System.currentTimeMillis()
+
         mGauges?.let { gauges ->
             //Set the UI values
             var warnAny = false
@@ -297,13 +306,17 @@
                     }
 
                     //update text which will invalidate and redraw
-                    gauge.text = Html.fromHtml(
-                        "<b><small>${pid.name}<br></small><big>" +
-                                "<font color=\"#${ColorList.GAUGE_VALUE.value.toColorHex()}\">" +
-                                "${pid.format.format(pid.value)}</font></big></b>" +
-                                "<small><br>${pid.format.format(data.min)} <b>:</b> " +
-                                "${pid.format.format(data.max)}<br>${pid.unit}</small>"
-                        , Html.FROM_HTML_OPTION_USE_CSS_COLORS)
+                    val spanner = SpannableStringBuilder("${pid.name}\r\n")
+                    spanner.setSpan(RelativeSizeSpan(0.75f), 0, spanner.length, Spannable.SPAN_INCLUSIVE_EXCLUSIVE)
+                    var startPos = spanner.length
+                    spanner.append("${pid.format.format(pid.value)}\r\n")
+                    spanner.setSpan(RelativeSizeSpan(1.5f), startPos, spanner.length, Spannable.SPAN_INCLUSIVE_EXCLUSIVE)
+                    spanner.setSpan(ForegroundColorSpan(ColorList.GAUGE_VALUE.value), startPos, spanner.length, Spannable.SPAN_INCLUSIVE_EXCLUSIVE)
+                    spanner.setSpan(StyleSpan(BOLD), 0, spanner.length, Spannable.SPAN_INCLUSIVE_EXCLUSIVE)
+                    startPos = spanner.length
+                    spanner.append("${pid.format.format(data.min)} : ${pid.format.format(data.max)}\r\n${pid.unit}")
+                    spanner.setSpan(RelativeSizeSpan(0.75f), startPos, spanner.length, Spannable.SPAN_INCLUSIVE_EXCLUSIVE)
+                    gauge.text = spanner
 
                     lastI = i
                 }
@@ -331,6 +344,11 @@
         }?: run {
             DebugLog.d(TAG, "updateGauges - gauges are invalid pidlist count ${mPIDList.count()}")
         }
+
+        //calculate wait time for next frame so we don't hang the app
+        val frameTime = (System.currentTimeMillis() - frameStartTime) * 0.5f
+        mNextUpdate = System.currentTimeMillis() + frameTime.toInt()
+        mCanUpdate = true
     }
 
     private fun buildPIDList(all: Boolean, dsg: Boolean) {
@@ -401,7 +419,8 @@
                     }
 
                     //Update callback
-                    updateGauges()
+                    if(mCanUpdate && System.currentTimeMillis() > mNextUpdate)
+                        updateGauges()
                 }
                 else -> { }
             }
Index: app/src/main/java/com/app/simostools/UtilitiesFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport android.widget.*\r\nimport androidx.core.content.ContextCompat.startForegroundService\r\nimport android.widget.ArrayAdapter\r\nimport androidx.core.view.isVisible\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\n\r\nvar gUtilitiesMsgList: Array<String>? = arrayOf()\r\n\r\nclass UtilitiesViewModel : ViewModel() {\r\n    var connectionState: BLEConnectionState = BLEConnectionState.NONE\r\n}\r\n\r\nclass UtilitiesFragment : Fragment() {\r\n    private val TAG = \"UtilitiesFragment\"\r\n    private var mArrayAdapter: SwitchArrayAdapter? = null\r\n    private lateinit var mViewModel: UtilitiesViewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_utilities, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        mViewModel = ViewModelProvider(this).get(UtilitiesViewModel::class.java)\r\n\r\n        mArrayAdapter = SwitchArrayAdapter(requireContext(), R.layout.fragment_message, gUtilitiesMsgList?: arrayOf())\r\n        mArrayAdapter?.let { adapter ->\r\n            gUtilitiesMsgList?.forEach {\r\n                adapter.add(it)\r\n            }\r\n        }\r\n\r\n        view.findViewById<ListView>(R.id.listViewMessage)?.apply {\r\n            adapter = mArrayAdapter\r\n            setBackgroundColor(Color.WHITE)\r\n        }\r\n\r\n        val ecuInfoButton = view.findViewById<SwitchButton>(R.id.buttonGetInfo)\r\n        ecuInfoButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                var ecuString = \"Get Info\\n---------------\"\r\n                if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {\r\n                    sendServiceMessage(BTServiceTask.DO_GET_INFO.toString())\r\n                } else {\r\n                    ecuString += \"\\nNot connected\"\r\n                }\r\n                doWriteMessage(ecuString)\r\n            }\r\n        }\r\n\r\n        val getDTCButton = view.findViewById<SwitchButton>(R.id.buttonGetDTC)\r\n        getDTCButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                clickDTC(false)\r\n            }\r\n        }\r\n\r\n        val clearDTCButton = view.findViewById<SwitchButton>(R.id.buttonClearDTC)\r\n        clearDTCButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                doWriteMessage(\"Clear DTC\\n---------------\\nHold button to clear DTC codes.\")\r\n            }\r\n            setOnLongClickListener {\r\n                clickDTC(true)\r\n            }\r\n        }\r\n\r\n        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)\r\n        backButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n\r\n        view.findViewById<ProgressBar>(R.id.progressBarUtilities)?.apply {\r\n            progress = 0\r\n            isVisible = false\r\n            max = 100\r\n            min = 0\r\n        }\r\n\r\n        setColor()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        setColor()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = ConfigSettings.KEEP_SCREEN_ON.toBoolean()\r\n\r\n        //register broadcast receiver\r\n        val filter = IntentFilter()\r\n        filter.addAction(GUIMessage.STATE_CONNECTION.toString())\r\n        filter.addAction(GUIMessage.STATE_TASK.toString())\r\n        filter.addAction(GUIMessage.UTILITY_INFO.toString())\r\n        filter.addAction(GUIMessage.UTILITY_INFO_CLEAR.toString())\r\n        filter.addAction(GUIMessage.UTILITY_PROGRESS.toString())\r\n        filter.addAction(GUIMessage.UTILITY_PROGRESS_MAX.toString())\r\n        filter.addAction(GUIMessage.UTILITY_PROGRESS_SHOW.toString())\r\n        activity?.registerReceiver(mBroadcastReceiver, filter)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = false\r\n\r\n        //unregister broadcast receiver\r\n        activity?.unregisterReceiver(mBroadcastReceiver)\r\n    }\r\n\r\n    private val mBroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            DebugLog.d(TAG, \"Utility Fragment received action: \" + intent.action.toString())\r\n            when (intent.action) {\r\n                GUIMessage.STATE_CONNECTION.toString()      -> mViewModel.connectionState = intent.getSerializableExtra(GUIMessage.STATE_CONNECTION.toString()) as BLEConnectionState\r\n                GUIMessage.STATE_TASK.toString()            -> mViewModel.connectionState = BLEConnectionState.CONNECTED\r\n                GUIMessage.UTILITY_INFO.toString()          -> doWriteMessage(intent.getStringExtra(GUIMessage.UTILITY_INFO.toString())?: \"\")\r\n                GUIMessage.UTILITY_INFO_CLEAR.toString()    -> doClearMessages()\r\n                GUIMessage.UTILITY_PROGRESS.toString()      -> setProgressBar(intent.getIntExtra(GUIMessage.UTILITY_PROGRESS.toString(), 0))\r\n                GUIMessage.UTILITY_PROGRESS_MAX.toString()  -> setProgressBarMax(intent.getIntExtra(GUIMessage.UTILITY_PROGRESS_MAX.toString(), 0))\r\n                GUIMessage.UTILITY_PROGRESS_SHOW.toString() -> setProgressBarShow(intent.getBooleanExtra(GUIMessage.UTILITY_PROGRESS_SHOW.toString(), false))\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun clickDTC(clear: Boolean):Boolean {\r\n        var dtcString = if(clear) \"Clear DTC\\n---------------\"\r\n            else \"Get DTC\\n---------------\"\r\n        if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {\r\n            if(clear) sendServiceMessage(BTServiceTask.DO_CLEAR_DTC.toString())\r\n            else sendServiceMessage(BTServiceTask.DO_GET_DTC.toString())\r\n        } else {\r\n            dtcString += \"\\nNot connected.\"\r\n        }\r\n\r\n        doWriteMessage(dtcString)\r\n\r\n        return true\r\n    }\r\n\r\n    private fun doClearMessages() {\r\n        gUtilitiesMsgList = arrayOf()\r\n        mArrayAdapter?.let {\r\n            it.clear()\r\n\r\n            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)\r\n            btMessage?.setSelection(0)\r\n        }\r\n    }\r\n\r\n    private fun doWriteMessage(message: String) {\r\n        // construct a string from the valid bytes in the buffer\r\n        val value = gUtilitiesMsgList?: arrayOf()\r\n        gUtilitiesMsgList = value + message\r\n        mArrayAdapter?.let {\r\n            it.add(message)\r\n\r\n            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)\r\n            btMessage?.setSelection(it.count - 1)\r\n        }\r\n    }\r\n\r\n    private fun setColor() {\r\n        val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)\r\n        btMessage?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n\r\n        //Set background color\r\n        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n    }\r\n\r\n    private fun setProgressBar(amount: Int) {\r\n        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarUtilities)\r\n        pBar?.progress = amount\r\n\r\n    }\r\n\r\n    private fun setProgressBarMax(amount: Int) {\r\n        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarUtilities)\r\n        pBar?.max = amount\r\n    }\r\n\r\n    private fun setProgressBarShow(allow: Boolean) {\r\n        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarUtilities)\r\n        pBar?.isVisible = allow\r\n    }\r\n\r\n    private fun sendServiceMessage(type: String) {\r\n        activity?.let {\r\n            val serviceIntent = Intent(it, BTService::class.java)\r\n            serviceIntent.action = type\r\n            startForegroundService(it, serviceIntent)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/UtilitiesFragment.kt b/app/src/main/java/com/app/simostools/UtilitiesFragment.kt
--- a/app/src/main/java/com/app/simostools/UtilitiesFragment.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/UtilitiesFragment.kt	(date 1639324796396)
@@ -12,7 +12,6 @@
 import androidx.fragment.app.Fragment
 import android.widget.*
 import androidx.core.content.ContextCompat.startForegroundService
-import android.widget.ArrayAdapter
 import androidx.core.view.isVisible
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.ViewModelProvider
@@ -21,12 +20,17 @@
 var gUtilitiesMsgList: Array<String>? = arrayOf()
 
 class UtilitiesViewModel : ViewModel() {
-    var connectionState: BLEConnectionState = BLEConnectionState.NONE
 }
 
 class UtilitiesFragment : Fragment() {
     private val TAG = "UtilitiesFragment"
-    private var mArrayAdapter: SwitchArrayAdapter? = null
+    private var mArrayAdapter: SwitchArrayAdapter?  = null
+    private var mGetDTCButton: SwitchButton?        = null
+    private var mClearDTCButton: SwitchButton?      = null
+    private var mECUInfoButton: SwitchButton?       = null
+    private var mBackButton: SwitchButton?          = null
+    private var mUtilitiesMessageBox: ListView?     = null
+    private var mUtilitiesProgressBar: ProgressBar? = null
     private lateinit var mViewModel: UtilitiesViewModel
 
     override fun onCreateView(
@@ -48,29 +52,23 @@
             }
         }
 
-        view.findViewById<ListView>(R.id.listViewMessage)?.apply {
+        mUtilitiesMessageBox = view.findViewById(R.id.listViewMessage)
+        mUtilitiesMessageBox?.apply {
             adapter = mArrayAdapter
-            setBackgroundColor(Color.WHITE)
+            setSelection(adapter.count - 1)
+            setBackgroundColor(ColorList.BG_NORMAL.value)
         }
 
-        val ecuInfoButton = view.findViewById<SwitchButton>(R.id.buttonGetInfo)
-        ecuInfoButton.apply {
-            paintBG.color = ColorList.BT_BG.value
-            paintRim.color = ColorList.BT_RIM.value
-            setTextColor(ColorList.BT_TEXT.value)
-            setOnClickListener {
-                var ecuString = "Get Info\n---------------"
-                if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {
-                    sendServiceMessage(BTServiceTask.DO_GET_INFO.toString())
-                } else {
-                    ecuString += "\nNot connected"
-                }
-                doWriteMessage(ecuString)
-            }
+        mUtilitiesProgressBar = view.findViewById(R.id.progressBarUtilities)
+        mUtilitiesProgressBar?.apply {
+            progress = 0
+            isVisible = false
+            max = 100
+            min = 0
         }
 
-        val getDTCButton = view.findViewById<SwitchButton>(R.id.buttonGetDTC)
-        getDTCButton.apply {
+        mGetDTCButton = view.findViewById(R.id.buttonGetDTC)
+        mGetDTCButton?.apply {
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -79,8 +77,8 @@
             }
         }
 
-        val clearDTCButton = view.findViewById<SwitchButton>(R.id.buttonClearDTC)
-        clearDTCButton.apply {
+        mClearDTCButton = view.findViewById(R.id.buttonClearDTC)
+        mClearDTCButton?.apply {
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -92,8 +90,20 @@
             }
         }
 
-        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)
-        backButton.apply {
+        mECUInfoButton = view.findViewById(R.id.buttonGetInfo)
+        mECUInfoButton?.apply {
+            paintBG.color = ColorList.BT_BG.value
+            paintRim.color = ColorList.BT_RIM.value
+            setTextColor(ColorList.BT_TEXT.value)
+            setOnClickListener {
+                setButtons(false)
+                doWriteMessage("Get Info\n---------------")
+                sendServiceMessage(BTServiceTask.DO_GET_INFO.toString())
+            }
+        }
+
+        mBackButton = view.findViewById(R.id.buttonBack)
+        mBackButton?.apply {
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -102,21 +112,12 @@
             }
         }
 
-        view.findViewById<ProgressBar>(R.id.progressBarUtilities)?.apply {
-            progress = 0
-            isVisible = false
-            max = 100
-            min = 0
-        }
-
-        setColor()
+        view.setBackgroundColor(ColorList.BG_NORMAL.value)
     }
 
     override fun onResume() {
         super.onResume()
 
-        setColor()
-
         //Do we keep the screen on?
         view?.keepScreenOn = ConfigSettings.KEEP_SCREEN_ON.toBoolean()
 
@@ -146,28 +147,47 @@
         override fun onReceive(context: Context?, intent: Intent) {
             DebugLog.d(TAG, "Utility Fragment received action: " + intent.action.toString())
             when (intent.action) {
-                GUIMessage.STATE_CONNECTION.toString()      -> mViewModel.connectionState = intent.getSerializableExtra(GUIMessage.STATE_CONNECTION.toString()) as BLEConnectionState
-                GUIMessage.STATE_TASK.toString()            -> mViewModel.connectionState = BLEConnectionState.CONNECTED
+                GUIMessage.STATE_CONNECTION.toString()      -> doStateConnection(intent.getSerializableExtra(GUIMessage.STATE_CONNECTION.toString()) as BLEConnectionState)
+                GUIMessage.STATE_TASK.toString()            -> doStateTask(intent.getSerializableExtra(GUIMessage.STATE_TASK.toString()) as UDSTask)
                 GUIMessage.UTILITY_INFO.toString()          -> doWriteMessage(intent.getStringExtra(GUIMessage.UTILITY_INFO.toString())?: "")
                 GUIMessage.UTILITY_INFO_CLEAR.toString()    -> doClearMessages()
-                GUIMessage.UTILITY_PROGRESS.toString()      -> setProgressBar(intent.getIntExtra(GUIMessage.UTILITY_PROGRESS.toString(), 0))
-                GUIMessage.UTILITY_PROGRESS_MAX.toString()  -> setProgressBarMax(intent.getIntExtra(GUIMessage.UTILITY_PROGRESS_MAX.toString(), 0))
-                GUIMessage.UTILITY_PROGRESS_SHOW.toString() -> setProgressBarShow(intent.getBooleanExtra(GUIMessage.UTILITY_PROGRESS_SHOW.toString(), false))
+                GUIMessage.UTILITY_PROGRESS.toString()      -> mUtilitiesProgressBar?.progress = intent.getIntExtra(GUIMessage.UTILITY_PROGRESS.toString(), 0)
+                GUIMessage.UTILITY_PROGRESS_MAX.toString()  -> mUtilitiesProgressBar?.max = intent.getIntExtra(GUIMessage.UTILITY_PROGRESS_MAX.toString(), 0)
+                GUIMessage.UTILITY_PROGRESS_SHOW.toString() -> mUtilitiesProgressBar?.isVisible = intent.getBooleanExtra(GUIMessage.UTILITY_PROGRESS_SHOW.toString(), false)
             }
         }
     }
+
+    private fun doStateTask(newTask: UDSTask) {
+        when(newTask) {
+            UDSTask.NONE    -> setButtons(true)
+            else            -> setButtons(false)
+        }
+    }
+
+    private fun doStateConnection(newState: BLEConnectionState) {
+        when(newState) {
+            BLEConnectionState.CONNECTED    -> setButtons(true)
+            else                            -> setButtons(false)
+        }
+    }
+
+    private fun setButtons(enabled: Boolean, back: Boolean = true) {
+        mGetDTCButton?.isEnabled    = enabled
+        mClearDTCButton?.isEnabled  = enabled
+        mECUInfoButton?.isEnabled   = enabled
+        mBackButton?.isEnabled      = back
+    }
 
     private fun clickDTC(clear: Boolean):Boolean {
-        var dtcString = if(clear) "Clear DTC\n---------------"
-            else "Get DTC\n---------------"
-        if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {
-            if(clear) sendServiceMessage(BTServiceTask.DO_CLEAR_DTC.toString())
-            else sendServiceMessage(BTServiceTask.DO_GET_DTC.toString())
-        } else {
-            dtcString += "\nNot connected."
-        }
-
-        doWriteMessage(dtcString)
+        setButtons(false)
+
+        val dtcString = if(clear) "Clear DTC\n---------------"
+        else "Get DTC\n---------------"
+        doWriteMessage(dtcString)
+
+        if(clear) sendServiceMessage(BTServiceTask.DO_CLEAR_DTC.toString())
+        else sendServiceMessage(BTServiceTask.DO_GET_DTC.toString())
 
         return true
     }
@@ -177,8 +197,7 @@
         mArrayAdapter?.let {
             it.clear()
 
-            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)
-            btMessage?.setSelection(0)
+            mUtilitiesMessageBox?.setSelection(0)
         }
     }
 
@@ -189,34 +208,9 @@
         mArrayAdapter?.let {
             it.add(message)
 
-            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)
-            btMessage?.setSelection(it.count - 1)
+            mUtilitiesMessageBox?.setSelection(it.count - 1)
         }
     }
-
-    private fun setColor() {
-        val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)
-        btMessage?.setBackgroundColor(ColorList.BG_NORMAL.value)
-
-        //Set background color
-        view?.setBackgroundColor(ColorList.BG_NORMAL.value)
-    }
-
-    private fun setProgressBar(amount: Int) {
-        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarUtilities)
-        pBar?.progress = amount
-
-    }
-
-    private fun setProgressBarMax(amount: Int) {
-        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarUtilities)
-        pBar?.max = amount
-    }
-
-    private fun setProgressBarShow(allow: Boolean) {
-        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarUtilities)
-        pBar?.isVisible = allow
-    }
 
     private fun sendServiceMessage(type: String) {
         activity?.let {
@@ -225,4 +219,4 @@
             startForegroundService(it, serviceIntent)
         }
     }
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/app/simostools/UDSlog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.Context\r\nimport java.lang.Exception\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport kotlin.math.sqrt\r\n\r\nobject UDSLogger {\r\n    private val TAG                 = \"UDSlog\"\r\n    private var mLastEnabled        = false\r\n    private var mMode               = UDSLoggingMode.MODE_22\r\n    private var mLogDSG             = false\r\n    private var mTorquePID          = -1\r\n    private var mEngineRPMPID       = -1\r\n    private var mMS2PID             = -1\r\n    private var mGearPID            = -1\r\n    private var mVelocityPID        = -1\r\n    private var mTireCircumference  = -1f\r\n    private var mFoundMS2PIDS       = false\r\n    private var mFoundTQPIDS        = false\r\n    private var mEnabledArray22     = byteArrayOf()\r\n    private var mEnabledArray3E     = byteArrayOf()\r\n    private var mEnabledArrayDSG    = byteArrayOf()\r\n    private var mAddressArray22     = byteArrayOf()\r\n    private var mAddressArray3E     = byteArrayOf()\r\n    private var mAddressArrayDSG    = byteArrayOf()\r\n    private var mTimeoutCounter     = TIME_OUT_LOGGING\r\n    private var mCalculatedTQ       = 0f\r\n    private var mCalculatedHP       = 0f\r\n    private var mLastFrameSize      = -1\r\n    private var mRevision           = \"SimosTools [R1.4:We don't respond to emails]\"\r\n\r\n    fun clear() {\r\n        LogFile.close()\r\n        mEnabledArray22     = byteArrayOf()\r\n        mEnabledArray3E     = byteArrayOf()\r\n        mEnabledArrayDSG    = byteArrayOf()\r\n        mAddressArray22     = byteArrayOf()\r\n        mAddressArray3E     = byteArrayOf()\r\n        mAddressArrayDSG    = byteArrayOf()\r\n    }\r\n\r\n    fun getTQ(): Float {\r\n        return mCalculatedTQ\r\n    }\r\n\r\n    fun getHP(): Float {\r\n        return mCalculatedHP\r\n    }\r\n\r\n    fun isEnabled(): Boolean {\r\n        return mLastEnabled\r\n    }\r\n\r\n    fun setMode(mode: UDSLoggingMode) {\r\n        mMode = mode\r\n    }\r\n\r\n    fun getMode(): UDSLoggingMode {\r\n        return mMode\r\n    }\r\n\r\n    fun setModeDSG(dsg: Boolean) {\r\n        mLogDSG = dsg\r\n    }\r\n\r\n    fun getModeDSG(): Boolean {\r\n        return mLogDSG\r\n    }\r\n\r\n    fun frameCount(): Int {\r\n        return when (mMode) {\r\n            UDSLoggingMode.MODE_22 -> {\r\n                if(mLogDSG) frameCount22() + frameCountDSG()\r\n                else frameCount22()\r\n            }\r\n            UDSLoggingMode.MODE_3E -> {\r\n                if(mLogDSG) frameCount3E() + frameCountDSG()\r\n                else frameCount3E()\r\n            }\r\n        }\r\n    }\r\n\r\n    fun startTask(index: Int): ByteArray {\r\n        return when(mMode) {\r\n            UDSLoggingMode.MODE_22 -> buildFrame22(index)\r\n            UDSLoggingMode.MODE_3E -> buildFrame3E(index)\r\n        }\r\n    }\r\n\r\n    fun processPacket(tick: Int, buff: ByteArray?, context: Context): UDSReturn {\r\n        buff?.let {\r\n            resetTimeout()\r\n\r\n            return when (mMode) {\r\n                UDSLoggingMode.MODE_22 -> processFrame22(tick, buff, context)\r\n                UDSLoggingMode.MODE_3E -> processFrame3E(tick, buff, context)\r\n            }\r\n        }\r\n\r\n        return addTimeout()\r\n    }\r\n\r\n    private fun addTimeout(): UDSReturn {\r\n        if(--mTimeoutCounter == 0) {\r\n            return UDSReturn.ERROR_TIME_OUT\r\n        }\r\n\r\n        return UDSReturn.OK\r\n    }\r\n\r\n    private fun resetTimeout() {\r\n        mTimeoutCounter = TIME_OUT_LOGGING\r\n    }\r\n\r\n    private fun isCalcHP(): Boolean {\r\n        if(ConfigSettings.CALCULATE_HP.toBoolean() && (mFoundTQPIDS || mFoundMS2PIDS)) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    private fun calcTQ() {\r\n        PIDs.getList()?.let { list ->\r\n            if (ConfigSettings.CALCULATE_HP.toBoolean()) {\r\n                if (mFoundMS2PIDS && ConfigSettings.USE_MS2.toBoolean()) {\r\n                    try {\r\n                        val gearValue = list[mGearPID]!!.value.toInt()\r\n\r\n                        if (gearValue in 1..7) {\r\n                            val ms2Value = sqrt(list[mMS2PID]!!.value)\r\n                            val velValue = list[mVelocityPID]!!.value\r\n                            val weightValue = ConfigSettings.CURB_WEIGHT.toFloat() * KG_TO_N\r\n                            val ratioValue = sqrt(GearRatios.values()[gearValue - 1].ratio * GearRatios.FINAL.ratio)\r\n                            val dragValue = 1.0 + ((velValue * velValue).toDouble() * ConfigSettings.DRAG_COEFFICIENT.toDouble())\r\n\r\n                            mCalculatedTQ = ((weightValue * ms2Value / ratioValue / mTireCircumference / TQ_CONSTANT).toDouble() * dragValue).toFloat()\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        mCalculatedTQ = 0f\r\n                    }\r\n                } else if (mFoundTQPIDS) {\r\n                    mCalculatedTQ = try {\r\n                        list[mTorquePID]!!.value\r\n                    } catch (e: Exception) {\r\n                        0f\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun calcHP() {\r\n        PIDs.getList()?.let { list ->\r\n            if (ConfigSettings.CALCULATE_HP.toBoolean() && mEngineRPMPID != -1) {\r\n                mCalculatedHP = try {\r\n                    val rpmValue = list[mEngineRPMPID]!!.value\r\n                    mCalculatedTQ * rpmValue / 7127f\r\n                } catch (e: Exception) {\r\n                    0f\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun resetHPPIDS() {\r\n        mFoundTQPIDS        = false\r\n        mFoundMS2PIDS       = false\r\n        mTorquePID          = -1\r\n        mEngineRPMPID       = -1\r\n        mMS2PID             = -1\r\n        mGearPID            = -1\r\n        mVelocityPID        = -1\r\n        mTireCircumference  = ConfigSettings.TIRE_DIAMETER.toFloat() * 3.14f\r\n    }\r\n\r\n    private fun findHPPIDS() {\r\n        when(mMode) {\r\n            UDSLoggingMode.MODE_22 -> findHPPIDS22()\r\n            UDSLoggingMode.MODE_3E -> findHPPIDS3E()\r\n        }\r\n    }\r\n\r\n    private fun findHPPIDS22() {\r\n        PIDs.list22?.let { list ->\r\n            for (x in 0 until list.count()) {\r\n                //Look for torque PID\r\n                if (list[x]?.address == 0x437C.toLong()) {\r\n                    mTorquePID = x\r\n                }\r\n\r\n                //Look for rpm PID\r\n                if (list[x]?.address == 0xf40C.toLong()) {\r\n                    mEngineRPMPID = x\r\n                }\r\n            }\r\n            //pid we find the PIDs required?\r\n            if (mEngineRPMPID != -1 && mTorquePID != -1)\r\n                mFoundTQPIDS = true\r\n        }\r\n    }\r\n\r\n    private fun findHPPIDS3E() {\r\n        PIDs.list3E?.let { list ->\r\n            for (x in 0 until list.count()) {\r\n                //Look for torque PID\r\n                if (list[x]?.address == 0xd0015344) {\r\n                    mTorquePID = x\r\n                }\r\n                //Look for rpm PID\r\n                if (list[x]?.address == 0xd0012400) {\r\n                    mEngineRPMPID = x\r\n                }\r\n\r\n                //Look for MS2 PID\r\n                if (list[x]?.address == 0xd00141ba) {\r\n                    mMS2PID = x\r\n                }\r\n\r\n                //Look for Gear PID\r\n                if (list[x]?.address == 0xd000f39a) {\r\n                    mGearPID = x\r\n                }\r\n\r\n                //Look for Velocity PID\r\n                if (list[x]?.address == 0xd00155b6) {\r\n                    mVelocityPID = x\r\n                }\r\n            }\r\n        }\r\n        //pid we find the PIDs required?\r\n        if(mEngineRPMPID != -1 && mMS2PID != -1 && mGearPID != -1 && mVelocityPID != -1)\r\n            mFoundMS2PIDS = true\r\n\r\n        if(mEngineRPMPID != -1 && mTorquePID != -1)\r\n            mFoundTQPIDS = true\r\n    }\r\n\r\n    private fun frameCount22(): Int {\r\n        return ((mAddressArray22.count() - 1) / 16) + 1\r\n    }\r\n\r\n    private fun frameCount3E(): Int {\r\n        return (mAddressArray3E.count() / 0x8F) + 2\r\n    }\r\n\r\n    private fun frameCountDSG(): Int {\r\n        return ((mAddressArrayDSG.count() - 1) / 16) + 1\r\n    }\r\n\r\n    private fun buildEnabledArray(mode: UDSLoggingMode = getMode(), DSG: Boolean = false): ByteArray {\r\n        val pidList = if(DSG) PIDs.listDSG\r\n        else PIDs.getList()\r\n\r\n        pidList?.let { list ->\r\n            //build list of addresses that are enabled\r\n            var enabledArray: ByteArray = byteArrayOf()\r\n            for (i in 0 until list.count()) {\r\n                val pid: PIDStruct? = list[i]\r\n                pid?.let {\r\n                    if (it.enabled) {\r\n                        enabledArray += i.toByte()\r\n                    }\r\n                }\r\n            }\r\n\r\n            return enabledArray\r\n        }\r\n\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun buildEnabledArrayDSG(): ByteArray {\r\n        return buildEnabledArray(UDSLoggingMode.MODE_22, true)\r\n    }\r\n\r\n    private fun buildAddress22(): ByteArray {\r\n        PIDs.list22?.let { list ->\r\n            //build list of addresses that are enabled\r\n            var addressArray: ByteArray = byteArrayOf()\r\n            for (i in 0 until mEnabledArray22.count()) {\r\n                val pid: PIDStruct? = list[mEnabledArray22[i].toInt()]\r\n                pid?.let {\r\n                    if (it.enabled && it.address != UDSLoggingMode.MODE_22.addressMax) {\r\n                        addressArray += it.address.toArray2()\r\n                    }\r\n                }\r\n            }\r\n\r\n            return addressArray\r\n        }\r\n\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun buildAddress3E(): ByteArray {\r\n        PIDs.list3E?.let { list ->\r\n            //build list of addresses that are enabled\r\n            var addressArray: ByteArray = byteArrayOf()\r\n            for (i in 0 until mEnabledArray3E.count()) {\r\n                val pid: PIDStruct? = list[mEnabledArray3E[i].toInt()]\r\n                pid?.let {\r\n                    if (it.enabled && it.address != UDSLoggingMode.MODE_3E.addressMax) {\r\n                        addressArray += (it.length and 0xFF).toByte()\r\n                        addressArray += it.address.toArray4()\r\n                    }\r\n                }\r\n            }\r\n            addressArray += 0\r\n\r\n            return addressArray\r\n        }\r\n\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun buildAddressDSG(): ByteArray {\r\n        PIDs.listDSG?.let { list ->\r\n            //build list of addresses that are enabled\r\n            var addressArray: ByteArray = byteArrayOf()\r\n            for (i in 0 until mEnabledArrayDSG.count()) {\r\n                val pid: PIDStruct? = list[mEnabledArrayDSG[i].toInt()]\r\n                pid?.let {\r\n                    if (it.enabled && it.address != UDSLoggingMode.MODE_22.addressMax) {\r\n                        addressArray += it.address.toArray2()\r\n                    }\r\n                }\r\n            }\r\n\r\n            return addressArray\r\n        }\r\n\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun getMode22Buffer(index: Int, input: ByteArray?): ByteArray? {\r\n        var output: ByteArray? = null\r\n        input?.let {\r\n            //add pids to buffer\r\n            val startIndex =\r\n                if (index * 16 > input.count()) input.count()\r\n                else index * 16\r\n            val endIndex =\r\n                if (startIndex + 16 > input.count()) input.count()\r\n                else startIndex + 16\r\n\r\n            output = byteArrayOf(0x22.toByte()) + input.copyOfRange(startIndex, endIndex)\r\n        }\r\n\r\n        return output\r\n    }\r\n\r\n    private fun buildFrame22(index: Int): ByteArray {\r\n        if(index == 0) {\r\n            mEnabledArray22 = buildEnabledArray()\r\n            mAddressArray22 = buildAddress22()\r\n            resetHPPIDS()\r\n            findHPPIDS()\r\n            if(mLogDSG) {\r\n                mEnabledArrayDSG = buildEnabledArrayDSG()\r\n                mAddressArrayDSG = buildAddressDSG()\r\n            }\r\n        }\r\n\r\n        //get frame counts\r\n        val frameCount22    = frameCount22()\r\n        val frameCountDSG   = frameCountDSG()\r\n        val frameCount = if(mLogDSG) frameCount22 + frameCountDSG\r\n        else frameCount22\r\n\r\n        //find and send frame\r\n        if (index in 0 until frameCount) {\r\n            //Build header\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 1\r\n            bleHeader.cmdFlags = when (index) {\r\n                0 -> BLECommandFlags.PER_ADD.value or BLECommandFlags.PER_CLEAR.value\r\n                frameCount - 1 -> BLECommandFlags.PER_ADD.value or BLECommandFlags.PER_ENABLE.value\r\n                else -> BLECommandFlags.PER_ADD.value\r\n            }\r\n\r\n            //Are we sending ECU or DSG?\r\n            var frameType = 0\r\n            var frameIndex = index\r\n            if(mLogDSG && index >= frameCount22) {\r\n                frameIndex = index - frameCount22\r\n                frameType = 1\r\n            }\r\n\r\n            //Get Frame data\r\n            val buff = if(frameType == 0) { //ECU\r\n                getMode22Buffer(frameIndex, mAddressArray22) ?: byteArrayOf()\r\n            } else { //DSG\r\n                bleHeader.rxID = BLE_HEADER_DSG_RX\r\n                bleHeader.txID = BLE_HEADER_DSG_TX\r\n                getMode22Buffer(frameIndex, mAddressArrayDSG) ?: byteArrayOf()\r\n            }\r\n            bleHeader.cmdSize = buff.count()\r\n            val writeBuffer = bleHeader.toByteArray() + buff\r\n\r\n            DebugLog.d(TAG, \"Building 22 frame $frameIndex [Type: $frameType] with length ${writeBuffer.count()}: ${writeBuffer.toHex()}\")\r\n            return writeBuffer\r\n        }\r\n\r\n        DebugLog.d(TAG, \"Building 22 frame $index does not exist\")\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun buildFrame3E(index: Int): ByteArray {\r\n        if(index == 0) {\r\n            mEnabledArray3E = buildEnabledArray()\r\n            mAddressArray3E = buildAddress3E()\r\n            resetHPPIDS()\r\n            findHPPIDS()\r\n            if(mLogDSG) {\r\n                mEnabledArrayDSG = buildEnabledArrayDSG()\r\n                mAddressArrayDSG = buildAddressDSG()\r\n            }\r\n        }\r\n\r\n        //get frame counts\r\n        val frameCount3E    = frameCount3E()\r\n        val frameCountDSG   = frameCountDSG()\r\n        val frameCount = if(mLogDSG) frameCount3E + frameCountDSG\r\n        else frameCount3E\r\n\r\n        //find and send frame\r\n        if (index in 0 until frameCount) {\r\n            //Build header\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 1\r\n            bleHeader.cmdFlags = when {\r\n                index == frameCount - 1 -> BLECommandFlags.PER_ADD.value or BLECommandFlags.PER_ENABLE.value\r\n                index >= frameCount3E - 1 -> BLECommandFlags.PER_ADD.value\r\n                else -> BLECommandFlags.PER_CLEAR.value\r\n            }\r\n\r\n            //Are we sending ECU or DSG?\r\n            var frameType = 0\r\n            var frameIndex = index\r\n            if(mLogDSG && index >= frameCount3E) {\r\n                frameIndex = index - frameCount3E\r\n                frameType = 1\r\n            }\r\n\r\n            //Get Frame data\r\n            val buff = if(frameType == 0) { //ECU\r\n                //Do we even have any PIDs in the range?  If not send persist message\r\n                if (index * 0x8F >= mAddressArray3E.count()) {\r\n                    var writeBuffer: ByteArray = byteArrayOf()\r\n                    if(index == frameCount3E - 1) {\r\n                        writeBuffer = byteArrayOf(\r\n                            0x3e.toByte(),\r\n                            0x33.toByte(),\r\n                            0xb0.toByte(),\r\n                            0x01.toByte(),\r\n                            0xe7.toByte(),\r\n                            0x00.toByte()\r\n                        )\r\n\r\n                        mLastFrameSize = -1\r\n                    }\r\n\r\n                    mLastFrameSize = -1\r\n                    writeBuffer\r\n                } else {\r\n                    //constrain copy range or we will receive an exception\r\n                    val endOfArray = if ((1 + index) * 0x8F > mAddressArray3E.count()) {\r\n                        mAddressArray3E.count()\r\n                    } else {\r\n                        (1 + index) * 0x8F\r\n                    }\r\n                    val selectArray: ByteArray = mAddressArray3E.copyOfRange(index * 0x8F, endOfArray)\r\n                    val memoryOffset = 0xB001E700 + (index * 0x8F)\r\n                    val writeBuffer: ByteArray = byteArrayOf(\r\n                        0x3e.toByte(),\r\n                        0x32.toByte()\r\n                    ) + memoryOffset.toArray4() + selectArray.count().toArray2() + selectArray\r\n\r\n                    mLastFrameSize = selectArray.count()\r\n                    writeBuffer\r\n                }\r\n            } else { //DSG\r\n                bleHeader.rxID = BLE_HEADER_DSG_RX\r\n                bleHeader.txID = BLE_HEADER_DSG_TX\r\n                getMode22Buffer(frameIndex, mAddressArrayDSG) ?: byteArrayOf()\r\n            }\r\n            bleHeader.cmdSize = buff.count()\r\n            val writeBuffer = bleHeader.toByteArray() + buff\r\n\r\n            DebugLog.d(TAG, \"Building 3E frame $frameIndex [Type: $frameType] with length ${writeBuffer.count()}: ${writeBuffer.toHex()}\")\r\n            return writeBuffer\r\n        }\r\n\r\n        DebugLog.d(TAG, \"Building 3E frame $index does not exist\")\r\n        return byteArrayOf()\r\n    }\r\n\r\n    private fun processFrame22(tick: Int, buff: ByteArray?, context: Context): UDSReturn {\r\n        // if the buffer is null abort\r\n        if (buff == null) {\r\n            return UDSReturn.ERROR_NULL\r\n        }\r\n\r\n        // check to make sure ble header byte matches\r\n        val bleHeader = BLEHeader()\r\n        bleHeader.fromByteArray(buff)\r\n        val bData = buff.copyOfRange(8, buff.size)\r\n        if (!bleHeader.isValid()) {\r\n            return UDSReturn.ERROR_HEADER\r\n        }\r\n\r\n        // does the size of the data match the header?\r\n        if (bData.count() != bleHeader.cmdSize) {\r\n            return UDSReturn.ERROR_CMDSIZE\r\n        }\r\n\r\n        // make sure we received an 'OK' from the ECU\r\n        if (bData[0] != 0x62.toByte()) {\r\n            DebugLog.d(TAG, \"ERROR in response from ECU: \" + bData.toHex())\r\n            return UDSReturn.ERROR_RESPONSE\r\n        }\r\n\r\n        //get frame counts\r\n        val frameCount22 = frameCount22()\r\n        val frameCountDSG = frameCountDSG()\r\n        val frameCount = if(mLogDSG) frameCount22 + frameCountDSG\r\n        else frameCount22\r\n\r\n        //In init state\r\n        if (tick < frameCount) {\r\n            return UDSReturn.OK\r\n        }\r\n\r\n        // process the data in the buffer\r\n        var i = 1\r\n        while (i <= bleHeader.cmdSize - 3) {\r\n            //Find the PID in our ECU/DSG list\r\n            var isDSG = false\r\n            val pidAddress = ((bData[i++] and 0xFF) shl 8) + (bData[i++] and 0xFF).toLong()\r\n            var pid: PIDStruct? = PIDs.getPID(pidAddress)\r\n            if(pid == null && mLogDSG) {\r\n                isDSG = true\r\n                pid = PIDs.getPID(pidAddress, UDSLoggingMode.MODE_22, true)\r\n            }\r\n\r\n            //Set new PID value\r\n            pid?.let {\r\n                if (pid.length == 1) {\r\n                    if (pid.signed) PIDs.setValue(pid, (bData[i++] and 0xFF).toByte().toFloat())\r\n                    else PIDs.setValue(pid, (bData[i++] and 0xFF).toFloat())\r\n                } else {\r\n                    var d1 = bData[i++]\r\n                    var d2 = bData[i++]\r\n                    if(isDSG) {\r\n                        val d3 = d1\r\n                        d1 = d2\r\n                        d2 = d3\r\n                    }\r\n\r\n                    if (pid.signed) PIDs.setValue(pid, (((d1 and 0xFF) shl 8) + (d2 and 0xFF)).toShort().toFloat())\r\n                    else PIDs.setValue(pid, (((d1 and 0xFF) shl 8) + (d2 and 0xFF)).toFloat())\r\n                }\r\n            } ?: run {\r\n                DebugLog.d(TAG, \"PID Address not found: $pidAddress\")\r\n                return UDSReturn.ERROR_UNKNOWN\r\n            }\r\n        }\r\n\r\n        //Update Log once all pids have been updated\r\n        if (tick % frameCount22 == 0) {\r\n            //Calculate HP and tq PIDS?\r\n            calcTQ()\r\n            calcHP()\r\n\r\n            //Check and process non-addressable PIDS\r\n            PIDs.list22?.let { list ->\r\n                for (x in 0 until mEnabledArray22.count()) {\r\n                    //Is this a real address?\r\n                    list[x]?.let { pid ->\r\n                        if (pid.address == UDSLoggingMode.MODE_22.addressMax) {\r\n                            PIDs.setValue(pid, 0f)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(mLogDSG) {\r\n                //Check and process non-addressable PIDS\r\n                PIDs.listDSG?.let { list ->\r\n                    for (x in 0 until mEnabledArrayDSG.count()) {\r\n                        //Is this a real address?\r\n                        list[x]?.let { pid ->\r\n                            if (pid.address == UDSLoggingMode.MODE_22.addressMax) {\r\n                                PIDs.setValue(pid, 0f)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Update PID data\r\n            PIDs.updateData()\r\n            if(mLogDSG)\r\n                PIDs.updateDSGData()\r\n\r\n            //don't log until stream is constant\r\n            if(tick < 50)\r\n                return UDSReturn.OK\r\n\r\n            //Check if we need to write to log\r\n            return writeToLog(bleHeader.tickCount, context)\r\n        }\r\n\r\n        return UDSReturn.OK\r\n    }\r\n\r\n    private fun processFrame3E(tick: Int, buff: ByteArray?, context: Context): UDSReturn {\r\n        PIDs.getList()?.let { list ->\r\n            // if the buffer is null abort\r\n            if (buff == null) {\r\n                return UDSReturn.ERROR_NULL\r\n            }\r\n\r\n            // check to make sure ble header byte matches\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.fromByteArray(buff)\r\n            val bData = buff.copyOfRange(8, buff.size)\r\n            if (!bleHeader.isValid()) {\r\n                return UDSReturn.ERROR_HEADER\r\n            }\r\n\r\n            // does the size of the data match the header?\r\n            if (bData.count() != bleHeader.cmdSize) {\r\n                return UDSReturn.ERROR_CMDSIZE\r\n            }\r\n\r\n            // make sure we received an 'OK' from the ECU\r\n            if (bData[0] != 0x62.toByte() && (bData.count() < 3 || bData[0] != 0x7e.toByte())) {\r\n                DebugLog.d(TAG, \"ERROR in response from ECU: \" + bData.toHex())\r\n                return UDSReturn.ERROR_RESPONSE\r\n            }\r\n\r\n            //get frame counts\r\n            val frameCount3E    = frameCount3E()\r\n            val frameCountDSG   = frameCountDSG()\r\n            val frameCount = if(mLogDSG) frameCount3E + frameCountDSG\r\n            else frameCount3E\r\n\r\n            // make sure we received an 'OK' from the ECU while initiating\r\n            if(tick < frameCount3E-1) {\r\n                if(bData[1] != 0x00.toByte() || bData[2] != (mLastFrameSize and 0xFF).toByte())\r\n                    return UDSReturn.ERROR_RESPONSE\r\n\r\n                return UDSReturn.OK\r\n            } else if(tick < frameCount) {\r\n                return UDSReturn.OK\r\n            }\r\n\r\n            var isDSGFrame = false\r\n            if(mLogDSG && bData[0] == 0x62.toByte()) {\r\n                isDSGFrame = true\r\n                // process the data in the buffer\r\n                var i = 1\r\n                while (i <= bleHeader.cmdSize - 3) {\r\n                    //Find the PID in our ECU/DSG list\r\n                    val pidAddress = ((bData[i++] and 0xFF) shl 8) + (bData[i++] and 0xFF).toLong()\r\n                    val pid: PIDStruct? = PIDs.getPID(pidAddress, UDSLoggingMode.MODE_22, true)\r\n\r\n                    //Set new PID value\r\n                    pid?.let {\r\n                        if (pid.length == 1) {\r\n                            if (pid.signed) PIDs.setValue(pid, (bData[i++] and 0xFF).toByte().toFloat())\r\n                            else PIDs.setValue(pid, (bData[i++] and 0xFF).toFloat())\r\n                        } else {\r\n                            val d2 = bData[i++]\r\n                            val d1 = bData[i++]\r\n\r\n                            if (pid.signed) PIDs.setValue(pid, (((d1 and 0xFF) shl 8) + (d2 and 0xFF)).toShort().toFloat())\r\n                            else PIDs.setValue(pid, (((d1 and 0xFF) shl 8) + (d2 and 0xFF)).toFloat())\r\n                        }\r\n                    } ?: run {\r\n                        DebugLog.d(TAG, \"PID Address not found: $pidAddress\")\r\n                        return UDSReturn.ERROR_UNKNOWN\r\n                    }\r\n                }\r\n            } else {\r\n                //Update PID Values\r\n                var dPos = 1\r\n                for (i in 0 until mEnabledArray3E.count()) {\r\n                    val pid = list[mEnabledArray3E[i].toInt()]!!\r\n                    try {\r\n                        //Is this a real address?\r\n                        if (pid.address == UDSLoggingMode.MODE_3E.addressMax) {\r\n                            PIDs.setValue(pid, 0f)\r\n                        } else {\r\n                            //make sure we are in range, if not report error\r\n                            if (dPos + pid.length > bData.count()) {\r\n                                return UDSReturn.ERROR_UNKNOWN\r\n                            }\r\n\r\n                            //Build the value in little endian\r\n                            var newValue: Int = bData[dPos + pid.length - 1] and 0xFF\r\n                            for (d in 1 until pid.length) {\r\n                                newValue = newValue shl 8\r\n                                newValue += bData[dPos + pid.length - d - 1] and 0xFF\r\n                            }\r\n                            dPos += pid.length\r\n\r\n                            //set pid values\r\n                            if (pid.signed) {\r\n                                when (pid.length) {\r\n                                    1 -> PIDs.setValue(pid, newValue.toByte().toFloat())\r\n                                    2 -> PIDs.setValue(pid, newValue.toShort().toFloat())\r\n                                    4 -> PIDs.setValue(pid, newValue.toFloat())\r\n                                }\r\n                            } else {\r\n                                when (pid.length) {\r\n                                    1 -> PIDs.setValue(pid, newValue.toFloat())\r\n                                    2 -> PIDs.setValue(pid, newValue.toFloat())\r\n                                    4 -> PIDs.setValue(pid, Float.fromBits(newValue))\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        return UDSReturn.ERROR_UNKNOWN\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Update Log once all pids have been updated\r\n            if (!isDSGFrame) {\r\n                //Calculate HP and tq PIDS?\r\n                calcTQ()\r\n                calcHP()\r\n\r\n                if(mLogDSG) {\r\n                    //Check and process non-addressable PIDS\r\n                    PIDs.listDSG?.let { dsgList ->\r\n                        for (x in 0 until mEnabledArrayDSG.count()) {\r\n                            //Is this a real address?\r\n                            dsgList[x]?.let { pid ->\r\n                                if (pid.address == UDSLoggingMode.MODE_22.addressMax) {\r\n                                    PIDs.setValue(pid, 0f)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Update PID data\r\n                PIDs.updateData()\r\n                if (mLogDSG)\r\n                    PIDs.updateDSGData()\r\n\r\n                //don't log until stream is constant\r\n                if(tick < 50)\r\n                    return UDSReturn.OK\r\n\r\n                //Check if we need to write to log\r\n                return writeToLog(bleHeader.tickCount, context)\r\n            }\r\n\r\n            return UDSReturn.OK\r\n        }\r\n\r\n        return UDSReturn.ERROR_NULL\r\n    }\r\n\r\n    private fun writeToLog(tick: Int, context: Context): UDSReturn {\r\n        PIDs.getList()?.let { list ->\r\n            val dEnable = list[list.count() - 1]\r\n            if ((!ConfigSettings.INVERT_CRUISE.toBoolean() && dEnable?.value != 0.0f) ||\r\n                (ConfigSettings.INVERT_CRUISE.toBoolean() && dEnable?.value == 0.0f)\r\n            ) {\r\n                //If we were not enabled before we must open a log to start writing\r\n                if (!mLastEnabled) {\r\n                    val currentDateTime = LocalDateTime.now()\r\n                    LogFile.create(\r\n                        \"${ConfigSettings.LOG_NAME}-${\r\n                            currentDateTime.format(\r\n                                DateTimeFormatter.ofPattern(\"yyyy_MM_dd-HH_mm_ss\")\r\n                            )\r\n                        }.csv\", ConfigSettings.LOG_SUB_FOLDER.toString(), context\r\n                    )\r\n\r\n                    //Add time its required\r\n                    var strItems: String = \"Time\"\r\n\r\n                    //Add PIDs including units\r\n                    for (x in 0 until list.count()) {\r\n                        if(x != list.count()-1) strItems += \",${list[x]?.name} (${list[x]?.unit})\"\r\n                            else strItems += \",$mRevision\"\r\n                    }\r\n\r\n                    //Add DSG PIDs including units\r\n                    if(mLogDSG) {\r\n                        PIDs.listDSG?.let { dsgList ->\r\n                            for (x in 0 until dsgList.count()) {\r\n                                strItems += \",${dsgList[x]?.name} (${dsgList[x]?.unit})\"\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //Send it\r\n                    LogFile.addLine(strItems)\r\n                }\r\n                mLastEnabled = true\r\n\r\n                //Write new values to log\r\n                var strItems: String = (tick.toFloat() / 1000.0f).toString()\r\n                for (x in 0 until list.count()) {\r\n                    strItems += \",${list[x]?.value}\"\r\n                }\r\n\r\n                //Add DSG PIDs including units\r\n                if(mLogDSG) {\r\n                    PIDs.listDSG?.let { dsgList ->\r\n                        for (x in 0 until dsgList.count()) {\r\n                            strItems += \",${dsgList[x]?.value}\"\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Send it\r\n                LogFile.addLine(strItems)\r\n            } else {\r\n                if (mLastEnabled) {\r\n                    LogFile.close()\r\n                }\r\n                mLastEnabled = false\r\n            }\r\n\r\n            return UDSReturn.OK\r\n        }\r\n\r\n        return UDSReturn.ERROR_UNKNOWN\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/UDSlog.kt b/app/src/main/java/com/app/simostools/UDSlog.kt
--- a/app/src/main/java/com/app/simostools/UDSlog.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/UDSlog.kt	(date 1639335702978)
@@ -29,7 +29,7 @@
     private var mCalculatedTQ       = 0f
     private var mCalculatedHP       = 0f
     private var mLastFrameSize      = -1
-    private var mRevision           = "SimosTools [R1.4:We don't respond to emails]"
+    private var mRevision           = "SimosTools [R1.6:EQTools?]"
 
     fun clear() {
         LogFile.close()
Index: app/src/main/java/com/app/simostools/LoggingMainFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.graphics.Rect\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport androidx.core.content.ContextCompat.startForegroundService\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.viewpager2.widget.ViewPager2\r\nimport com.google.android.material.tabs.TabLayout\r\nimport com.google.android.material.tabs.TabLayoutMediator\r\nimport android.util.DisplayMetrics\r\n\r\nimport android.view.Display\r\n\r\nimport android.view.WindowManager\r\nimport androidx.core.view.size\r\n\r\nclass LoggingViewModel : ViewModel() {\r\n    var currentTask: UDSTask = UDSTask.NONE\r\n}\r\n\r\nclass LoggingMainFragment : Fragment() {\r\n    private val TAG = \"LoggingMainFragment\"\r\n    private var mTabLayout: TabLayout?                  = null\r\n    private var mViewPager: ViewPager2?                 = null\r\n    private var mViewAdapter: LoggingViewPagerAdapter?  = null\r\n    private var mLastEnabled                            = false\r\n    private var mPackCount: TextView?                   = null\r\n    private lateinit var mViewModel: LoggingViewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        DebugLog.d(TAG, \"onCreateView\")\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_logging_main, container, false)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n\r\n        DebugLog.d(TAG, \"onDestroy\")\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        mViewModel = ViewModelProvider(this).get(LoggingViewModel::class.java)\r\n\r\n        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)\r\n        backButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n\r\n        val quickViewButton = view.findViewById<SwitchButton>(R.id.buttonQuickView)\r\n        quickViewButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                gLogViewerLoadLast = true\r\n                findNavController().navigate(R.id.action_LoggingFragment_to_LogViewer)\r\n            }\r\n\r\n            setOnLongClickListener {\r\n                findNavController().navigate(R.id.action_LoggingFragment_to_CockpitFragment)\r\n\r\n                return@setOnLongClickListener true\r\n            }\r\n        }\r\n\r\n        //Set packet textview\r\n        mPackCount = view.findViewById(R.id.textViewPackCount)\r\n        mPackCount?.setTextColor(ColorList.GAUGE_NORMAL.value)\r\n\r\n        mTabLayout = view.findViewById(R.id.tabLayoutLogging)\r\n        mViewPager = view.findViewById(R.id.viewPagerLogging)\r\n\r\n        mTabLayout?.let { tabs->\r\n            mViewPager?.let { pager ->\r\n                mViewAdapter = LoggingViewPagerAdapter(this)\r\n                mViewAdapter?.let { adapter ->\r\n                    //Add tabs\r\n                    if(PIDs.getTabs().contains(\"Default\"))\r\n                        adapter.add(\"Default\")\r\n                    PIDs.getTabs().toSortedMap().forEach {\r\n                        if(it.key != \"\" && it.key != \"Default\")\r\n                            adapter.add(it.key)\r\n                    }\r\n                    adapter.add(\"ECU\")\r\n                    if(ConfigSettings.LOG_DSG.toBoolean())\r\n                        adapter.add(\"DSG\")\r\n\r\n                    adapter.add(\"Cockpit\")\r\n\r\n                    pager.adapter = adapter\r\n                    TabLayoutMediator(tabs, pager) { tab, position ->\r\n                        tab.text = adapter.getName(position)\r\n                    }.attach()\r\n\r\n                    TabLayoutMediator(tabs, pager) { tab, position ->\r\n                        tab.text = adapter.getName(position)\r\n                    }.attach()\r\n                }\r\n            }\r\n        }\r\n\r\n        DebugLog.d(TAG, \"onViewCreated\")\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n\r\n        mPackCount = null\r\n        mTabLayout = null\r\n        mViewPager = null\r\n\r\n        DebugLog.d(TAG, \"onDestroyView\")\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        val filter = IntentFilter()\r\n        filter.addAction(GUIMessage.READ_LOG.toString())\r\n        filter.addAction(GUIMessage.STATE_CONNECTION.toString())\r\n        filter.addAction(GUIMessage.STATE_TASK.toString())\r\n        activity?.registerReceiver(mBroadcastReceiver, filter)\r\n\r\n        //Set background color\r\n        mTabLayout?.setBackgroundColor(ColorList.BT_BG.value)\r\n        mTabLayout?.setTabTextColors(ColorList.BT_TEXT.value, ColorList.BT_TEXT.value)\r\n        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n\r\n        DebugLog.d(TAG, \"onResume\")\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        activity?.unregisterReceiver(mBroadcastReceiver)\r\n\r\n        DebugLog.d(TAG, \"onPause\")\r\n    }\r\n\r\n    fun doUpdate(readCount: Int, readTime: Long) {\r\n        //Clear stats are startup\r\n        if(readCount < 50) {\r\n            PIDs.resetData()\r\n            if(UDSLogger.getModeDSG())\r\n                PIDs.resetData(true)\r\n        }\r\n\r\n        //Update fps\r\n        val fps = readCount.toFloat() / (readTime.toFloat() / 1000.0f)\r\n        mPackCount?.text = getString(R.string.textview_fps, \"%03.1f\".format(fps))\r\n        if (UDSLogger.isEnabled()) {\r\n            //Highlight packet count in red since we are logging\r\n            if(!mLastEnabled) {\r\n                mPackCount?.setTextColor(ColorList.GAUGE_WARN.value)\r\n            }\r\n        } else {\r\n            //Not logging set packet count to black\r\n            if(mLastEnabled) {\r\n                mPackCount?.setTextColor(ColorList.GAUGE_NORMAL.value)\r\n            }\r\n        }\r\n        mLastEnabled = UDSLogger.isEnabled()\r\n    }\r\n\r\n    private fun sendServiceMessage(type: String) {\r\n        activity?.let {\r\n            val serviceIntent = Intent(it, BTService::class.java)\r\n            serviceIntent.action = type\r\n            startForegroundService(it, serviceIntent)\r\n        }\r\n    }\r\n\r\n    private val mBroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            when (intent.action) {\r\n                GUIMessage.STATE_TASK.toString() -> mViewModel.currentTask =\r\n                    intent.getSerializableExtra(GUIMessage.STATE_TASK.toString()) as UDSTask\r\n                GUIMessage.STATE_CONNECTION.toString() -> {\r\n                    mViewModel.currentTask = UDSTask.NONE\r\n                    sendServiceMessage(BTServiceTask.DO_START_LOG.toString())\r\n                }\r\n                GUIMessage.READ_LOG.toString() -> {\r\n                    val readCount = intent.getIntExtra(\"readCount\", 0)\r\n                    val readTime = intent.getLongExtra(\"readTime\", 0)\r\n                    val readResult = intent.getSerializableExtra(\"readResult\") as UDSReturn\r\n\r\n                    //Make sure we received an ok\r\n                    if (readResult != UDSReturn.OK) {\r\n                        return\r\n                    }\r\n\r\n                    //Update callback\r\n                    doUpdate(readCount, readTime)\r\n                }\r\n                else -> { }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/LoggingMainFragment.kt b/app/src/main/java/com/app/simostools/LoggingMainFragment.kt
--- a/app/src/main/java/com/app/simostools/LoggingMainFragment.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/LoggingMainFragment.kt	(date 1639333565045)
@@ -23,6 +23,7 @@
 import android.view.Display
 
 import android.view.WindowManager
+import android.widget.Toast
 import androidx.core.view.size
 
 class LoggingViewModel : ViewModel() {
@@ -36,6 +37,8 @@
     private var mViewAdapter: LoggingViewPagerAdapter?  = null
     private var mLastEnabled                            = false
     private var mPackCount: TextView?                   = null
+    private var mCanUpdate: Boolean                     = true
+    private var mNextUpdate: Long                       = 0
     private lateinit var mViewModel: LoggingViewModel
 
     override fun onCreateView(
@@ -75,6 +78,7 @@
             setTextColor(ColorList.BT_TEXT.value)
             setOnClickListener {
                 gLogViewerLoadLast = true
+                gLogViewerLoadTab = mViewAdapter?.getName(mTabLayout?.selectedTabPosition?:0)?:"Default"
                 findNavController().navigate(R.id.action_LoggingFragment_to_LogViewer)
             }
 
@@ -107,8 +111,6 @@
                     if(ConfigSettings.LOG_DSG.toBoolean())
                         adapter.add("DSG")
 
-                    adapter.add("Cockpit")
-
                     pager.adapter = adapter
                     TabLayoutMediator(tabs, pager) { tab, position ->
                         tab.text = adapter.getName(position)
@@ -159,7 +161,11 @@
         DebugLog.d(TAG, "onPause")
     }
 
-    fun doUpdate(readCount: Int, readTime: Long) {
+    @Synchronized
+    private fun doUpdate(readCount: Int, readTime: Long) {
+        mCanUpdate = false
+        val frameStartTime = System.currentTimeMillis()
+
         //Clear stats are startup
         if(readCount < 50) {
             PIDs.resetData()
@@ -182,6 +188,11 @@
             }
         }
         mLastEnabled = UDSLogger.isEnabled()
+
+        //calculate wait time for next frame so we don't hang the app
+        val frameTime = (System.currentTimeMillis() - frameStartTime) * 0.5f
+        mNextUpdate = System.currentTimeMillis() + frameTime.toInt()
+        mCanUpdate = true
     }
 
     private fun sendServiceMessage(type: String) {
@@ -212,7 +223,8 @@
                     }
 
                     //Update callback
-                    doUpdate(readCount, readTime)
+                    if(mCanUpdate && System.currentTimeMillis() > mNextUpdate)
+                        doUpdate(readCount, readTime)
                 }
                 else -> { }
             }
Index: app/src/main/java/com/app/simostools/LogViewerFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.content.res.Configuration\r\nimport android.graphics.Color\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.LinearLayout\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport java.io.File\r\nimport java.io.FileInputStream\r\nimport java.lang.Exception\r\nimport java.lang.Math.random\r\n\r\nvar gLogViewerData: Array<LogViewerDataStruct?>?    = null\r\nvar gLogViewerLoadLast: Boolean                     = false\r\n\r\nclass LogViewerViewModel : ViewModel() {\r\n    var fullScreen: Boolean = false\r\n}\r\n\r\ndata class LogViewerDataStruct(var name: String,\r\n                                var tabs: String,\r\n                                var min: Float,\r\n                                var max: Float,\r\n                                var enabled: Boolean,\r\n                                var color: Int,\r\n                                var format: String,\r\n                                var data: FloatArray)\r\n\r\nclass LogViewerFragment: Fragment() {\r\n    private var TAG                     = \"LogViewerFragment\"\r\n    private var mGraph:SwitchGraph?     = null\r\n    private var mButtons:LinearLayout?  = null\r\n    private var mPortrait:Boolean       = false\r\n    private var mLoadLast:Boolean       = false\r\n    private lateinit var mViewModel: LogViewerViewModel\r\n\r\n    var resultPickLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n        if (result.resultCode == Activity.RESULT_OK) {\r\n            val uri: Uri? = result.data?.data\r\n            uri?.let {\r\n                loadLogViewerCSV(uri)\r\n                Toast.makeText(activity, \"Success\", Toast.LENGTH_SHORT).show()\r\n            }?: Toast.makeText(activity, \"Failed\", Toast.LENGTH_SHORT).show()\r\n        } else {\r\n            Toast.makeText(activity, \"Failed\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n\r\n        DebugLog.d(TAG, \"onDestroy\")\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n        return inflater.inflate(R.layout.fragment_log_viewer, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        mViewModel = ViewModelProvider(this).get(LogViewerViewModel::class.java)\r\n\r\n        val drawerButton = view.findViewById<SwitchButton>(R.id.buttonButtonDrawer)\r\n        drawerButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                mButtons?.let {\r\n                    if (it.isVisible) {\r\n                        it.isVisible = false\r\n                        text = if(mPortrait) getString(R.string.button_arrow_up)\r\n                        else getString(R.string.button_arrow_left)\r\n                    } else {\r\n                        it.isVisible = true\r\n                        text = if(mPortrait) getString(R.string.button_arrow_down)\r\n                        else getString(R.string.button_arrow_right)\r\n                    }\r\n\r\n                    mViewModel.fullScreen = !it.isVisible\r\n                }\r\n            }\r\n        }\r\n\r\n        val setEnabledButton = view.findViewById<SwitchButton>(R.id.buttonSetPIDS)\r\n        setEnabledButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                gLogViewerData?.let {\r\n                    findNavController().navigate(R.id.action_LogViewerFragment_to_LogViewerEnabledFragment)\r\n                }\r\n            }\r\n        }\r\n\r\n        val setTabsButton = view.findViewById<SwitchButton>(R.id.buttonSetTabs)\r\n        setTabsButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                gLogViewerData?.let {\r\n                    findNavController().navigate(R.id.action_LogViewerFragment_to_LogViewerTabsFragment)\r\n                }\r\n            }\r\n        }\r\n\r\n        val loadButton = view.findViewById<SwitchButton>(R.id.buttonLoad)\r\n        loadButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                var chooseFile = Intent(Intent.ACTION_GET_CONTENT).apply {\r\n                    addCategory(Intent.CATEGORY_OPENABLE)\r\n                    type = \"text/*\"\r\n                }\r\n                chooseFile = Intent.createChooser(chooseFile, \"Choose a CSV\")\r\n                resultPickLauncher.launch(chooseFile)\r\n            }\r\n\r\n            setOnLongClickListener {\r\n                loadLastFile()\r\n\r\n                return@setOnLongClickListener true\r\n            }\r\n        }\r\n\r\n        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)\r\n        backButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n\r\n        mButtons = view.findViewById(R.id.layoutButtons)\r\n        mButtons?.isVisible = !mViewModel.fullScreen\r\n\r\n        mGraph = view.findViewById(R.id.switchGraph)\r\n        mGraph?.setData(gLogViewerData)\r\n        mGraph?.setTextBGColor(ColorList.BG_NORMAL.value)\r\n        checkOrientation()\r\n\r\n        if(gLogViewerLoadLast) {\r\n            loadLastFile()\r\n        }\r\n\r\n        DebugLog.d(TAG, \"onViewCreated\")\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n\r\n        DebugLog.d(TAG, \"onDestroyView\")\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = ConfigSettings.KEEP_SCREEN_ON.toBoolean()\r\n\r\n        //Set background color\r\n        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n\r\n        DebugLog.d(TAG, \"onResume\")\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = false\r\n\r\n        DebugLog.d(TAG, \"onPause\")\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n\r\n        DebugLog.d(TAG, \"onStart\")\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n\r\n        DebugLog.d(TAG, \"onStop\")\r\n    }\r\n\r\n    private fun loadLastFile() {\r\n        if(LogFile.getLastUri() != null) loadLogViewerCSV(LogFile.getLastUri())\r\n        else loadLogViewerCSV(LogFile.getLastFile())\r\n\r\n        mGraph?.invalidate()\r\n    }\r\n\r\n    private fun checkOrientation() {\r\n        //check orientation and type\r\n        var currentOrientation = resources.configuration.orientation\r\n\r\n        if (ConfigSettings.ALWAYS_PORTRAIT.toBoolean())\r\n            currentOrientation = Configuration.ORIENTATION_PORTRAIT\r\n\r\n        when(currentOrientation) {\r\n            Configuration.ORIENTATION_LANDSCAPE -> {\r\n                mGraph?.setTextPerLine(3)\r\n                mPortrait = false\r\n            }\r\n            Configuration.ORIENTATION_PORTRAIT -> {\r\n                mGraph?.setTextPerLine(2)\r\n                mPortrait = true\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun loadLogViewerCSV(csvFile: File?) {\r\n        csvFile?.let {\r\n            if (!csvFile.exists())\r\n                return\r\n\r\n            val inputStream = FileInputStream(csvFile)\r\n            var fileData = inputStream.readBytes()\r\n            inputStream.close()\r\n\r\n            if(fileData.count() > MAX_LOG_SIZE)\r\n                fileData = fileData.copyOfRange(0, MAX_LOG_SIZE)\r\n\r\n            loadLogViewerCSV(String(fileData))\r\n        }\r\n    }\r\n\r\n    private fun loadLogViewerCSV(uri: Uri?) {\r\n        uri?.let {\r\n            val inputStream = activity?.contentResolver?.openInputStream(uri)\r\n            var fileData = inputStream?.readBytes() ?: byteArrayOf()\r\n            inputStream?.close()\r\n\r\n            if (fileData.count() > MAX_LOG_SIZE)\r\n                fileData = fileData.copyOfRange(0, MAX_LOG_SIZE)\r\n\r\n            loadLogViewerCSV(String(fileData))\r\n        }\r\n    }\r\n\r\n    private fun loadLogViewerCSV(data: String?) {\r\n        var fileData = data ?: \"\"\r\n        var readHeader = false\r\n        var readFirst = false\r\n        do {\r\n            //get data line by line\r\n            var dataLine = fileData.substringBefore(\"\\n\", \"\")\r\n            fileData = fileData.substringAfter(\"\\n\", \"\")\r\n\r\n            //get items from the current line\r\n            var lineItems: Array<String> = arrayOf()\r\n            do {\r\n                val lineItem = dataLine.substringBefore(\",\", \"\")\r\n                dataLine = dataLine.substringAfter(\",\", \"\")\r\n                if(lineItem.isNotEmpty())\r\n                    lineItems += lineItem\r\n            } while (dataLine.isNotEmpty())\r\n\r\n            //Are we reading the header?\r\n            if(!readHeader) {\r\n                readHeader = true\r\n                gLogViewerData = null\r\n\r\n                gLogViewerData = arrayOfNulls(lineItems.count())\r\n                gLogViewerData?.let { logViewerData ->\r\n                    for (i in 0 until lineItems.count()) {\r\n                        val r = (random() * 255).toFloat()\r\n                        val g = (random() * 255).toFloat()\r\n                        val b = (random() * 255).toFloat()\r\n                        var foundPID = false\r\n                        logViewerData[i] = LogViewerDataStruct(lineItems[i], \"\", 0f, 0f, false, Color.rgb(r, g, b), \"%01.1f\", floatArrayOf())\r\n                        PIDs.getList()?.let { pidList ->\r\n                            pidList.forEach { pid ->\r\n                                if(!foundPID) {\r\n                                    pid?.let {\r\n                                        if (lineItems[i].contains(pid.name) && lineItems[i].substringBefore(pid.name) == \"\") {\r\n                                            logViewerData[i]?.min = pid.progMin\r\n                                            logViewerData[i]?.max = pid.progMax\r\n                                            logViewerData[i]?.enabled = true\r\n                                            logViewerData[i]?.tabs = pid.tabs\r\n                                            logViewerData[i]?.format = pid.format\r\n                                            foundPID = true\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        //Look through dsg list\r\n                        if(!foundPID) {\r\n                            PIDs.listDSG?.let { pidList ->\r\n                                pidList.forEach { pid ->\r\n                                    if(!foundPID) {\r\n                                        pid?.let {\r\n                                            if (lineItems[i].contains(pid.name)) {\r\n                                                logViewerData[i]?.min = pid.progMin\r\n                                                logViewerData[i]?.max = pid.progMax\r\n                                                logViewerData[i]?.enabled = true\r\n                                                logViewerData[i]?.tabs = \"DSG\"\r\n                                                logViewerData[i]?.format = pid.format\r\n                                                foundPID = true\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        DebugLog.d(TAG, \"Data item: ${lineItems[i]}\")\r\n                    }\r\n                }\r\n            } else {\r\n                //Read data\r\n                gLogViewerData?.let { pidList ->\r\n                    for (i in 0 until lineItems.count()) {\r\n                        if (pidList.count() > i) {\r\n                            val newValue = try {\r\n                                lineItems[i].toFloat()\r\n                            } catch (e: Exception) {\r\n                                0f\r\n                            }\r\n\r\n                            val pidItem = pidList[i]\r\n                            pidItem?.let {\r\n                                it.data = it.data.plus(newValue)\r\n\r\n                                if (!it.enabled) {\r\n                                    if (!readFirst) {\r\n                                        it.min = newValue\r\n                                        it.max = newValue\r\n                                    } else {\r\n                                        if (newValue > it.max)\r\n                                            it.max = newValue\r\n\r\n                                        if (newValue < it.min)\r\n                                            it.min = newValue\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                readFirst = true\r\n            }\r\n        } while(fileData.isNotEmpty())\r\n\r\n        gLogViewerData?.let { logViewerData ->\r\n            logViewerData.forEach {\r\n                it?.enabled = (it?.tabs?.contains(\"Default\")?:false)\r\n            }\r\n        }\r\n\r\n        mGraph?.setData(gLogViewerData)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/LogViewerFragment.kt b/app/src/main/java/com/app/simostools/LogViewerFragment.kt
--- a/app/src/main/java/com/app/simostools/LogViewerFragment.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/LogViewerFragment.kt	(date 1639333461582)
@@ -24,6 +24,7 @@
 
 var gLogViewerData: Array<LogViewerDataStruct?>?    = null
 var gLogViewerLoadLast: Boolean                     = false
+var gLogViewerLoadTab: String                       = "Default"
 
 class LogViewerViewModel : ViewModel() {
     var fullScreen: Boolean = false
@@ -39,11 +40,15 @@
                                 var data: FloatArray)
 
 class LogViewerFragment: Fragment() {
-    private var TAG                     = "LogViewerFragment"
-    private var mGraph:SwitchGraph?     = null
-    private var mButtons:LinearLayout?  = null
-    private var mPortrait:Boolean       = false
-    private var mLoadLast:Boolean       = false
+    private var TAG                             = "LogViewerFragment"
+    private var mGraph:SwitchGraph?             = null
+    private var mDrawerButton:SwitchButton?     = null
+    private var mSetEnableButton:SwitchButton?  = null
+    private var mSetTabsButton:SwitchButton?    = null
+    private var mLoadCSVButton:SwitchButton?    = null
+    private var mBackButton:SwitchButton?       = null
+    private var mButtons:LinearLayout?          = null
+    private var mPortrait:Boolean               = false
     private lateinit var mViewModel: LogViewerViewModel
 
     var resultPickLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
@@ -51,10 +56,7 @@
             val uri: Uri? = result.data?.data
             uri?.let {
                 loadLogViewerCSV(uri)
-                Toast.makeText(activity, "Success", Toast.LENGTH_SHORT).show()
-            }?: Toast.makeText(activity, "Failed", Toast.LENGTH_SHORT).show()
-        } else {
-            Toast.makeText(activity, "Failed", Toast.LENGTH_SHORT).show()
+            }
         }
     }
 
@@ -74,33 +76,39 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-
         mViewModel = ViewModelProvider(this).get(LogViewerViewModel::class.java)
 
-        val drawerButton = view.findViewById<SwitchButton>(R.id.buttonButtonDrawer)
-        drawerButton.apply {
+        mDrawerButton = view.findViewById(R.id.buttonButtonDrawer)
+        mDrawerButton?.apply {
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
+            if(gLogViewerLoadLast)
+                text = getString(R.string.button_back)
             setOnClickListener {
-                mButtons?.let {
-                    if (it.isVisible) {
-                        it.isVisible = false
-                        text = if(mPortrait) getString(R.string.button_arrow_up)
-                        else getString(R.string.button_arrow_left)
-                    } else {
-                        it.isVisible = true
-                        text = if(mPortrait) getString(R.string.button_arrow_down)
-                        else getString(R.string.button_arrow_right)
-                    }
+                if(gLogViewerLoadLast) {
+                    findNavController().navigateUp()
+                } else {
+                    mButtons?.let {
+                        if (it.isVisible) {
+                            it.isVisible = false
+                            text = if (mPortrait) getString(R.string.button_arrow_up)
+                            else getString(R.string.button_arrow_left)
+                        } else {
+                            it.isVisible = true
+                            text = if (mPortrait) getString(R.string.button_arrow_down)
+                            else getString(R.string.button_arrow_right)
+                        }
 
-                    mViewModel.fullScreen = !it.isVisible
+                        mViewModel.fullScreen = !it.isVisible
+                    }
                 }
             }
         }
 
-        val setEnabledButton = view.findViewById<SwitchButton>(R.id.buttonSetPIDS)
-        setEnabledButton.apply {
+        mSetEnableButton = view.findViewById(R.id.buttonSetPIDS)
+        mSetEnableButton?.apply {
+            isEnabled = gLogViewerData != null
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -111,8 +119,9 @@
             }
         }
 
-        val setTabsButton = view.findViewById<SwitchButton>(R.id.buttonSetTabs)
-        setTabsButton.apply {
+        mSetTabsButton = view.findViewById(R.id.buttonSetTabs)
+        mSetTabsButton?.apply {
+            isEnabled = gLogViewerData != null
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -123,8 +132,8 @@
             }
         }
 
-        val loadButton = view.findViewById<SwitchButton>(R.id.buttonLoad)
-        loadButton.apply {
+        mLoadCSVButton = view.findViewById(R.id.buttonLoad)
+        mLoadCSVButton?.apply {
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -144,8 +153,8 @@
             }
         }
 
-        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)
-        backButton.apply {
+        mBackButton = view.findViewById(R.id.buttonBack)
+        mBackButton?.apply {
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -155,7 +164,8 @@
         }
 
         mButtons = view.findViewById(R.id.layoutButtons)
-        mButtons?.isVisible = !mViewModel.fullScreen
+        if(gLogViewerLoadLast) mButtons?.isVisible = false
+        else mButtons?.isVisible = !mViewModel.fullScreen
 
         mGraph = view.findViewById(R.id.switchGraph)
         mGraph?.setData(gLogViewerData)
@@ -264,22 +274,13 @@
     }
 
     private fun loadLogViewerCSV(data: String?) {
-        var fileData = data ?: ""
+        val fileData = data?.split("\n")?:listOf("")
         var readHeader = false
         var readFirst = false
-        do {
-            //get data line by line
-            var dataLine = fileData.substringBefore("\n", "")
-            fileData = fileData.substringAfter("\n", "")
 
+        fileData.forEach { dataLine ->
             //get items from the current line
-            var lineItems: Array<String> = arrayOf()
-            do {
-                val lineItem = dataLine.substringBefore(",", "")
-                dataLine = dataLine.substringAfter(",", "")
-                if(lineItem.isNotEmpty())
-                    lineItems += lineItem
-            } while (dataLine.isNotEmpty())
+            val lineItems = dataLine.split(",")
 
             //Are we reading the header?
             if(!readHeader) {
@@ -298,7 +299,7 @@
                             pidList.forEach { pid ->
                                 if(!foundPID) {
                                     pid?.let {
-                                        if (lineItems[i].contains(pid.name) && lineItems[i].substringBefore(pid.name) == "") {
+                                        if (lineItems[i] == "${pid.name} (${pid.unit})") {
                                             logViewerData[i]?.min = pid.progMin
                                             logViewerData[i]?.max = pid.progMax
                                             logViewerData[i]?.enabled = true
@@ -365,14 +366,15 @@
                 }
                 readFirst = true
             }
-        } while(fileData.isNotEmpty())
+        }
 
         gLogViewerData?.let { logViewerData ->
             logViewerData.forEach {
-                it?.enabled = (it?.tabs?.contains("Default")?:false)
+                it?.enabled = (it?.tabs?.contains(gLogViewerLoadTab)?:false)
             }
-        }
-
-        mGraph?.setData(gLogViewerData)
+            mGraph?.setData(gLogViewerData)
+            mSetTabsButton?.isEnabled = true
+            mSetEnableButton?.isEnabled = true
+        }
     }
 }
\ No newline at end of file
Index: app/src/main/res/layout-sw600dp-land/fragment_color.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ColorFragment\"\r\n    android:id=\"@+id/ColorLayout\">\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imageViewColor\"\r\n        android:contentDescription=\"@string/app_name\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"150dp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonColorBack\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"128dp\"\r\n        android:text=\"@string/button_back\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/buttonColorSet\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonColorSet\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"128dp\"\r\n        android:text=\"@string/button_set\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/buttonColorBack\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorR\"\r\n        android:contentDescription=\"@string/textview_color_r\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"48dp\"\r\n        android:scaleY=\"5.0\"\r\n        android:scaleX=\"5.0\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorR\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorG\"\r\n        android:contentDescription=\"@string/textview_color_g\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"48dp\"\r\n        android:scaleY=\"5.0\"\r\n        android:scaleX=\"5.0\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorG\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorB\"\r\n        android:contentDescription=\"@string/textview_color_b\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"48dp\"\r\n        android:scaleY=\"5.0\"\r\n        android:scaleX=\"5.0\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorB\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorR\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:text=\"@string/textview_color_r\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/imageViewColor\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorB\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:text=\"@string/textview_color_b\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/seekBarColorG\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorG\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"4dp\"\r\n        android:text=\"@string/textview_color_g\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/seekBarColorR\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp-land/fragment_color.xml b/app/src/main/res/layout-sw600dp-land/fragment_color.xml
--- a/app/src/main/res/layout-sw600dp-land/fragment_color.xml	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/res/layout-sw600dp-land/fragment_color.xml	(date 1639187022425)
@@ -18,7 +18,7 @@
     <com.app.simostools.SwitchButton
         android:id="@+id/buttonColorBack"
         android:layout_width="0dp"
-        android:layout_height="128dp"
+        android:layout_height="96dp"
         android:text="@string/button_back"
         android:textSize="42sp"
         app:layout_constraintBottom_toBottomOf="parent"
@@ -28,7 +28,7 @@
     <com.app.simostools.SwitchButton
         android:id="@+id/buttonColorSet"
         android:layout_width="0dp"
-        android:layout_height="128dp"
+        android:layout_height="96dp"
         android:text="@string/button_set"
         android:textSize="42sp"
         app:layout_constraintBottom_toBottomOf="parent"
@@ -40,38 +40,32 @@
         android:contentDescription="@string/textview_color_r"
         android:layout_width="0dp"
         android:layout_height="48dp"
-        android:scaleY="5.0"
-        android:scaleX="5.0"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/textViewColorR" />
+        app:layout_constraintStart_toEndOf="@+id/textViewColorR"
+        app:layout_constraintBottom_toBottomOf="@+id/textViewColorR" />
 
     <SeekBar
         android:id="@+id/seekBarColorG"
         android:contentDescription="@string/textview_color_g"
         android:layout_width="0dp"
         android:layout_height="48dp"
-        android:scaleY="5.0"
-        android:scaleX="5.0"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/textViewColorG" />
+        app:layout_constraintStart_toEndOf="@+id/textViewColorG"
+        app:layout_constraintBottom_toBottomOf="@+id/textViewColorG" />
 
     <SeekBar
         android:id="@+id/seekBarColorB"
         android:contentDescription="@string/textview_color_b"
         android:layout_width="0dp"
         android:layout_height="48dp"
-        android:scaleY="5.0"
-        android:scaleX="5.0"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/textViewColorB" />
+        app:layout_constraintStart_toEndOf="@+id/textViewColorB"
+        app:layout_constraintBottom_toBottomOf="@+id/textViewColorB" />
 
     <TextView
         android:id="@+id/textViewColorR"
-        android:layout_width="0dp"
-        android:layout_height="wrap_content"
+        android:layout_width="160dp"
+        android:layout_height="48dp"
         android:layout_marginStart="8dp"
         android:text="@string/textview_color_r"
         android:textSize="42sp"
@@ -79,23 +73,23 @@
         app:layout_constraintTop_toBottomOf="@+id/imageViewColor" />
 
     <TextView
-        android:id="@+id/textViewColorB"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
+        android:id="@+id/textViewColorG"
+        android:layout_width="160dp"
+        android:layout_height="48dp"
         android:layout_marginStart="8dp"
-        android:text="@string/textview_color_b"
+        android:text="@string/textview_color_g"
         android:textSize="42sp"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/seekBarColorG" />
+        app:layout_constraintTop_toBottomOf="@+id/textViewColorR" />
 
     <TextView
-        android:id="@+id/textViewColorG"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginStart="4dp"
-        android:text="@string/textview_color_g"
+        android:id="@+id/textViewColorB"
+        android:layout_width="160dp"
+        android:layout_height="48dp"
+        android:layout_marginStart="8dp"
+        android:text="@string/textview_color_b"
         android:textSize="42sp"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/seekBarColorR" />
+        app:layout_constraintTop_toBottomOf="@+id/textViewColorG" />
 
 </androidx.constraintlayout.widget.ConstraintLayout>
Index: app/src/main/res/layout-land/fragment_color.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ColorFragment\"\r\n    android:id=\"@+id/ColorLayout\">\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imageViewColor\"\r\n        android:contentDescription=\"@string/app_name\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"75dp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonColorBack\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"40dp\"\r\n        android:text=\"@string/button_back\"\r\n        android:textSize=\"24sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/buttonColorSet\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonColorSet\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"40dp\"\r\n        android:text=\"@string/button_set\"\r\n        android:textSize=\"24sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/buttonColorBack\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorR\"\r\n        android:contentDescription=\"@string/textview_color_r\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorR\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorG\"\r\n        android:contentDescription=\"@string/textview_color_g\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorG\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorB\"\r\n        android:contentDescription=\"@string/textview_color_b\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorB\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorR\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:text=\"@string/textview_color_r\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/imageViewColor\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorB\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:text=\"@string/textview_color_b\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/seekBarColorG\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorG\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"4dp\"\r\n        android:text=\"@string/textview_color_g\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/seekBarColorR\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-land/fragment_color.xml b/app/src/main/res/layout-land/fragment_color.xml
--- a/app/src/main/res/layout-land/fragment_color.xml	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/res/layout-land/fragment_color.xml	(date 1639187022442)
@@ -39,54 +39,54 @@
         android:id="@+id/seekBarColorR"
         android:contentDescription="@string/textview_color_r"
         android:layout_width="0dp"
-        android:layout_height="wrap_content"
+        android:layout_height="32dp"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/textViewColorR" />
+        app:layout_constraintStart_toEndOf="@+id/textViewColorR"
+        app:layout_constraintBottom_toBottomOf="@+id/textViewColorR" />
 
     <SeekBar
         android:id="@+id/seekBarColorG"
         android:contentDescription="@string/textview_color_g"
         android:layout_width="0dp"
-        android:layout_height="wrap_content"
+        android:layout_height="32dp"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/textViewColorG" />
+        app:layout_constraintStart_toEndOf="@+id/textViewColorG"
+        app:layout_constraintBottom_toBottomOf="@+id/textViewColorG" />
 
     <SeekBar
         android:id="@+id/seekBarColorB"
         android:contentDescription="@string/textview_color_b"
         android:layout_width="0dp"
-        android:layout_height="wrap_content"
+        android:layout_height="32dp"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/textViewColorB" />
+        app:layout_constraintStart_toEndOf="@+id/textViewColorB"
+        app:layout_constraintBottom_toBottomOf="@+id/textViewColorB" />
 
     <TextView
         android:id="@+id/textViewColorR"
-        android:layout_width="0dp"
-        android:layout_height="wrap_content"
+        android:layout_width="160dp"
+        android:layout_height="32dp"
         android:layout_marginStart="8dp"
         android:text="@string/textview_color_r"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/imageViewColor" />
 
+    <TextView
+        android:id="@+id/textViewColorG"
+        android:layout_width="160dp"
+        android:layout_height="32dp"
+        android:layout_marginStart="8dp"
+        android:text="@string/textview_color_g"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/seekBarColorR" />
+
     <TextView
         android:id="@+id/textViewColorB"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
+        android:layout_width="160dp"
+        android:layout_height="32dp"
         android:layout_marginStart="8dp"
         android:text="@string/textview_color_b"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/seekBarColorG" />
 
-    <TextView
-        android:id="@+id/textViewColorG"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginStart="4dp"
-        android:text="@string/textview_color_g"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/seekBarColorR" />
-
 </androidx.constraintlayout.widget.ConstraintLayout>
Index: app/src/main/res/layout-sw600dp/fragment_color.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ColorFragment\"\r\n    android:id=\"@+id/ColorLayout\">\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imageViewColor\"\r\n        android:contentDescription=\"@string/app_name\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"150dp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonColorBack\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"128dp\"\r\n        android:text=\"@string/button_back\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/buttonColorSet\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonColorSet\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"128dp\"\r\n        android:text=\"@string/button_set\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/buttonColorBack\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorR\"\r\n        android:contentDescription=\"@string/textview_color_r\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"48dp\"\r\n        android:scaleY=\"5.0\"\r\n        android:scaleX=\"5.0\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorR\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorG\"\r\n        android:contentDescription=\"@string/textview_color_g\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"48dp\"\r\n        android:scaleY=\"5.0\"\r\n        android:scaleX=\"5.0\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorG\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorB\"\r\n        android:contentDescription=\"@string/textview_color_b\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"48dp\"\r\n        android:scaleY=\"5.0\"\r\n        android:scaleX=\"5.0\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorB\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorR\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:text=\"@string/textview_color_r\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/imageViewColor\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorB\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:text=\"@string/textview_color_b\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/seekBarColorG\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorG\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"4dp\"\r\n        android:text=\"@string/textview_color_g\"\r\n        android:textSize=\"42sp\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/seekBarColorR\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp/fragment_color.xml b/app/src/main/res/layout-sw600dp/fragment_color.xml
--- a/app/src/main/res/layout-sw600dp/fragment_color.xml	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/res/layout-sw600dp/fragment_color.xml	(date 1639187022430)
@@ -18,7 +18,7 @@
     <com.app.simostools.SwitchButton
         android:id="@+id/buttonColorBack"
         android:layout_width="0dp"
-        android:layout_height="128dp"
+        android:layout_height="96dp"
         android:text="@string/button_back"
         android:textSize="42sp"
         app:layout_constraintBottom_toBottomOf="parent"
@@ -28,7 +28,7 @@
     <com.app.simostools.SwitchButton
         android:id="@+id/buttonColorSet"
         android:layout_width="0dp"
-        android:layout_height="128dp"
+        android:layout_height="96dp"
         android:text="@string/button_set"
         android:textSize="42sp"
         app:layout_constraintBottom_toBottomOf="parent"
@@ -40,8 +40,6 @@
         android:contentDescription="@string/textview_color_r"
         android:layout_width="0dp"
         android:layout_height="48dp"
-        android:scaleY="5.0"
-        android:scaleX="5.0"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/textViewColorR" />
@@ -51,8 +49,6 @@
         android:contentDescription="@string/textview_color_g"
         android:layout_width="0dp"
         android:layout_height="48dp"
-        android:scaleY="5.0"
-        android:scaleX="5.0"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/textViewColorG" />
@@ -62,8 +58,6 @@
         android:contentDescription="@string/textview_color_b"
         android:layout_width="0dp"
         android:layout_height="48dp"
-        android:scaleY="5.0"
-        android:scaleX="5.0"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/textViewColorB" />
@@ -79,23 +73,23 @@
         app:layout_constraintTop_toBottomOf="@+id/imageViewColor" />
 
     <TextView
-        android:id="@+id/textViewColorB"
+        android:id="@+id/textViewColorG"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_marginStart="8dp"
-        android:text="@string/textview_color_b"
+        android:text="@string/textview_color_g"
         android:textSize="42sp"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/seekBarColorG" />
+        app:layout_constraintTop_toBottomOf="@+id/seekBarColorR" />
 
     <TextView
-        android:id="@+id/textViewColorG"
+        android:id="@+id/textViewColorB"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_marginStart="4dp"
-        android:text="@string/textview_color_g"
+        android:layout_marginStart="8dp"
+        android:text="@string/textview_color_b"
         android:textSize="42sp"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/seekBarColorR" />
+        app:layout_constraintTop_toBottomOf="@+id/seekBarColorG" />
 
 </androidx.constraintlayout.widget.ConstraintLayout>
Index: app/src/main/res/layout-sw600dp-land/fragment_logging_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".LoggingMainFragment\"\r\n    android:id=\"@+id/LoggingMainLayout\">\r\n\r\n    <com.google.android.material.tabs.TabLayout\r\n        android:id=\"@+id/tabLayoutLogging\"\r\n        android:background=\"@color/colorPrimary\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_height=\"64dp\"\r\n        android:layout_width=\"match_parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:tabMode=\"scrollable\"\r\n        app:tabTextAppearance=\"@style/TabTextLoggingLarge\"/>\r\n\r\n    <androidx.viewpager2.widget.ViewPager2\r\n        android:id=\"@+id/viewPagerLogging\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_marginEnd=\"96dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/tabLayoutLogging\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewPackCount\"\r\n        android:layout_width=\"96dp\"\r\n        android:layout_height=\"48dp\"\r\n        android:textSize=\"28sp\"\r\n        android:text=\"@string/textview_fps_null\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonBack\"\r\n        android:layout_width=\"96dp\"\r\n        android:layout_height=\"0dp\"\r\n        android:text=\"@string/button_back\"\r\n        android:textSize=\"32sp\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/tabLayoutLogging\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/buttonQuickView\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonQuickView\"\r\n        android:layout_width=\"96dp\"\r\n        android:layout_height=\"0dp\"\r\n        android:text=\"@string/button_quick_view\"\r\n        android:textSize=\"32sp\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/textViewPackCount\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/buttonBack\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp-land/fragment_logging_main.xml b/app/src/main/res/layout-sw600dp-land/fragment_logging_main.xml
--- a/app/src/main/res/layout-sw600dp-land/fragment_logging_main.xml	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/res/layout-sw600dp-land/fragment_logging_main.xml	(date 1639180348553)
@@ -32,7 +32,7 @@
     <TextView
         android:id="@+id/textViewPackCount"
         android:layout_width="96dp"
-        android:layout_height="48dp"
+        android:layout_height="64dp"
         android:textSize="28sp"
         android:text="@string/textview_fps_null"
         app:layout_constraintBottom_toBottomOf="parent"
Index: app/src/main/res/layout-sw600dp/fragment_logging_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".LoggingMainFragment\"\r\n    android:id=\"@+id/LoggingMainLayout\">\r\n\r\n    <com.google.android.material.tabs.TabLayout\r\n        android:id=\"@+id/tabLayoutLogging\"\r\n        android:background=\"@color/colorPrimary\"\r\n        android:layout_gravity=\"center_horizontal\"\r\n        android:layout_height=\"64dp\"\r\n        android:layout_width=\"match_parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:tabMode=\"scrollable\"\r\n        app:tabTextAppearance=\"@style/TabTextLoggingLarge\"/>\r\n\r\n    <androidx.viewpager2.widget.ViewPager2\r\n        android:id=\"@+id/viewPagerLogging\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"0dp\"\r\n        android:layout_marginBottom=\"96dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/tabLayoutLogging\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewPackCount\"\r\n        android:layout_width=\"96dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginBottom=\"24dp\"\r\n        android:text=\"@string/textview_fps_null\"\r\n        android:textSize=\"28sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonQuickView\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"96dp\"\r\n        android:text=\"@string/button_quick_view\"\r\n        android:textSize=\"32sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/buttonBack\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/textViewPackCount\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonBack\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"96dp\"\r\n        android:text=\"@string/button_back\"\r\n        android:textSize=\"32sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/buttonQuickView\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp/fragment_logging_main.xml b/app/src/main/res/layout-sw600dp/fragment_logging_main.xml
--- a/app/src/main/res/layout-sw600dp/fragment_logging_main.xml	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/res/layout-sw600dp/fragment_logging_main.xml	(date 1639180348550)
@@ -33,7 +33,7 @@
         android:id="@+id/textViewPackCount"
         android:layout_width="96dp"
         android:layout_height="wrap_content"
-        android:layout_marginBottom="24dp"
+        android:layout_marginBottom="12dp"
         android:text="@string/textview_fps_null"
         android:textSize="28sp"
         app:layout_constraintBottom_toBottomOf="parent"
Index: app/src/main/res/layout-sw600dp/fragment_log_viewer_tabs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp/fragment_log_viewer_tabs.xml b/app/src/main/res/layout-sw600dp/fragment_log_viewer_tabs.xml
new file mode 100644
--- /dev/null	(date 1639323382704)
+++ b/app/src/main/res/layout-sw600dp/fragment_log_viewer_tabs.xml	(date 1639323382704)
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".LogViewerTabsFragment"
+    android:id="@+id/LogViewerTabsLayout">
+
+    <ScrollView
+        android:id="@+id/logviewerLayoutScrollMain"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginBottom="96dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <LinearLayout
+            android:id="@+id/logviewerLayoutScroll"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+
+        </LinearLayout>
+    </ScrollView>
+
+    <LinearLayout
+        android:id="@+id/logviewerEnabledButtons"
+        android:layout_width="match_parent"
+        android:layout_height="96dp"
+        android:orientation="horizontal"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/logviewerLayoutScrollMain">
+
+        <com.app.simostools.SwitchButton
+            android:id="@+id/buttonOk"
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:text="@string/button_ok"
+            android:textSize="24sp" />
+
+        <com.app.simostools.SwitchButton
+            android:id="@+id/buttonBack"
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:text="@string/button_back"
+            android:textSize="24sp" />
+
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:7.0.3'\r\n        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31'\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/build.gradle	(date 1639238425392)
@@ -5,7 +5,7 @@
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:7.0.3'
+        classpath 'com.android.tools.build:gradle:7.0.4'
         classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31'
 
         // NOTE: Do not place your application dependencies here; they belong
Index: app/src/main/res/layout-sw600dp/fragment_log_viewer_enabled.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout-sw600dp/fragment_log_viewer_enabled.xml b/app/src/main/res/layout-sw600dp/fragment_log_viewer_enabled.xml
new file mode 100644
--- /dev/null	(date 1639323299209)
+++ b/app/src/main/res/layout-sw600dp/fragment_log_viewer_enabled.xml	(date 1639323299209)
@@ -0,0 +1,56 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".LogViewerEnabledFragment"
+    android:id="@+id/LogViewerEnabledLayout">
+
+    <ScrollView
+        android:id="@+id/logviewerLayoutScrollMain"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_marginBottom="96dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <LinearLayout
+            android:id="@+id/logviewerLayoutScroll"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+
+        </LinearLayout>
+    </ScrollView>
+
+    <LinearLayout
+        android:id="@+id/logviewerEnabledButtons"
+        android:layout_width="match_parent"
+        android:layout_height="96dp"
+        android:orientation="horizontal"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/logviewerLayoutScrollMain">
+
+        <com.app.simostools.SwitchButton
+            android:id="@+id/buttonOk"
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:text="@string/button_ok"
+            android:textSize="24sp" />
+
+        <com.app.simostools.SwitchButton
+            android:id="@+id/buttonBack"
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:text="@string/button_back"
+            android:textSize="24sp" />
+
+    </LinearLayout>
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/app/simostools/SwitchGraph.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.graphics.*\r\nimport android.util.AttributeSet\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport kotlin.math.sqrt\r\n\r\nclass SwitchGraph: View {\r\n    constructor(context: Context) : super(context) {\r\n    }\r\n    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {\r\n    }\r\n    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {\r\n    }\r\n    private val bgPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style = Paint.Style.FILL\r\n        color = Color.BLACK\r\n    }\r\n    private val linePaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style = Paint.Style.STROKE\r\n        color = Color.RED\r\n        strokeWidth = 5.0f\r\n    }\r\n    private val cursorPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style = Paint.Style.STROKE\r\n        color = Color.WHITE\r\n        strokeWidth = 2.0f\r\n    }\r\n    private val textPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style       = Paint.Style.FILL_AND_STROKE\r\n        color       = Color.WHITE\r\n        strokeWidth = 1.0f\r\n        textSize    = 35.0f\r\n    }\r\n    private val bgTextPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style       = Paint.Style.FILL_AND_STROKE\r\n        color       = Color.WHITE\r\n        strokeWidth = 1.0f\r\n        textSize    = 50.0f\r\n    }\r\n    private var mCurrentWidth                       = 0f\r\n    private var mCurrentHeight                      = 0f\r\n    private var mCursorPosition                     = 0f\r\n    private var mZoomAmount                         = 1f\r\n    private var mZoomingAmount                      = 0f\r\n    private var mZooming                            = false\r\n    private var mZoomingX                           = 0f\r\n    private var mZoomingY                           = 0f\r\n    private var mTextCount                          = 0\r\n    private var mTextHeight                         = 0f\r\n    private var mTextPerLine                        = 2\r\n    private var mData:Array<LogViewerDataStruct?>?  = null\r\n\r\n    fun setData(data:Array<LogViewerDataStruct?>?) {\r\n        mData = data\r\n\r\n        data?.let { dataList ->\r\n            //get text height\r\n            var textHeight = 0\r\n            for (i in 0 until dataList.count()) {\r\n                dataList[i]?.let { data ->\r\n                    if (data.enabled) {\r\n                        textHeight++\r\n                    }\r\n                }\r\n            }\r\n\r\n            mTextCount = textHeight\r\n            mTextHeight = (((mTextCount-1) / mTextPerLine) + 1) * textPaint.textSize\r\n        }\r\n    }\r\n\r\n    fun setTextPerLine(count: Int) {\r\n        mTextPerLine = count\r\n        mTextHeight = (((mTextCount-1) / mTextPerLine) + 1) * textPaint.textSize\r\n    }\r\n\r\n    fun setTextBGColor(color: Int) {\r\n        bgTextPaint.color = color\r\n    }\r\n\r\n    override fun onDraw(canvas: Canvas) {\r\n        //local variable\r\n        val textSplit = mCurrentHeight-mTextHeight\r\n        //draw background\r\n        canvas.drawRect(0f, 0f, mCurrentWidth, textSplit, bgPaint)\r\n\r\n        //draw zoom\r\n        mData?.let { dataList ->\r\n            textPaint.color = Color.WHITE\r\n            canvas.drawText(\r\n                \"Z[$mZoomAmount]\",\r\n                0f,\r\n                textPaint.textSize,\r\n                textPaint\r\n            )\r\n\r\n            //draw line graphs\r\n            for(i in 0 until dataList.count()) {\r\n                val pidItem = dataList[i]\r\n                pidItem?.let {\r\n                    if (pidItem.data.count() > 0 && pidItem.enabled) {\r\n                        linePaint.color = pidItem.color\r\n                        val startX = (1.0f - (mZoomAmount + mZoomingAmount)) * mCursorPosition\r\n                        val startY = textSplit\r\n                        val incrementX = mCurrentWidth / pidItem.data.count() * (mZoomAmount + mZoomingAmount)\r\n                        val incrementY = startY / (pidItem.max - pidItem.min)\r\n                        var lastY = pidItem.data[0] * incrementY\r\n                        for (x in 0 until pidItem.data.count()) {\r\n                            canvas.drawLine(x * incrementX + startX, startY-lastY, (x + 1) * incrementX + startX, startY-(pidItem.data[x] * incrementY), linePaint)\r\n                            lastY = pidItem.data[x] * incrementY\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //draw cursor\r\n            canvas.drawLine(mCursorPosition, mCurrentHeight, mCursorPosition, 0f, cursorPaint)\r\n\r\n            //set bg color\r\n            canvas.drawRect(0f, mCurrentHeight, mCurrentWidth, textSplit, bgTextPaint)\r\n\r\n            //draw text\r\n            var textPosition = 0\r\n            for(i in 0 until dataList.count()) {\r\n                dataList[i]?.let { data ->\r\n                    if(data.enabled) {\r\n                        var xPosition = ((mCursorPosition / mCurrentWidth) * data.data.count()).toInt()\r\n                        if(xPosition >= data.data.count())\r\n                            xPosition = data.data.count()-1\r\n                        if(xPosition < 0)\r\n                            xPosition = 0\r\n                        val xValue = data.data[xPosition]\r\n                        textPaint.color = data.color\r\n                        canvas.drawText(\r\n                            \"${data.name} [${data.format.format(xValue)}]\",\r\n                            (textPosition % mTextPerLine).toFloat() * mCurrentWidth / mTextPerLine,\r\n                            mCurrentHeight - (textPaint.textSize * (textPosition/mTextPerLine)),\r\n                            textPaint\r\n                        )\r\n                        textPosition++\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        super.onDraw(canvas)\r\n    }\r\n\r\n    override fun onSizeChanged(width: Int, height: Int, oldWidth: Int, oldHeight: Int) {\r\n        mCurrentWidth = width.toFloat()\r\n        mCurrentHeight = height.toFloat()\r\n\r\n        invalidate()\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    override fun onTouchEvent(event: MotionEvent?): Boolean {\r\n        event?.let {\r\n            if(it.pointerCount > 1) {\r\n                if(!mZooming) {\r\n                    mZooming = true\r\n                    mZoomingX = it.x\r\n                    mZoomingY = it.y\r\n                } else {\r\n                    when (it.action) {\r\n                        else -> {\r\n                            val zAmount = (it.x-mZoomingX) * 0.005f\r\n                            mZoomingAmount = if(zAmount + mZoomAmount < 1f) 1.0f - mZoomAmount\r\n                            else zAmount\r\n\r\n                            invalidate()\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if(mZooming) {\r\n                    mZooming = false\r\n                    mZoomAmount += mZoomingAmount\r\n                    mZoomingAmount = 0f\r\n                }\r\n                when (it.action) {\r\n                    else -> {\r\n                        mCursorPosition = it.x\r\n                        invalidate()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/SwitchGraph.kt b/app/src/main/java/com/app/simostools/SwitchGraph.kt
--- a/app/src/main/java/com/app/simostools/SwitchGraph.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/SwitchGraph.kt	(date 1639182787962)
@@ -75,13 +75,17 @@
 
     fun setTextPerLine(count: Int) {
         mTextPerLine = count
-        mTextHeight = (((mTextCount-1) / mTextPerLine) + 1) * textPaint.textSize
+        calTextHeight()
     }
 
     fun setTextBGColor(color: Int) {
         bgTextPaint.color = color
     }
 
+    private fun calTextHeight() {
+        mTextHeight = (((mTextCount-1) / mTextPerLine) + 1) * textPaint.textSize
+    }
+
     override fun onDraw(canvas: Canvas) {
         //local variable
         val textSplit = mCurrentHeight-mTextHeight
@@ -152,6 +156,11 @@
     override fun onSizeChanged(width: Int, height: Int, oldWidth: Int, oldHeight: Int) {
         mCurrentWidth = width.toFloat()
         mCurrentHeight = height.toFloat()
+        textPaint.textSize = mCurrentWidth / 13f / mTextPerLine
+        val pixelCount = mCurrentWidth * mCurrentHeight
+        linePaint.strokeWidth = pixelCount / 300000f
+        cursorPaint.strokeWidth = pixelCount / 500000f
+        calTextHeight()
 
         invalidate()
     }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable-v24/ic_launcher_foreground.xml\" value=\"0.3026041666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable/circle_shape.xml\" value=\"0.4036458333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable/circular_progress_bar.xml\" value=\"0.4036458333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable/circular_progress_bar_land.xml\" value=\"0.3098958333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/drawable/ic_launcher_background.xml\" value=\"0.3026041666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout-land/fragment_first.xml\" value=\"0.24250440917107582\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout-land/fragment_logging.xml\" value=\"0.328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/activity_main.xml\" value=\"0.21822916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/content_main.xml\" value=\"0.21822916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_color.xml\" value=\"0.2765625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_color_picker.xml\" value=\"0.348731884057971\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom.xml\" value=\"0.2921875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom1.xml\" value=\"0.2916666666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom2.xml\" value=\"0.2916666666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom3.xml\" value=\"0.2916666666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_custom4.xml\" value=\"0.2916666666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_first.xml\" value=\"0.2864583333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_flashing.xml\" value=\"0.36231884057971014\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_logging.xml\" value=\"0.30052083333333335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_main.xml\" value=\"0.29322916666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_settings.xml\" value=\"0.2859375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_settings_color.xml\" value=\"0.2859375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/fragment_settings_main.xml\" value=\"0.2859375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/mode_22.xml\" value=\"0.2421875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_land.xml\" value=\"0.30052083333333335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_land_bar.xml\" value=\"0.29322916666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_land_round.xml\" value=\"0.3713768115942029\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_portrait.xml\" value=\"0.30052083333333335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_portrait_bar.xml\" value=\"0.29322916666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/layout/pid_portrait_round.xml\" value=\"0.3713768115942029\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/menu/menu_main.xml\" value=\"0.30052083333333335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosLogger/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\" value=\"0.3026041666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_color.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_flashing.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_log_viewer.xml\" value=\"0.23324514991181658\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_logging_full.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_logging_layout.xml\" value=\"0.2328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_logging_main.xml\" value=\"0.2292768959435626\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_main.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_pid.xml\" value=\"0.23192239858906524\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_playback.xml\" value=\"0.328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_settings.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_settings_logging.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_settings_main.xml\" value=\"0.328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-land/fragment_utilities.xml\" value=\"0.328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_color.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_cp.xml\" value=\"0.17704149933065597\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_flashing.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_log_viewer.xml\" value=\"0.17704149933065597\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_logging_main.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_main.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_pid.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_playback.xml\" value=\"0.178714859437751\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_settings_main.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp-land/fragment_utilities.xml\" value=\"0.17603748326639893\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_color.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_flashing.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_log_viewer.xml\" value=\"0.206640625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_logging_main.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_main.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_message.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_pid.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_playback.xml\" value=\"0.20859375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_settings_main.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_settings_mode22.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_settings_pid.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_utilities.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/pid_land.xml\" value=\"0.22109375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/pid_portrait.xml\" value=\"0.22109375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/settings_pid.xml\" value=\"0.20546875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/activity_main.xml\" value=\"0.34103260869565216\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/flashing_message.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_cockpit.xml\" value=\"0.2755208333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_color.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_cp.xml\" value=\"0.2755208333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_custom1.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_flashing.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_log_viewer.xml\" value=\"0.2755208333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_log_viewer_enabled.xml\" value=\"0.2755208333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_log_viewer_tabs.xml\" value=\"0.2755208333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_custom1.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_custom2.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_custom3.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_custom4.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_full.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_layout.xml\" value=\"0.275\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_logging_main.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_main.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_message.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_pid.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_playback.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_playback_enabled.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_playback_tabs.xml\" value=\"0.36684782608695654\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings.xml\" value=\"0.28541666666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_car.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_general.xml\" value=\"0.2682555780933063\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_main.xml\" value=\"0.34103260869565216\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_mode22.xml\" value=\"0.34103260869565216\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_mode3E.xml\" value=\"0.34103260869565216\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_mode3e.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_modeDSG.xml\" value=\"0.2755208333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_modedsg.xml\" value=\"0.2755208333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_settings_pid.xml\" value=\"0.27395833333333336\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/fragment_utilities.xml\" value=\"0.37681159420289856\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/message.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/pid_land.xml\" value=\"0.2890625\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/pid_portrait.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/settings_pid.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout/settings_pid_small.xml\" value=\"0.2708333333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\" value=\"0.3109375\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout-land/fragment_first.xml\" value=\"0.328042328042328\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout-land/fragment_logging.xml\" value=\"0.2495590828924162\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/PIDland.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/activity_main.xml\" value=\"0.21979166666666666\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/content_main.xml\" value=\"0.21927083333333333\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/fragment_first.xml\" value=\"0.2947916666666667\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/fragment_flashing.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/fragment_logging.xml\" value=\"0.296875\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/fragment_settings.xml\" value=\"0.335\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/message.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/pid_land.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/layout/pid_portrait.xml\" value=\"0.30104166666666665\" />\r\n        <entry key=\"..\\:/Users/switchleg/AndroidStudioProjects/VWFlashTools/app/src/main/res/menu/menu_main.xml\" value=\"0.30104166666666665\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/.idea/misc.xml	(date 1639323540625)
@@ -61,6 +61,8 @@
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_color.xml" value="0.20546875" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_flashing.xml" value="0.20546875" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_log_viewer.xml" value="0.206640625" />
+        <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_log_viewer_enabled.xml" value="0.206640625" />
+        <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_log_viewer_tabs.xml" value="0.206640625" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_logging_main.xml" value="0.20546875" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_main.xml" value="0.20546875" />
         <entry key="..\:/Users/switchleg/AndroidStudioProjects/SimosTools/app/src/main/res/layout-sw600dp/fragment_message.xml" value="0.20546875" />
Index: app/src/main/java/com/app/simostools/FlashingFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.app.Activity\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.graphics.Color\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.SystemClock\r\nimport android.view.LayoutInflater\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport android.widget.*\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.core.content.ContextCompat.startForegroundService\r\nimport android.widget.ArrayAdapter\r\nimport androidx.core.view.isVisible\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\n\r\nvar gFlashMsgList: Array<String>? = arrayOf()\r\n\r\nclass FlashViewModel : ViewModel() {\r\n    var connectionState: BLEConnectionState = BLEConnectionState.NONE\r\n    var flashFull: Boolean = false\r\n}\r\n\r\nclass FlashingFragment : Fragment() {\r\n    private val TAG = \"FlashingFragment\"\r\n    private var mArrayAdapter: ArrayAdapter<String>? = null\r\n    private lateinit var mViewModel: FlashViewModel\r\n    private var flashConfirmationHoldTime: Long = 0L\r\n\r\n    var resultPickLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n        if (result.resultCode == Activity.RESULT_OK) {\r\n            val uri: Uri? = result.data?.data\r\n            uri?.let {\r\n                UDSFlasher.setBinFile(requireActivity().contentResolver.openInputStream(uri)!!)\r\n                UDSFlasher.setFullFlash(mViewModel.flashFull)\r\n\r\n                // Tell the service to start flashing\r\n                sendServiceMessage(BTServiceTask.DO_START_FLASH.toString())\r\n\r\n                Toast.makeText(activity, \"Success\", Toast.LENGTH_SHORT).show()\r\n            }?: Toast.makeText(activity, \"Failed\", Toast.LENGTH_SHORT).show()\r\n        } else {\r\n            Toast.makeText(activity, \"Failed\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_flashing, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        mViewModel = ViewModelProvider(this).get(FlashViewModel::class.java)\r\n\r\n        mArrayAdapter = SwitchArrayAdapter(requireContext(), R.layout.fragment_message, gFlashMsgList?: arrayOf())\r\n        mArrayAdapter?.let { adapter ->\r\n            gFlashMsgList?.forEach {\r\n                adapter.add(it)\r\n            }\r\n        }\r\n\r\n        view.findViewById<ListView>(R.id.listViewMessage)?.let { messageBox ->\r\n            messageBox.adapter = mArrayAdapter\r\n            messageBox.setBackgroundColor(Color.WHITE)\r\n        }\r\n\r\n        val flashCalButton = view.findViewById<SwitchButton>(R.id.buttonFlashCAL)\r\n        flashCalButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                clickFlash(false)\r\n            }\r\n        }\r\n\r\n        val flashFullButton = view.findViewById<SwitchButton>(R.id.buttonFlashFull)\r\n        flashFullButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                //clickFlash(true)\r\n            }\r\n        }\r\n\r\n        val tuneInfoButton = view.findViewById<SwitchButton>(R.id.buttonTuneInfo)\r\n        tuneInfoButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {\r\n                    sendServiceMessage(BTServiceTask.DO_GET_TUNE_INFO.toString())\r\n                } else {\r\n                    doWriteMessage(\"Tune Info\\n---------------\\nNot connected.\")\r\n                }\r\n            }\r\n        }\r\n\r\n        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)\r\n        backButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n\r\n        view.findViewById<ProgressBar>(R.id.progressBarFlash)?.apply {\r\n            progress = 0\r\n            isVisible = false\r\n            max = 100\r\n            min = 0\r\n        }\r\n\r\n        setColor()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        setColor()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = ConfigSettings.KEEP_SCREEN_ON.toBoolean()\r\n\r\n        //register broadcast receiver\r\n        val filter = IntentFilter()\r\n        filter.addAction(GUIMessage.STATE_CONNECTION.toString())\r\n        filter.addAction(GUIMessage.STATE_TASK.toString())\r\n        filter.addAction(GUIMessage.FLASH_INFO.toString())\r\n        filter.addAction(GUIMessage.FLASH_INFO_CLEAR.toString())\r\n        filter.addAction(GUIMessage.FLASH_PROGRESS.toString())\r\n        filter.addAction(GUIMessage.FLASH_PROGRESS_MAX.toString())\r\n        filter.addAction(GUIMessage.FLASH_PROGRESS_SHOW.toString())\r\n        filter.addAction(GUIMessage.FLASH_CONFIRM.toString())\r\n        filter.addAction(GUIMessage.FLASH_BUTTON_RESET.toString())\r\n        activity?.registerReceiver(mBroadcastReceiver, filter)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = false\r\n\r\n        //unregister broadcast receiver\r\n        activity?.unregisterReceiver(mBroadcastReceiver)\r\n    }\r\n\r\n    private val mBroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            DebugLog.d(TAG, \"Flashing Fragment received action: \" + intent.action.toString())\r\n            when (intent.action) {\r\n                GUIMessage.STATE_CONNECTION.toString()      -> mViewModel.connectionState = intent.getSerializableExtra(GUIMessage.STATE_CONNECTION.toString()) as BLEConnectionState\r\n                GUIMessage.STATE_TASK.toString()            -> mViewModel.connectionState = BLEConnectionState.CONNECTED\r\n                GUIMessage.FLASH_INFO.toString()            -> doWriteMessage(intent.getStringExtra(GUIMessage.FLASH_INFO.toString())?: \"\")\r\n                GUIMessage.FLASH_INFO_CLEAR.toString()      -> doClearMessages()\r\n                GUIMessage.FLASH_PROGRESS.toString()        -> setProgressBar(intent.getIntExtra(GUIMessage.FLASH_PROGRESS.toString(), 0))\r\n                GUIMessage.FLASH_PROGRESS_MAX.toString()    -> setProgressBarMax(intent.getIntExtra(GUIMessage.FLASH_PROGRESS_MAX.toString(), 0))\r\n                GUIMessage.FLASH_PROGRESS_SHOW.toString()   -> setProgressBarShow(intent.getBooleanExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), false))\r\n                GUIMessage.FLASH_CONFIRM.toString()         -> promptUserConfirmation()\r\n                GUIMessage.FLASH_BUTTON_RESET.toString()    -> resetFlashButton(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun clickFlash(full: Boolean) {\r\n        var flashString = if(full) \"Flash Full\\n---------------\"\r\n        else \"Flash CAL\\n---------------\"\r\n\r\n        if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {\r\n            mViewModel.flashFull = full\r\n            var chooseFile = Intent(Intent.ACTION_GET_CONTENT).apply {\r\n                addCategory(Intent.CATEGORY_OPENABLE)\r\n                type = \"*/*\"\r\n            }\r\n            chooseFile = Intent.createChooser(chooseFile, \"Choose a Fullbin\")\r\n            resultPickLauncher.launch(chooseFile)\r\n        } else {\r\n            flashString += \"\\nNot connected.\"\r\n        }\r\n\r\n        doWriteMessage(flashString)\r\n    }\r\n\r\n    private fun resetFlashButton(full: Boolean) {\r\n        val flashButton = if(full) requireView().findViewById<SwitchButton>(R.id.buttonFlashFull)\r\n            else requireView().findViewById<SwitchButton>(R.id.buttonFlashCAL)\r\n\r\n        flashButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            text = if(full) \"Flash Full\"\r\n                else \"Flash CAL\"\r\n            setOnClickListener {\r\n                clickFlash(full)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun promptUserConfirmation() {\r\n        val flashButton = requireView().findViewById<SwitchButton>(R.id.buttonFlashCAL)\r\n        flashButton.apply {\r\n            paintBG.color = ColorList.BT_BG_ALERT.value\r\n            paintRim.color = ColorList.BT_RIM_ALERT.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            text = \"Press to cancel, Hold to confirm\"\r\n            setOnTouchListener(object : View.OnTouchListener {\r\n                override fun onTouch(v: View?, event: MotionEvent?): Boolean {\r\n                    when (event?.action) {\r\n                        MotionEvent.ACTION_DOWN ->{\r\n                            flashConfirmationHoldTime = SystemClock.uptimeMillis()\r\n                            //time the button press\r\n                        }\r\n                        MotionEvent.ACTION_UP -> {\r\n                            var now = SystemClock.uptimeMillis()\r\n                            if(now - flashConfirmationHoldTime > 1000){\r\n                                sendServiceMessage(BTServiceTask.FLASH_CONFIRMED.toString())\r\n                            }\r\n                            else{\r\n                                sendServiceMessage(BTServiceTask.FLASH_CANCELED.toString())\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return v?.onTouchEvent(event) ?: true\r\n                }\r\n            })\r\n\r\n            setOnClickListener {\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun doClearMessages() {\r\n        gFlashMsgList = arrayOf()\r\n        mArrayAdapter?.let {\r\n            it.clear()\r\n\r\n            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)\r\n            btMessage?.setSelection(0)\r\n        }\r\n    }\r\n\r\n    private fun doWriteMessage(message: String) {\r\n        // construct a string from the valid bytes in the buffer\r\n        val value = gFlashMsgList?: arrayOf()\r\n        gFlashMsgList = value + message\r\n        mArrayAdapter?.let {\r\n            it.add(message)\r\n\r\n            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)\r\n            btMessage?.setSelection(it.count - 1)\r\n        }\r\n    }\r\n\r\n    private fun setColor() {\r\n        val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)\r\n        btMessage?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n        //Set background color\r\n        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n    }\r\n\r\n    private fun setProgressBar(amount: Int) {\r\n        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarFlash)\r\n        pBar?.progress = amount\r\n\r\n    }\r\n\r\n    private fun setProgressBarMax(amount: Int) {\r\n        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarFlash)\r\n        pBar?.max = amount\r\n    }\r\n\r\n    private fun setProgressBarShow(allow: Boolean) {\r\n        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarFlash)\r\n        pBar?.isVisible = allow\r\n    }\r\n\r\n    private fun sendServiceMessage(type: String) {\r\n        activity?.let {\r\n            val serviceIntent = Intent(it, BTService::class.java)\r\n            serviceIntent.action = type\r\n            startForegroundService(it, serviceIntent)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/FlashingFragment.kt b/app/src/main/java/com/app/simostools/FlashingFragment.kt
--- a/app/src/main/java/com/app/simostools/FlashingFragment.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/FlashingFragment.kt	(date 1639324796402)
@@ -26,30 +26,34 @@
 var gFlashMsgList: Array<String>? = arrayOf()
 
 class FlashViewModel : ViewModel() {
-    var connectionState: BLEConnectionState = BLEConnectionState.NONE
-    var flashFull: Boolean = false
+    var flashFull: Boolean          = false
+    var confirmingFlash: Boolean    = false
 }
 
 class FlashingFragment : Fragment() {
     private val TAG = "FlashingFragment"
-    private var mArrayAdapter: ArrayAdapter<String>? = null
+    private var mArrayAdapter: ArrayAdapter<String>?    = null
+    private var mFlashConfirmationHoldTime: Long        = 0L
+    private var mFlashCalButton: SwitchButton?          = null
+    private var mFlashFullButton: SwitchButton?         = null
+    private var mTuneInfoButton: SwitchButton?          = null
+    private var mBackButton: SwitchButton?              = null
+    private var mFlashMessageBox: ListView?             = null
+    private var mFlashProgressBar: ProgressBar?         = null
     private lateinit var mViewModel: FlashViewModel
-    private var flashConfirmationHoldTime: Long = 0L
 
     var resultPickLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
         if (result.resultCode == Activity.RESULT_OK) {
             val uri: Uri? = result.data?.data
             uri?.let {
+                setButtons(false)
+
                 UDSFlasher.setBinFile(requireActivity().contentResolver.openInputStream(uri)!!)
                 UDSFlasher.setFullFlash(mViewModel.flashFull)
 
                 // Tell the service to start flashing
                 sendServiceMessage(BTServiceTask.DO_START_FLASH.toString())
-
-                Toast.makeText(activity, "Success", Toast.LENGTH_SHORT).show()
-            }?: Toast.makeText(activity, "Failed", Toast.LENGTH_SHORT).show()
-        } else {
-            Toast.makeText(activity, "Failed", Toast.LENGTH_SHORT).show()
+            }
         }
     }
 
@@ -72,13 +76,24 @@
             }
         }
 
-        view.findViewById<ListView>(R.id.listViewMessage)?.let { messageBox ->
-            messageBox.adapter = mArrayAdapter
-            messageBox.setBackgroundColor(Color.WHITE)
+        mFlashMessageBox = view.findViewById(R.id.listViewMessage)
+        mFlashMessageBox?.apply {
+            adapter = mArrayAdapter
+            setSelection(adapter.count - 1)
+            setBackgroundColor(ColorList.BG_NORMAL.value)
+        }
+
+        mFlashProgressBar = view.findViewById(R.id.progressBarFlash)
+        mFlashProgressBar?.apply {
+            progress = 0
+            isVisible = false
+            max = 100
+            min = 0
         }
 
-        val flashCalButton = view.findViewById<SwitchButton>(R.id.buttonFlashCAL)
-        flashCalButton.apply {
+        mFlashCalButton = view.findViewById(R.id.buttonFlashCAL)
+        mFlashCalButton?.apply {
+            isEnabled = false
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -87,8 +102,9 @@
             }
         }
 
-        val flashFullButton = view.findViewById<SwitchButton>(R.id.buttonFlashFull)
-        flashFullButton.apply {
+        mFlashFullButton = view.findViewById(R.id.buttonFlashFull)
+        mFlashFullButton?.apply {
+            isEnabled = false
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -97,22 +113,20 @@
             }
         }
 
-        val tuneInfoButton = view.findViewById<SwitchButton>(R.id.buttonTuneInfo)
-        tuneInfoButton.apply {
+        mTuneInfoButton = view.findViewById(R.id.buttonTuneInfo)
+        mTuneInfoButton?.apply {
+            isEnabled = false
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
             setOnClickListener {
-                if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {
-                    sendServiceMessage(BTServiceTask.DO_GET_TUNE_INFO.toString())
-                } else {
-                    doWriteMessage("Tune Info\n---------------\nNot connected.")
-                }
+                setButtons(false)
+                sendServiceMessage(BTServiceTask.DO_GET_TUNE_INFO.toString())
             }
         }
 
-        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)
-        backButton.apply {
+        mBackButton = view.findViewById(R.id.buttonBack)
+        mBackButton?.apply {
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -121,21 +135,12 @@
             }
         }
 
-        view.findViewById<ProgressBar>(R.id.progressBarFlash)?.apply {
-            progress = 0
-            isVisible = false
-            max = 100
-            min = 0
-        }
-
-        setColor()
+        view.setBackgroundColor(ColorList.BG_NORMAL.value)
     }
 
     override fun onResume() {
         super.onResume()
 
-        setColor()
-
         //Do we keep the screen on?
         view?.keepScreenOn = ConfigSettings.KEEP_SCREEN_ON.toBoolean()
 
@@ -167,57 +172,89 @@
         override fun onReceive(context: Context?, intent: Intent) {
             DebugLog.d(TAG, "Flashing Fragment received action: " + intent.action.toString())
             when (intent.action) {
-                GUIMessage.STATE_CONNECTION.toString()      -> mViewModel.connectionState = intent.getSerializableExtra(GUIMessage.STATE_CONNECTION.toString()) as BLEConnectionState
-                GUIMessage.STATE_TASK.toString()            -> mViewModel.connectionState = BLEConnectionState.CONNECTED
+                GUIMessage.STATE_CONNECTION.toString()      -> doStateConnection(intent.getSerializableExtra(GUIMessage.STATE_CONNECTION.toString()) as BLEConnectionState)
+                GUIMessage.STATE_TASK.toString()            -> doStateTask(intent.getSerializableExtra(GUIMessage.STATE_TASK.toString()) as UDSTask)
                 GUIMessage.FLASH_INFO.toString()            -> doWriteMessage(intent.getStringExtra(GUIMessage.FLASH_INFO.toString())?: "")
                 GUIMessage.FLASH_INFO_CLEAR.toString()      -> doClearMessages()
-                GUIMessage.FLASH_PROGRESS.toString()        -> setProgressBar(intent.getIntExtra(GUIMessage.FLASH_PROGRESS.toString(), 0))
-                GUIMessage.FLASH_PROGRESS_MAX.toString()    -> setProgressBarMax(intent.getIntExtra(GUIMessage.FLASH_PROGRESS_MAX.toString(), 0))
-                GUIMessage.FLASH_PROGRESS_SHOW.toString()   -> setProgressBarShow(intent.getBooleanExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), false))
+                GUIMessage.FLASH_PROGRESS.toString()        -> mFlashProgressBar?.progress = intent.getIntExtra(GUIMessage.FLASH_PROGRESS.toString(), 0)
+                GUIMessage.FLASH_PROGRESS_MAX.toString()    -> mFlashProgressBar?.max = intent.getIntExtra(GUIMessage.FLASH_PROGRESS_MAX.toString(), 0)
+                GUIMessage.FLASH_PROGRESS_SHOW.toString()   -> mFlashProgressBar?.isVisible = intent.getBooleanExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), false)
                 GUIMessage.FLASH_CONFIRM.toString()         -> promptUserConfirmation()
-                GUIMessage.FLASH_BUTTON_RESET.toString()    -> resetFlashButton(false)
+                GUIMessage.FLASH_BUTTON_RESET.toString()    -> resetFlashButton()
             }
         }
     }
+
+    private fun doStateTask(newTask: UDSTask) {
+        when(newTask) {
+            UDSTask.NONE        -> setButtons(true)
+            UDSTask.FLASHING    -> setButtons(false, false)
+            else                -> setButtons(false)
+        }
+    }
+
+    private fun doStateConnection(newState: BLEConnectionState) {
+        when(newState) {
+            BLEConnectionState.CONNECTED    -> setButtons(true)
+            else                            -> setButtons(false)
+        }
+    }
+
+    private fun setButtons(enabled: Boolean, back: Boolean = true) {
+        if(mViewModel.confirmingFlash) {
+            mFlashCalButton?.isEnabled  = !mViewModel.flashFull
+            mFlashFullButton?.isEnabled = mViewModel.flashFull
+        } else {
+            mFlashCalButton?.isEnabled  = enabled
+            mFlashFullButton?.isEnabled = enabled
+        }
+
+        mTuneInfoButton?.isEnabled  = enabled
+        mBackButton?.isEnabled      = back
+    }
 
     private fun clickFlash(full: Boolean) {
-        var flashString = if(full) "Flash Full\n---------------"
+        val flashString = if(full) "Flash Full\n---------------"
         else "Flash CAL\n---------------"
 
-        if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {
-            mViewModel.flashFull = full
-            var chooseFile = Intent(Intent.ACTION_GET_CONTENT).apply {
-                addCategory(Intent.CATEGORY_OPENABLE)
-                type = "*/*"
-            }
-            chooseFile = Intent.createChooser(chooseFile, "Choose a Fullbin")
-            resultPickLauncher.launch(chooseFile)
-        } else {
-            flashString += "\nNot connected."
-        }
+        mViewModel.flashFull = full
+        var chooseFile = Intent(Intent.ACTION_GET_CONTENT).apply {
+            addCategory(Intent.CATEGORY_OPENABLE)
+            type = "*/*"
+        }
+        chooseFile = Intent.createChooser(chooseFile, "Choose a Fullbin")
+        resultPickLauncher.launch(chooseFile)
 
         doWriteMessage(flashString)
     }
 
-    private fun resetFlashButton(full: Boolean) {
-        val flashButton = if(full) requireView().findViewById<SwitchButton>(R.id.buttonFlashFull)
-            else requireView().findViewById<SwitchButton>(R.id.buttonFlashCAL)
+    private fun resetFlashButton() {
+        val flashButton = if(mViewModel.flashFull) mFlashFullButton
+        else mFlashCalButton
 
-        flashButton.apply {
+        mViewModel.confirmingFlash = false
+
+        flashButton?.apply {
+            isEnabled = false
             paintBG.color = ColorList.BT_BG.value
             paintRim.color = ColorList.BT_RIM.value
             setTextColor(ColorList.BT_TEXT.value)
-            text = if(full) "Flash Full"
+            text = if(mViewModel.flashFull) "Flash Full"
                 else "Flash CAL"
             setOnClickListener {
-                clickFlash(full)
+                clickFlash(mViewModel.flashFull)
             }
         }
     }
 
     private fun promptUserConfirmation() {
-        val flashButton = requireView().findViewById<SwitchButton>(R.id.buttonFlashCAL)
-        flashButton.apply {
+        val flashButton = if(mViewModel.flashFull) mFlashFullButton
+        else mFlashCalButton
+
+        mViewModel.confirmingFlash = true
+
+        flashButton?.apply {
+            isEnabled = true
             paintBG.color = ColorList.BT_BG_ALERT.value
             paintRim.color = ColorList.BT_RIM_ALERT.value
             setTextColor(ColorList.BT_TEXT.value)
@@ -226,12 +263,12 @@
                 override fun onTouch(v: View?, event: MotionEvent?): Boolean {
                     when (event?.action) {
                         MotionEvent.ACTION_DOWN ->{
-                            flashConfirmationHoldTime = SystemClock.uptimeMillis()
+                            mFlashConfirmationHoldTime = SystemClock.uptimeMillis()
                             //time the button press
                         }
                         MotionEvent.ACTION_UP -> {
-                            var now = SystemClock.uptimeMillis()
-                            if(now - flashConfirmationHoldTime > 1000){
+                            val now = SystemClock.uptimeMillis()
+                            if(now - mFlashConfirmationHoldTime > 1000){
                                 sendServiceMessage(BTServiceTask.FLASH_CONFIRMED.toString())
                             }
                             else{
@@ -254,8 +291,7 @@
         mArrayAdapter?.let {
             it.clear()
 
-            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)
-            btMessage?.setSelection(0)
+            mFlashMessageBox?.setSelection(0)
         }
     }
 
@@ -266,33 +302,9 @@
         mArrayAdapter?.let {
             it.add(message)
 
-            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)
-            btMessage?.setSelection(it.count - 1)
+            mFlashMessageBox?.setSelection(it.count - 1)
         }
     }
-
-    private fun setColor() {
-        val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)
-        btMessage?.setBackgroundColor(ColorList.BG_NORMAL.value)
-        //Set background color
-        view?.setBackgroundColor(ColorList.BG_NORMAL.value)
-    }
-
-    private fun setProgressBar(amount: Int) {
-        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarFlash)
-        pBar?.progress = amount
-
-    }
-
-    private fun setProgressBarMax(amount: Int) {
-        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarFlash)
-        pBar?.max = amount
-    }
-
-    private fun setProgressBarShow(allow: Boolean) {
-        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarFlash)
-        pBar?.isVisible = allow
-    }
 
     private fun sendServiceMessage(type: String) {
         activity?.let {
Index: app/src/main/java/com/app/simostools/BTService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.app.*\r\nimport android.bluetooth.*\r\nimport android.bluetooth.BluetoothGatt.CONNECTION_PRIORITY_HIGH\r\nimport android.bluetooth.le.ScanCallback\r\nimport android.bluetooth.le.ScanFilter\r\nimport android.bluetooth.le.ScanResult\r\nimport android.bluetooth.le.ScanSettings\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Handler\r\nimport android.os.IBinder\r\nimport android.os.Looper\r\nimport android.os.ParcelUuid\r\nimport java.util.*\r\nimport java.util.concurrent.ConcurrentLinkedQueue\r\nimport java.util.concurrent.Semaphore\r\n\r\n// Header we expect to receive on BLE packets\r\nclass BLEHeader {\r\n    var hdID: Int = BLE_HEADER_ID\r\n    var cmdFlags: Int = 0\r\n    var rxID: Int = BLE_HEADER_RX\r\n    var txID: Int = BLE_HEADER_TX\r\n    var cmdSize: Int = 0\r\n    var tickCount: Int = 0\r\n\r\n    fun isValid(): Boolean {\r\n        return hdID == BLE_HEADER_ID\r\n    }\r\n\r\n    fun toByteArray(): ByteArray {\r\n        val bArray = ByteArray(8)\r\n        bArray[0] = (hdID and 0xFF).toByte()\r\n        bArray[1] = (cmdFlags and 0xFF).toByte()\r\n        bArray[2] = (rxID and 0xFF).toByte()\r\n        bArray[3] = ((rxID and 0xFF00) shr 8).toByte()\r\n        bArray[4] = (txID and 0xFF).toByte()\r\n        bArray[5] = ((txID and 0xFF00) shr 8).toByte()\r\n        bArray[6] = (cmdSize and 0xFF).toByte()\r\n        bArray[7] = ((cmdSize and 0xFF00) shr 8).toByte()\r\n\r\n        return bArray\r\n    }\r\n\r\n    fun fromByteArray(bArray: ByteArray) {\r\n        hdID = bArray[0] and 0xFF\r\n        cmdFlags = bArray[1] and 0xFF\r\n        rxID = ((bArray[3] and 0xFF) shl 8) + (bArray[2] and 0xFF)\r\n        txID = ((bArray[5] and 0xFF) shl 8) + (bArray[4] and 0xFF)\r\n        cmdSize = ((bArray[7] and 0xFF) shl 8) + (bArray[6] and 0xFF)\r\n        tickCount = ((rxID  and 0xFFFF) shl 16) + (txID  and 0xFFFF)\r\n    }\r\n\r\n    fun size(): Int {\r\n        return 8\r\n    }\r\n\r\n    fun size_partial(): Int {\r\n        return 2\r\n    }\r\n}\r\n\r\nclass BTService: Service() {\r\n    //constants\r\n    val TAG = \"BTService\"\r\n\r\n    // Member fields\r\n    private var mScanning: Boolean                              = false\r\n    private var mConnectionState: BLEConnectionState            = BLEConnectionState.NONE\r\n    private val mWriteSemaphore: Semaphore                      = Semaphore(1)\r\n    private val mReadQueue: ConcurrentLinkedQueue<ByteArray>    = ConcurrentLinkedQueue<ByteArray>()\r\n    private val mWriteQueue: ConcurrentLinkedQueue<ByteArray>   = ConcurrentLinkedQueue<ByteArray>()\r\n    private var mBluetoothGatt: BluetoothGatt?                  = null\r\n    private var mBluetoothDevice: BluetoothDevice?              = null\r\n    private var mConnectionThread: ConnectionThread?            = null\r\n    private var mLogWriteState: Boolean                         = false\r\n    private var mScanningTimer: Timer?                          = null\r\n    private var mMTUSize: Int                                   = 23\r\n    private var mFinished: Boolean                              = false\r\n    private var mStarted: Boolean                               = false\r\n\r\n    //Gatt additional properties\r\n    private fun BluetoothGattCharacteristic.isReadable(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_READ)\r\n    private fun BluetoothGattCharacteristic.isWritable(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_WRITE)\r\n    private fun BluetoothGattCharacteristic.isWritableWithoutResponse(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE)\r\n    private fun BluetoothGattCharacteristic.isIndicatable(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_INDICATE)\r\n    private fun BluetoothGattCharacteristic.isNotifiable(): Boolean = containsProperty(BluetoothGattCharacteristic.PROPERTY_NOTIFY)\r\n    private fun BluetoothGattCharacteristic.containsProperty(property: Int): Boolean = properties and property != 0\r\n\r\n    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {\r\n        super.onStartCommand(intent, flags, startId)\r\n\r\n        if(!mFinished) {\r\n            when (intent.action) {\r\n                BTServiceTask.STOP_SERVICE.toString()       -> doStopService(startId)\r\n                BTServiceTask.START_SERVICE.toString()      -> doStartService()\r\n                BTServiceTask.REQ_STATUS.toString()         -> sendStatus()\r\n                BTServiceTask.DO_CONNECT.toString()         -> doConnect()\r\n                BTServiceTask.DO_DISCONNECT.toString()      -> doDisconnect()\r\n                BTServiceTask.DO_START_LOG.toString()       -> mConnectionThread?.setTaskState(UDSTask.LOGGING)\r\n                BTServiceTask.DO_START_FLASH.toString()     -> mConnectionThread?.setTaskState(UDSTask.FLASHING)\r\n                BTServiceTask.DO_GET_TUNE_INFO.toString()     -> mConnectionThread?.setTaskState(UDSTask.TUNE_INFO)\r\n                BTServiceTask.DO_GET_INFO.toString()        -> mConnectionThread?.setTaskState(UDSTask.INFO)\r\n                BTServiceTask.DO_CLEAR_DTC.toString()       -> mConnectionThread?.setTaskState(UDSTask.DTC_CLEAR)\r\n                BTServiceTask.DO_GET_DTC.toString()         -> mConnectionThread?.setTaskState(UDSTask.DTC_GET)\r\n                BTServiceTask.DO_SET_ADAPTER.toString()     -> mConnectionThread?.setTaskState(UDSTask.SET_ADAPTER)\r\n                BTServiceTask.DO_STOP_TASK.toString()       -> mConnectionThread?.setTaskState(UDSTask.NONE)\r\n                BTServiceTask.FLASH_CONFIRMED.toString()    -> confirmFlashProceed()\r\n                BTServiceTask.FLASH_CANCELED.toString()     -> cancelFlash()\r\n            }\r\n        }\r\n\r\n        return if(mFinished) {\r\n            START_NOT_STICKY\r\n        } else {\r\n            // If we get killed, after returning from here, restart\r\n            START_STICKY\r\n        }\r\n    }\r\n\r\n    override fun onBind(intent: Intent): IBinder? {\r\n        // We don't provide binding, so return null\r\n        return null\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        //Toast.makeText(this, \"${getString(R.string.app_name)} Done\", Toast.LENGTH_SHORT).show()\r\n        super.onDestroy()\r\n    }\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        //Toast.makeText(this, \"${getString(R.string.app_name)} Started\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    private val mScanCallback = object : ScanCallback() {\r\n        val TAG = \"mScanCallback\"\r\n\r\n        override fun onScanResult(callbackType: Int, result: ScanResult) {\r\n            super.onScanResult(callbackType, result)\r\n            result.device?.let { device ->\r\n                val name = device.name?: \"\"\r\n                DebugLog.i(TAG, \"Found BLE device $name\")\r\n\r\n                if (mBluetoothDevice == null && name.contentEquals(ConfigSettings.ADAPTER_NAME.value.toString())) {\r\n                    mBluetoothDevice = device\r\n\r\n                    stopScanning()\r\n\r\n                    DebugLog.i(TAG, \"Initiating connection to $name\")\r\n                    device.connectGatt(applicationContext, false, mGattCallback, 2)\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun onScanFailed(errorCode: Int) {\r\n            super.onScanFailed(errorCode)\r\n            DebugLog.w(TAG, \"onScanFailed: code $errorCode\")\r\n        }\r\n    }\r\n\r\n    private val mGattCallback = object : BluetoothGattCallback() {\r\n        val TAG = \"BTGATTCallback\"\r\n\r\n        override fun onConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {\r\n            super.onConnectionStateChange(gatt, status, newState)\r\n\r\n            //get device name\r\n            val deviceName = gatt.device.name\r\n\r\n            //If we are connected to the wrong device close and return\r\n            if(mBluetoothDevice != gatt.device) {\r\n                DebugLog.w(TAG, \"Connection made to wrong device, connection closed: $deviceName\")\r\n                gatt.safeClose()\r\n                return\r\n            }\r\n\r\n            if (status == BluetoothGatt.GATT_SUCCESS) {\r\n                if (newState == BluetoothProfile.STATE_CONNECTED) {\r\n                    DebugLog.i(TAG, \"Successfully connected to $deviceName\")\r\n\r\n                    try {\r\n                        //made connection, store our gatt\r\n                        mBluetoothGatt = gatt\r\n\r\n                        //discover gatt table\r\n                        Handler(Looper.getMainLooper()).post {\r\n                            gatt.discoverServices()\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        DebugLog.e(TAG, \"Exception while requesting to discover services: \", e)\r\n                        doDisconnect()\r\n                    }\r\n                } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {\r\n                    DebugLog.i(TAG, \"Successfully disconnected from $deviceName\")\r\n\r\n                    //disable the read notification\r\n                    disableNotifications(gatt.getService(BLE_SERVICE_UUID).getCharacteristic(BLE_DATA_RX_UUID))\r\n\r\n                    //If gatt doesn't match ours make sure we close it\r\n                    if(gatt != mBluetoothGatt) {\r\n                        gatt.safeClose()\r\n                    }\r\n\r\n                    //Do a full disconnect\r\n                    doDisconnect()\r\n                }\r\n            } else {\r\n                DebugLog.i(TAG, \"Error $status encountered for $deviceName! Disconnecting...\")\r\n\r\n                //If gatt doesn't match ours make sure we close it\r\n                if(gatt != mBluetoothGatt) {\r\n                    gatt.safeClose()\r\n                }\r\n\r\n                //Set new connection error state\r\n                val bleState = BLEConnectionState.ERROR\r\n                bleState.errorMessage = status.toString()\r\n\r\n                //Do a full disconnect\r\n                doDisconnect(bleState)\r\n            }\r\n        }\r\n\r\n        override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {\r\n            super.onServicesDiscovered(gatt, status)\r\n\r\n            //If gatt doesn't match ours make sure we close it\r\n            if(gatt != mBluetoothGatt) {\r\n                gatt.safeClose()\r\n                return\r\n            }\r\n\r\n            //If success request MTU\r\n            if(status == BluetoothGatt.GATT_SUCCESS) {\r\n                //Request new MTU\r\n                with(gatt) {\r\n                    DebugLog.i(TAG, \"Discovered ${services.size} services for ${device.name}\")\r\n\r\n                    printGattTable()\r\n                    try {\r\n                        requestMtu(BLE_GATT_MTU_SIZE)\r\n                    } catch (e: Exception) {\r\n                        DebugLog.e(TAG,\"Exception while discovering services:\", e)\r\n                        doDisconnect()\r\n                    }\r\n                }\r\n            } else {\r\n                DebugLog.w(TAG, \"Failed to discover services for ${gatt.device.name}\")\r\n\r\n                //Set new connection error state\r\n                val bleState = BLEConnectionState.ERROR\r\n                bleState.errorMessage = status.toString()\r\n\r\n                //Do a full disconnect\r\n                doDisconnect(bleState)\r\n            }\r\n        }\r\n\r\n        override fun onMtuChanged(gatt: BluetoothGatt, mtu: Int, status: Int) {\r\n            super.onMtuChanged(gatt, mtu, status)\r\n\r\n            DebugLog.d(TAG, \"ATT MTU changed to $mtu, success: ${status == BluetoothGatt.GATT_SUCCESS}\")\r\n\r\n            //get device name\r\n            val deviceName = gatt.device.name\r\n            if(status == BluetoothGatt.GATT_SUCCESS) {\r\n                //Make sure we are on the right connection\r\n                if(gatt != mBluetoothGatt) {\r\n                    DebugLog.i(TAG, \"Gatt does not match mBluetoothGatt, closing connection to $deviceName\")\r\n\r\n                    gatt.safeClose()\r\n                    return\r\n                }\r\n\r\n                //Store MTU Size\r\n                mMTUSize = mtu\r\n\r\n                //Set new connection state\r\n                setConnectionState(BLEConnectionState.CONNECTED)\r\n                try {\r\n                    gatt.requestConnectionPriority(CONNECTION_PRIORITY_HIGH)\r\n                    enableNotifications(gatt.getService(BLE_SERVICE_UUID)!!.getCharacteristic(BLE_DATA_RX_UUID))\r\n                } catch (e: Exception) {\r\n                    DebugLog.e(TAG,\"Exception enabling ble notifications.\", e)\r\n                    doDisconnect()\r\n                }\r\n            } else {\r\n                //If gatt doesn't match ours make sure we close it\r\n                if(gatt != mBluetoothGatt) {\r\n                    gatt.safeClose()\r\n                }\r\n\r\n                //Set new connection error state\r\n                val newState = BLEConnectionState.ERROR\r\n                newState.errorMessage = status.toString()\r\n\r\n                //Do a full disconnect\r\n                doDisconnect(newState)\r\n            }\r\n        }\r\n\r\n        override fun onDescriptorWrite(gatt: BluetoothGatt?, descriptor: BluetoothGattDescriptor?, status: Int) {\r\n            super.onDescriptorWrite(gatt, descriptor, status)\r\n            when (status) {\r\n                BluetoothGatt.GATT_SUCCESS -> {\r\n                    DebugLog.d(\"onDescWrite\", \"success ${descriptor.toString()}\")\r\n                }\r\n                else -> {\r\n                    DebugLog.w(\"onDescWrite\", \"failed ${descriptor.toString()}\")\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun onCharacteristicRead(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic, status: Int) {\r\n            super.onCharacteristicRead(gatt, characteristic, status)\r\n            with(characteristic) {\r\n                when (status) {\r\n                    BluetoothGatt.GATT_SUCCESS -> {\r\n                        DebugLog.d(TAG, \"Read characteristic $uuid | length: ${value.count()}\")\r\n                    }\r\n                    BluetoothGatt.GATT_READ_NOT_PERMITTED -> {\r\n                        DebugLog.w(TAG, \"Read not permitted for $uuid!\")\r\n                    }\r\n                    else -> {\r\n                        DebugLog.w(TAG, \"Characteristic read failed for $uuid, error: $status\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        override fun onCharacteristicWrite(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic, status: Int) {\r\n            super.onCharacteristicWrite(gatt, characteristic, status)\r\n            with(characteristic) {\r\n                when (status) {\r\n                    BluetoothGatt.GATT_SUCCESS -> {\r\n                        DebugLog.d(\"BluetoothGattCallback\", \"Wrote to characteristic $uuid | length: ${value.count()}\")\r\n                    }\r\n                    BluetoothGatt.GATT_INVALID_ATTRIBUTE_LENGTH -> {\r\n                        DebugLog.w(\"BluetoothGattCallback\", \"Write exceeded connection ATT MTU!\")\r\n                    }\r\n                    BluetoothGatt.GATT_WRITE_NOT_PERMITTED -> {\r\n                        DebugLog.w(\"BluetoothGattCallback\", \"Write not permitted for $uuid!\")\r\n                    }\r\n                    else -> {\r\n                        DebugLog.w(\"BluetoothGattCallback\", \"Characteristic write failed for $uuid, error: $status\")\r\n                    }\r\n                }\r\n            }\r\n            mWriteSemaphore.release()\r\n        }\r\n\r\n        override fun onCharacteristicChanged(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic) {\r\n            super.onCharacteristicChanged(gatt, characteristic)\r\n            with(characteristic) {\r\n                DebugLog.d(\"BluetoothGattCallback\", \"Read from characteristic $uuid | length: ${value.count()}\")\r\n\r\n                //parse packet and check for multiple responses\r\n                val bleHeader = BLEHeader()\r\n                while(value.count() > 0) {\r\n                    bleHeader.fromByteArray(value)\r\n                    value = if(bleHeader.cmdSize+8 <= value.count()) {\r\n                        mReadQueue.add(value.copyOfRange(0, bleHeader.cmdSize + 8))\r\n                        value.copyOfRange(bleHeader.cmdSize + 8, value.count())\r\n                    } else {\r\n                        byteArrayOf()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun BluetoothGatt.safeClose() {\r\n        //get device name\r\n        val deviceName = this.device.name\r\n\r\n        DebugLog.i(TAG, \"Closing connection to $deviceName\")\r\n\r\n        try {\r\n            this.close()\r\n        } catch(e: Exception){\r\n            DebugLog.e(TAG, \"Exception while closing connection to $deviceName\", e)\r\n        }\r\n    }\r\n\r\n    private fun BluetoothGatt.printGattTable() {\r\n        if (services.isEmpty()) {\r\n            DebugLog.w(\"printGattTable\", \"No service and characteristic available, call discoverServices() first?\")\r\n            return\r\n        }\r\n        services.forEach { service ->\r\n            val characteristicsTable = service.characteristics.joinToString(separator = \"\\n|--\", prefix = \"|--\") {\r\n                it.uuid.toString()\r\n            }\r\n            DebugLog.d(\"printGattTable\", \"\\nService ${service.uuid}\\nCharacteristics:\\n$characteristicsTable\")\r\n        }\r\n    }\r\n\r\n    private fun writeDescriptor(descriptor: BluetoothGattDescriptor, payload: ByteArray) {\r\n        mBluetoothGatt?.let { gatt ->\r\n            descriptor.value = payload\r\n            gatt.writeDescriptor(descriptor)\r\n        } ?: error(\"Not connected to a BLE device!\")\r\n    }\r\n\r\n    private fun enableNotifications(characteristic: BluetoothGattCharacteristic) {\r\n        val payload = when {\r\n            characteristic.isIndicatable() -> BluetoothGattDescriptor.ENABLE_INDICATION_VALUE\r\n            characteristic.isNotifiable() -> BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE\r\n            else -> {\r\n                DebugLog.w(\"ConnectionManager\", \"${characteristic.uuid} doesn't support notifications/indications\")\r\n                return\r\n            }\r\n        }\r\n\r\n        characteristic.getDescriptor(BLE_CCCD_UUID)?.let { cccDescriptor ->\r\n            if (mBluetoothGatt?.setCharacteristicNotification(characteristic, true) == false) {\r\n                DebugLog.w(\"ConnectionManager\", \"setCharacteristicNotification failed for ${characteristic.uuid}\")\r\n                return\r\n            }\r\n            writeDescriptor(cccDescriptor, payload)\r\n        } ?: DebugLog.w(\"ConnectionManager\", \"${characteristic.uuid} doesn't contain the CCC descriptor!\")\r\n    }\r\n\r\n    private fun disableNotifications(characteristic: BluetoothGattCharacteristic) {\r\n        if (!characteristic.isNotifiable() && !characteristic.isIndicatable()) {\r\n            DebugLog.w(\"ConnectionManager\", \"${characteristic.uuid} doesn't support indications/notifications\")\r\n            return\r\n        }\r\n\r\n        characteristic.getDescriptor(BLE_CCCD_UUID)?.let { cccDescriptor ->\r\n            if (mBluetoothGatt?.setCharacteristicNotification(characteristic, false) == false) {\r\n                DebugLog.w(\"ConnectionManager\", \"setCharacteristicNotification failed for ${characteristic.uuid}\")\r\n                return\r\n            }\r\n            writeDescriptor(cccDescriptor, BluetoothGattDescriptor.DISABLE_NOTIFICATION_VALUE)\r\n        } ?: DebugLog.w(\"ConnectionManager\", \"${characteristic.uuid} doesn't contain the CCC descriptor!\")\r\n    }\r\n\r\n    @Synchronized\r\n    private fun stopScanning() {\r\n        if(mScanning) {\r\n            //Disable scan timer\r\n            mScanningTimer?.cancel()\r\n            mScanningTimer?.purge()\r\n            mScanningTimer = null\r\n\r\n            DebugLog.i(TAG, \"Stop Scanning.\")\r\n            (getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager).adapter.bluetoothLeScanner.stopScan(mScanCallback)\r\n            mScanning = false\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doStopService(startId: Int) {\r\n        mFinished = true\r\n        doDisconnect()\r\n        UDSLogger.clear()\r\n        PIDs.clear()\r\n        UDSFlasher.clear()\r\n        DebugLog.i(TAG, \"Shutting down down service.\")\r\n        DebugLog.close()\r\n        /*val handler = Handler()\r\n        val r: Runnable = object : Runnable {\r\n            override fun run() {\r\n                stopForeground(true)\r\n                stopSelfResult(startId)\r\n            }\r\n        }\r\n        handler.postDelayed(r, 1000)*/\r\n        stopForeground(true)\r\n        stopSelfResult(startId)\r\n    }\r\n\r\n    @Synchronized\r\n    private fun confirmFlashProceed(){\r\n        UDSFlasher.setFlashConfirmed(true)\r\n    }\r\n\r\n    @Synchronized\r\n    private fun cancelFlash(){\r\n        UDSFlasher.cancelFlash()\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doStartService() {\r\n        if(!mStarted) {\r\n            mStarted = true\r\n            val serviceChannel = NotificationChannel(\r\n                CHANNEL_ID,\r\n                CHANNEL_NAME,\r\n                NotificationManager.IMPORTANCE_DEFAULT\r\n            )\r\n            val manager = getSystemService(NotificationManager::class.java)\r\n            manager.createNotificationChannel(serviceChannel)\r\n\r\n            val notification: Notification = Notification.Builder(this, CHANNEL_ID)\r\n                .setContentTitle(getText(R.string.app_name))\r\n                .setContentText(getText(R.string.app_name))\r\n                .setSmallIcon(R.drawable.simostools)\r\n                .build()\r\n\r\n            // Notification ID cannot be 0.\r\n            startForeground(1, notification)\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doConnect() {\r\n        doDisconnect()\r\n\r\n        DebugLog.i(TAG, \"Searching for BLE device.\")\r\n\r\n        val filter = listOf(\r\n            ScanFilter.Builder().setServiceUuid(ParcelUuid.fromString(BLE_SERVICE_UUID.toString()))\r\n                .build()\r\n        )\r\n\r\n        //Disable current scan timer\r\n        mScanningTimer?.cancel()\r\n        mScanningTimer?.purge()\r\n        mScanningTimer = null\r\n\r\n        //start scanning timer\r\n        mScanningTimer = Timer()\r\n        val task = object : TimerTask() {\r\n            override fun run() {\r\n                doTimeout()\r\n            }\r\n        }\r\n        mScanningTimer?.schedule(task, BLE_SCAN_PERIOD)\r\n\r\n        //Set new connection status\r\n        setConnectionState(BLEConnectionState.CONNECTING)\r\n\r\n        //Start scanning for BLE devices\r\n        val settings = ScanSettings.Builder().build()\r\n        (getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager).adapter.bluetoothLeScanner.startScan(filter, settings, mScanCallback)\r\n        mScanning = true\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doDisconnect(newState: BLEConnectionState = BLEConnectionState.NONE) {\r\n        stopScanning()\r\n        closeConnectionThread()\r\n\r\n        //get device name\r\n        mBluetoothDevice?.let {\r\n            DebugLog.i(TAG, \"Disconnecting from BLE device: ${it.name}\")\r\n            mBluetoothDevice = null\r\n        }\r\n\r\n        //if we have gatt, close it\r\n        mBluetoothGatt?.let {\r\n            it.safeClose()\r\n            mBluetoothGatt = null\r\n        }\r\n\r\n        if(!mFinished) {\r\n            //Set new connection status\r\n            setConnectionState(newState)\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun doTimeout() {\r\n        stopScanning()\r\n\r\n        if(mConnectionState != BLEConnectionState.CONNECTED) {\r\n            //Set new connection status\r\n            setConnectionState(BLEConnectionState.NONE)\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun closeConnectionThread() {\r\n        mConnectionThread?.cancel()\r\n        mConnectionThread = null\r\n    }\r\n\r\n    @Synchronized\r\n    private fun createConnectionThread() {\r\n        closeConnectionThread()\r\n\r\n        mConnectionThread = ConnectionThread()\r\n        mConnectionThread?.let { thread ->\r\n            thread.priority = BLE_THREAD_PRIORITY\r\n            thread.start()\r\n        }\r\n    }\r\n\r\n    @Synchronized\r\n    private fun setConnectionState(newState: BLEConnectionState)\r\n    {\r\n        if(mConnectionState == newState)\r\n            return\r\n\r\n        when(newState) {\r\n            BLEConnectionState.ERROR -> closeConnectionThread()\r\n            BLEConnectionState.NONE -> closeConnectionThread()\r\n            BLEConnectionState.CONNECTING -> {}\r\n            BLEConnectionState.CONNECTED -> createConnectionThread()\r\n        }\r\n\r\n        //Broadcast a new message\r\n        mConnectionState = newState\r\n        mConnectionState.errorMessage = newState.errorMessage\r\n        mConnectionState.deviceName = mBluetoothGatt?.device?.name ?: \"\"\r\n        val intentMessage = Intent(GUIMessage.STATE_CONNECTION.toString())\r\n        intentMessage.putExtra(GUIMessage.STATE_CONNECTION.toString(), mConnectionState)\r\n        sendBroadcast(intentMessage)\r\n    }\r\n\r\n    @Synchronized\r\n    private fun sendStatus() {\r\n        if(mConnectionThread != null) {\r\n            mConnectionThread?.sendTaskState()\r\n        } else {\r\n            val intentMessage = Intent(GUIMessage.STATE_CONNECTION.toString())\r\n            intentMessage.putExtra(GUIMessage.STATE_CONNECTION.toString(), mConnectionState)\r\n            sendBroadcast(intentMessage)\r\n        }\r\n    }\r\n\r\n    private inner class ConnectionThread: Thread() {\r\n        private var mTask: UDSTask              = UDSTask.NONE\r\n        private var mTaskNext: UDSTask          = UDSTask.NONE\r\n        private var mTaskTick: Int              = 0\r\n        private var mTaskTime: Long             = 0\r\n        private var mTaskTimeNext: Long         = 0\r\n        private var mTaskTimeOut: Long          = 0\r\n        private var mTaskNextBroadcast: Long    = 0\r\n        private var mPasswordAccepted: Boolean  = true\r\n\r\n        init {\r\n            setTaskState(UDSTask.NONE)\r\n            DebugLog.d(TAG, \"create ConnectionThread\")\r\n        }\r\n\r\n        override fun run() {\r\n            DebugLog.d(TAG, \"BEGIN mConnectionThread\")\r\n\r\n            //sendPassword(\"\")\r\n\r\n            while (mConnectionState == BLEConnectionState.CONNECTED && !currentThread().isInterrupted) {\r\n                //See if there are any packets waiting to be sent\r\n                if (!mWriteQueue.isEmpty() && mWriteSemaphore.tryAcquire()) {\r\n                    try {\r\n                        val buff = mWriteQueue.poll()\r\n                        buff?.let {\r\n                            DebugLog.c(TAG, buff,true)\r\n\r\n                            mBluetoothGatt?.let { gatt ->\r\n                                val txChar = gatt.getService(BLE_SERVICE_UUID)!!.getCharacteristic(BLE_DATA_TX_UUID)\r\n                                val writeType = when {\r\n                                    txChar.isWritable() -> BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT\r\n                                    txChar.isWritableWithoutResponse() -> BluetoothGattCharacteristic.WRITE_TYPE_NO_RESPONSE\r\n                                    else -> error(\"Characteristic ${txChar.uuid} cannot be written to\")\r\n                                }\r\n                                txChar.writeType = writeType\r\n                                txChar.value = it\r\n                                gatt.writeCharacteristic(txChar)\r\n                            } ?: error(\"Not connected to a BLE device!\")\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        DebugLog.e(TAG, \"Exception during write\", e)\r\n                        mWriteSemaphore.release()\r\n                        cancel()\r\n                        break\r\n                    }\r\n                }\r\n\r\n                //See if there are any packets waiting to be read\r\n                if (!mReadQueue.isEmpty()) {\r\n                    try {\r\n                        val buff = mReadQueue.poll()\r\n                        buff?.let {\r\n                            DebugLog.c(TAG, buff, false)\r\n\r\n                            //Process packet\r\n                            processPacket(buff)\r\n                        }\r\n                    } catch (e: Exception) {\r\n                        DebugLog.e(TAG, \"Exception during read\", e)\r\n                        cancel()\r\n                        break\r\n                    }\r\n                }\r\n\r\n                //Ready for next task?\r\n                if(mTaskNext != UDSTask.NONE) {\r\n                    if(mTaskTimeNext < System.currentTimeMillis()) {\r\n                        DebugLog.i(TAG, \"Task finished.\")\r\n                        startNextTask()\r\n                    } else if(mTaskTimeOut < System.currentTimeMillis()) {\r\n                        //Write debug log\r\n                        DebugLog.w(TAG, \"Task failed to finish.\")\r\n                        startNextTask()\r\n                    }\r\n                } else {\r\n                    //Have we sat idle waiting without receiving a packet?\r\n                    if(mTaskTimeNext < System.currentTimeMillis()) {\r\n                        DebugLog.d(TAG, \"Task timeout.\")\r\n\r\n                        //Process packet\r\n                        processPacket(null)\r\n                    }\r\n                }\r\n            }\r\n            DebugLog.d(TAG, \"END mConnectionThread\")\r\n        }\r\n\r\n        fun cancel() {\r\n            interrupt()\r\n        }\r\n\r\n        @Synchronized\r\n        fun setTaskState(newTask: UDSTask)\r\n        {\r\n            //if we are not connected abort\r\n            if (mConnectionState != BLEConnectionState.CONNECTED) {\r\n                mTask = UDSTask.NONE\r\n                return\r\n            }\r\n\r\n            if(newTask == mTask)\r\n                return\r\n\r\n            //queue up next task and set start time\r\n            mTaskTimeNext   = System.currentTimeMillis() + TASK_END_DELAY\r\n            mTaskTimeOut    = System.currentTimeMillis() + TASK_END_TIMEOUT\r\n            mTaskNext       = newTask\r\n\r\n            //If we are doing something call for a stop\r\n            if(mTask != UDSTask.NONE) {\r\n                stopTask()\r\n            }\r\n        }\r\n\r\n        @Synchronized\r\n        fun sendTaskState() {\r\n            if(mTask == UDSTask.LOGGING && UDSLogger.isEnabled()) {\r\n                val intentMessage = Intent(GUIMessage.WRITE_LOG.toString())\r\n                intentMessage.putExtra(GUIMessage.WRITE_LOG.toString(), UDSLogger.isEnabled())\r\n                sendBroadcast(intentMessage)\r\n            } else {\r\n                val intentMessage = Intent(GUIMessage.STATE_TASK.toString())\r\n                intentMessage.putExtra(GUIMessage.STATE_TASK.toString(), mTask)\r\n                sendBroadcast(intentMessage)\r\n            }\r\n        }\r\n\r\n        private fun writePacket(buff: ByteArray?) {\r\n            buff?.let {\r\n                try {\r\n                    //Store buff to local variable\r\n                    var buffer = it\r\n\r\n                    //Make sure we have a header\r\n                    if (buffer.count() < 8) {\r\n                        DebugLog.w(TAG, \"Unable to write empty packet.\")\r\n                        return\r\n                    }\r\n\r\n                    //Do we need to split the packet?\r\n                    var packetSize = mMTUSize - 3\r\n                    if(buffer.count() > packetSize) {\r\n                        //Set split packet flag\r\n                        it[1] = ((it[1].toInt() or BLECommandFlags.SPLIT_PK.value) and 0xFF).toByte()\r\n\r\n                        //Add the first split packet\r\n                        mWriteQueue.add(buffer.copyOfRange(0, packetSize))\r\n                        buffer = buffer.copyOfRange(packetSize, buffer.count())\r\n\r\n                        //Remaining packets\r\n                        packetSize -= BLEHeader().size_partial()\r\n                        var packetCount = 1\r\n                        while (buffer.count() > 0) {\r\n                            val dataSize = if(buffer.count() > packetSize) packetSize\r\n                                            else buffer.count()\r\n                            mWriteQueue.add(byteArrayOf(BLE_HEADER_PT.toByte(), (packetCount++ and 0xFF).toByte()) + buffer.copyOfRange(0, dataSize))\r\n                            buffer = buffer.copyOfRange(dataSize, buffer.count())\r\n                        }\r\n                    } else {\r\n                        //Packet fits MTU\r\n                        mWriteQueue.add(buffer)\r\n                    }\r\n                } catch(e: Exception) {\r\n                    DebugLog.e(TAG, \"Exception while writing packet.\", e)\r\n                }\r\n            } ?: DebugLog.w(TAG, \"Unable to write null packet.\")\r\n        }\r\n\r\n        private fun startNextTask() {\r\n            mTaskTimeNext   = System.currentTimeMillis() + TASK_BUMP_DELAY\r\n            mTask           = mTaskNext\r\n            mTaskNext       = UDSTask.NONE\r\n            mTaskTick       = 0\r\n            mTaskTime       = System.currentTimeMillis()\r\n\r\n            //Write debug log\r\n            DebugLog.i(TAG, \"Task started: $mTask\")\r\n\r\n            sendTaskState()\r\n\r\n            when (mTask) {\r\n                UDSTask.LOGGING     -> startTaskLogging()\r\n                UDSTask.FLASHING    -> startTaskFlashing()\r\n                UDSTask.TUNE_INFO   -> startTaskGetTuneInfo()\r\n                UDSTask.INFO        -> startTaskGetInfo()\r\n                UDSTask.DTC_GET     -> startTaskGetDTC()\r\n                UDSTask.DTC_CLEAR   -> startTaskClearDTC()\r\n                UDSTask.SET_ADAPTER -> startTaskSetAdapter()\r\n                UDSTask.NONE        -> {}\r\n            }\r\n        }\r\n\r\n        private fun stopTask() {\r\n            //Write debug log\r\n            DebugLog.i(TAG, \"Task stopped: $mTask\")\r\n\r\n            //set task to none\r\n            mTask = UDSTask.NONE\r\n\r\n            sendTaskState()\r\n\r\n            //Set LED to green\r\n            setBridgeLED(0,0x80, 0)\r\n\r\n            //clear current persist messages\r\n            clearBridgePersist()\r\n        }\r\n\r\n        private fun startTaskLogging(){\r\n            //set connection settings\r\n            try {\r\n                setBridgePersistDelay(1000 / ConfigSettings.LOGGING_RATE.toInt())\r\n                setBridgePersistQDelay(ConfigSettings.Q_CORRECTION.toInt())\r\n            } catch (e: Exception) {\r\n                DebugLog.e(TAG, \"Invalid logging rates.\", e)\r\n            }\r\n\r\n            UDSLogger.setModeDSG(ConfigSettings.LOG_DSG.toBoolean())\r\n\r\n            //Write first frame\r\n            writePacket(UDSLogger.startTask(0))\r\n        }\r\n\r\n        private fun startTaskFlashing(){\r\n            DebugLog.d(TAG,\"Setting stmin to 350\")\r\n            setBridgeSTMIN(350)\r\n            writePacket(UDSFlasher.startTask(0))\r\n        }\r\n\r\n        private fun startTaskGetInfo(){\r\n            writePacket(UDSInfo.startTask(0))\r\n        }\r\n\r\n        private fun startTaskGetTuneInfo(){\r\n            writePacket(UDSInfo.startTask(TUNE_INFO_PIDS[0]))\r\n        }\r\n\r\n        private fun startTaskClearDTC() {\r\n            writePacket(UDSdtc.startTask(0, true))\r\n        }\r\n\r\n        private fun startTaskGetDTC() {\r\n            writePacket(UDSdtc.startTask(0, false))\r\n        }\r\n\r\n        private fun startTaskSetAdapter() {\r\n            changeGAPName(ConfigSettings.ADAPTER_NAME.value.toString())\r\n            setTaskState(UDSTask.NONE)\r\n        }\r\n\r\n        private fun processPacket(buff: ByteArray?) {\r\n            if(mPasswordAccepted) {\r\n                when (mTask) {\r\n                    UDSTask.NONE        -> processPacketNone(buff)\r\n                    UDSTask.LOGGING     -> processPacketLogging(buff)\r\n                    UDSTask.FLASHING    -> processPacketFlashing(buff)\r\n                    UDSTask.TUNE_INFO   -> processPacketTuneInfo(buff)\r\n                    UDSTask.INFO        -> processPacketGetInfo(buff)\r\n                    UDSTask.DTC_GET     -> processPacketGetDTC(buff)\r\n                    UDSTask.DTC_CLEAR   -> processPacketClearDTC(buff)\r\n                    UDSTask.SET_ADAPTER -> processPacketSetAdapter(buff)\r\n                }\r\n\r\n                //Only increment task packet count when buffer isn't empty\r\n                buff?.let {\r\n                    if (it.count() >= BLEHeader().size()) {\r\n                        mTaskTick++\r\n                    }\r\n                }\r\n\r\n                //check if we are ready to switch to a new task\r\n                if (mTaskNext != UDSTask.NONE) {\r\n                    mTaskTimeNext = System.currentTimeMillis() + TASK_END_DELAY\r\n\r\n                    //Write debug log\r\n                    DebugLog.d(TAG, \"Packet extended task start delay.\")\r\n                } else {\r\n                    mTaskTimeNext = System.currentTimeMillis() + TASK_BUMP_DELAY\r\n                }\r\n            } else {\r\n                buff?.let {\r\n                    if (it.count() == BLEHeader().size() + 1) {\r\n                        val bleHeader = BLEHeader()\r\n                        bleHeader.fromByteArray(it)\r\n                        if(bleHeader.isValid() && it[8] == 0xFF.toByte()) {\r\n                            DebugLog.i(TAG, \"Password accepted.\")\r\n                            mPasswordAccepted = true\r\n                        } else {\r\n                            DebugLog.i(TAG, \"Password failed.\")\r\n                            doDisconnect()\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private fun processPacketNone(buff: ByteArray?) {\r\n            buff?.let {\r\n                if(buff.count() > 8) {\r\n                    //Broadcast a new message\r\n                    val intentMessage = Intent(GUIMessage.READ.toString())\r\n                    intentMessage.putExtra(\r\n                        GUIMessage.READ.toString(),\r\n                        buff.copyOfRange(8, buff.size)\r\n                    )\r\n                    sendBroadcast(intentMessage)\r\n                }\r\n            }\r\n        }\r\n\r\n        private fun processPacketLogging(buff: ByteArray?) {\r\n            buff?.let {\r\n                //Process frame\r\n                val result = UDSLogger.processPacket(mTaskTick, buff, applicationContext)\r\n\r\n                //Are we still sending initial frames?\r\n                if (mTaskTick < UDSLogger.frameCount() - 1) {\r\n                    //If we failed init abort\r\n                    if (result != UDSReturn.OK) {\r\n                        DebugLog.w(TAG, \"Unable to initialize logging, UDS Error: $result\")\r\n                        setTaskState(UDSTask.NONE)\r\n                    } else { //else continue init\r\n                        writePacket(UDSLogger.startTask(mTaskTick+1))\r\n                    }\r\n                } else { //We are receiving data\r\n                    if (result != UDSReturn.OK) {\r\n                        DebugLog.w(TAG, \"Logging data error, UDS Error: $result\")\r\n                        setTaskState(UDSTask.NONE)\r\n                    } else {\r\n                        //Broadcast new PID data\r\n                        if (System.currentTimeMillis() > mTaskNextBroadcast) {\r\n                            val intentMessage = Intent(GUIMessage.READ_LOG.toString())\r\n                            intentMessage.putExtra(\"readCount\", mTaskTick)\r\n                            intentMessage.putExtra(\"readTime\", System.currentTimeMillis() - mTaskTime)\r\n                            intentMessage.putExtra(\"readResult\", result)\r\n                            sendBroadcast(intentMessage)\r\n                            try {\r\n                                mTaskNextBroadcast = System.currentTimeMillis() + (1000 / (ConfigSettings.DISPLAY_RATE.toInt())).toLong()\r\n                            } catch (e: Exception) {\r\n                                mTaskNextBroadcast = System.currentTimeMillis() + 100\r\n                                DebugLog.d(TAG, \"Invalid display rate\")\r\n                            }\r\n                        }\r\n\r\n                        //If we changed logging write states broadcast a new message and set LED color\r\n                        if (UDSLogger.isEnabled() != mLogWriteState) {\r\n                            //Broadcast new message\r\n                            val intentMessage = Intent(GUIMessage.WRITE_LOG.toString())\r\n                            intentMessage.putExtra(\r\n                                GUIMessage.WRITE_LOG.toString(),\r\n                                UDSLogger.isEnabled()\r\n                            )\r\n                            sendBroadcast(intentMessage)\r\n\r\n                            if (UDSLogger.isEnabled()) {\r\n                                setBridgeLED(0, 0, 0x80)\r\n                            } else {\r\n                                setBridgeLED(0, 0x80, 0)\r\n                            }\r\n\r\n                            //Update current write state\r\n                            mLogWriteState = UDSLogger.isEnabled()\r\n                        }\r\n                    }\r\n                }\r\n            } ?: if(UDSLogger.processPacket(mTaskTick, buff, applicationContext) != UDSReturn.OK) {\r\n                DebugLog.w(TAG, \"Logging timeout.\")\r\n                setTaskState(UDSTask.NONE)\r\n            }\r\n        }\r\n\r\n        private fun processPacketFlashing(buff: ByteArray?) {\r\n\r\n            if(buff != null) {\r\n                val response = buff.copyOfRange(8, buff.size)\r\n\r\n                val flashStatus = UDSFlasher.processFlashCAL(mTaskTick, response)\r\n\r\n                if (UDSFlasher.getInfo() != \"\") {\r\n                    DebugLog.d(\r\n                        TAG,\r\n                        \"Received status message from UDSFlash: ${UDSFlasher.getInfo()}\"\r\n                    )\r\n                    val intentMessage = Intent(GUIMessage.FLASH_INFO.toString())\r\n                    intentMessage.putExtra(GUIMessage.FLASH_INFO.toString(), UDSFlasher.getInfo())\r\n                    sendBroadcast(intentMessage)\r\n                }\r\n\r\n                val progress = UDSFlasher.getProgress()\r\n\r\n                if(progress > 0){\r\n                    DebugLog.d(TAG, \"Total Progress: $progress\")\r\n\r\n                    val intentMessage = Intent(GUIMessage.FLASH_PROGRESS_SHOW.toString())\r\n                    intentMessage.putExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), true)\r\n                    sendBroadcast(intentMessage)\r\n\r\n                    val intentMessage2 = Intent(GUIMessage.FLASH_PROGRESS.toString())\r\n                    intentMessage2.putExtra(GUIMessage.FLASH_PROGRESS.toString(), progress)\r\n                    sendBroadcast(intentMessage2)\r\n                }\r\n                else{\r\n                    val intentMessage = Intent(GUIMessage.FLASH_PROGRESS_SHOW.toString())\r\n                    intentMessage.putExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), false)\r\n                    sendBroadcast(intentMessage)\r\n                }\r\n\r\n\r\n                when (flashStatus) {\r\n                    UDSReturn.FLASH_CONFIRM -> {\r\n                        val intentMessage = Intent(GUIMessage.FLASH_CONFIRM.toString())\r\n                        sendBroadcast(intentMessage)\r\n                    }\r\n                    UDSReturn.OK -> {\r\n                        val intentMessage = Intent(GUIMessage.FLASH_BUTTON_RESET.toString())\r\n                        sendBroadcast(intentMessage)\r\n                    }\r\n                    UDSReturn.ABORTED -> {\r\n                        val intentMessage = Intent(GUIMessage.FLASH_BUTTON_RESET.toString())\r\n                        sendBroadcast(intentMessage)\r\n                    }\r\n                    UDSReturn.FLASH_COMPLETE -> {\r\n\r\n                    }\r\n                    UDSReturn.CLEAR_DTC_REQUEST -> {\r\n\r\n                            //Send clear request\r\n                            val bleHeader = BLEHeader()\r\n                            bleHeader.rxID = 0x7E8\r\n                            bleHeader.txID = 0x700\r\n                            bleHeader.cmdSize = 1\r\n                            bleHeader.cmdFlags = BLECommandFlags.PER_CLEAR.value\r\n                            val dataBytes = byteArrayOf(0x04.toByte())\r\n                            val buf = bleHeader.toByteArray() + dataBytes\r\n                            mWriteQueue.add(buf)\r\n\r\n                    }\r\n                    UDSReturn.COMMAND_QUEUED -> {\r\n                        var queuedCommand = buildBLEFrame(UDSFlasher.getCommand())\r\n                        //DebugLog.d(TAG,\"UDSFlash, built BLE frame: \" + queuedCommand.toHex())\r\n\r\n                        writePacket(queuedCommand)\r\n\r\n                    }\r\n                    else -> {\r\n                        DebugLog.d(TAG, \"Received ${flashStatus} from UDSFlash\")\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                if(UDSFlasher.getSubtask() == FLASH_ECU_CAL_SUBTASK.FLASH_BLOCK || UDSFlasher.getSubtask() == FLASH_ECU_CAL_SUBTASK.PATCH_BLOCK){\r\n                    //Do NOTHING\r\n                }\r\n                else {\r\n                    DebugLog.d(TAG, \"Sending tester present.... Flasher is idle\")\r\n                    mWriteQueue.add(buildBLEFrame(UDS_COMMAND.TESTER_PRESENT.bytes))\r\n                }\r\n            }\r\n        }\r\n\r\n        private fun processPacketGetInfo(buff: ByteArray?) {\r\n            buff?.let {\r\n                if (UDSInfo.processPacket(mTaskTick, buff) == UDSReturn.OK) {\r\n                    val intentMessage = Intent(GUIMessage.UTILITY_INFO.toString())\r\n                    intentMessage.putExtra(GUIMessage.UTILITY_INFO.toString(), UDSInfo.getInfo())\r\n                    sendBroadcast(intentMessage)\r\n\r\n                    if (mTaskTick < UDSInfo.getStartCount() - 1) {\r\n                        writePacket(UDSInfo.startTask(mTaskTick + 1))\r\n                    } else {\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                } else {\r\n                    setTaskState(UDSTask.NONE)\r\n                }\r\n            }?: if(UDSInfo.processPacket(mTaskTick, buff) != UDSReturn.OK) {\r\n                DebugLog.w(TAG, \"GetInfo timeout.\")\r\n                setTaskState(UDSTask.NONE)\r\n            }\r\n        }\r\n\r\n        private fun processPacketTuneInfo(buff: ByteArray?) {\r\n            buff?.let {\r\n                if (UDSInfo.processPacket(TUNE_INFO_PIDS[mTaskTick], buff) == UDSReturn.OK) {\r\n                    val intentMessage = Intent(GUIMessage.FLASH_INFO.toString())\r\n                    intentMessage.putExtra(GUIMessage.FLASH_INFO.toString(), UDSInfo.getInfo())\r\n                    sendBroadcast(intentMessage)\r\n\r\n                    if (mTaskTick < TUNE_INFO_PIDS.size - 1) {\r\n                        writePacket(UDSInfo.startTask(TUNE_INFO_PIDS[mTaskTick + 1]))\r\n                    } else {\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                } else {\r\n                    setTaskState(UDSTask.NONE)\r\n                }\r\n            }?: if(UDSInfo.processPacket(mTaskTick, buff) != UDSReturn.OK) {\r\n                DebugLog.w(TAG, \"GetInfo timeout.\")\r\n                setTaskState(UDSTask.NONE)\r\n            }\r\n        }\r\n\r\n\r\n        private fun processPacketGetDTC(buff: ByteArray?) {\r\n            buff?.let {\r\n                when (UDSdtc.processPacket(mTaskTick, buff, false)) {\r\n                    UDSReturn.OK -> {\r\n                        if (mTaskTick < UDSdtc.getStartCount(false) - 1) {\r\n                            writePacket(UDSdtc.startTask(mTaskTick + 1, false))\r\n                        }\r\n                    }\r\n                    UDSReturn.COMPLETE -> {\r\n                        val intentMessage = Intent(GUIMessage.UTILITY_INFO.toString())\r\n                        intentMessage.putExtra(GUIMessage.UTILITY_INFO.toString(), UDSdtc.getInfo())\r\n                        sendBroadcast(intentMessage)\r\n\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                    else -> {\r\n                        val intentMessage = Intent(GUIMessage.UTILITY_INFO.toString())\r\n                        intentMessage.putExtra(GUIMessage.UTILITY_INFO.toString(), UDSdtc.getInfo())\r\n                        sendBroadcast(intentMessage)\r\n\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                }\r\n            }?: if(UDSdtc.processPacket(mTaskTick, buff, false) != UDSReturn.OK) {\r\n                DebugLog.w(TAG, \"GetDTC timeout.\")\r\n                setTaskState(UDSTask.NONE)\r\n            }\r\n        }\r\n\r\n        private fun processPacketClearDTC(buff: ByteArray?) {\r\n            buff?.let {\r\n                if (UDSdtc.processPacket(mTaskTick, buff, true) == UDSReturn.OK) {\r\n                    val intentMessage = Intent(GUIMessage.UTILITY_INFO.toString())\r\n                    intentMessage.putExtra(GUIMessage.UTILITY_INFO.toString(), UDSdtc.getInfo())\r\n                    sendBroadcast(intentMessage)\r\n\r\n                    if (mTaskTick < UDSdtc.getStartCount(true) - 1) {\r\n                        writePacket(UDSdtc.startTask(mTaskTick + 1, true))\r\n                    } else {\r\n                        setTaskState(UDSTask.NONE)\r\n                    }\r\n                } else {\r\n                    setTaskState(UDSTask.NONE)\r\n                }\r\n            }?: if(UDSdtc.processPacket(mTaskTick, buff, true) != UDSReturn.OK) {\r\n                DebugLog.w(TAG, \"ClearDTC timeout.\")\r\n                setTaskState(UDSTask.NONE)\r\n            }\r\n        }\r\n\r\n        private fun processPacketSetAdapter(buff: ByteArray?) {\r\n            buff?.let {\r\n\r\n            }\r\n        }\r\n\r\n        private fun clearBridgePersist() {\r\n            //Disable persist mode\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 0\r\n            bleHeader.cmdFlags = BLECommandFlags.PER_CLEAR.value\r\n            writePacket(bleHeader.toByteArray())\r\n        }\r\n\r\n        private fun setBridgePersistDelay(delay: Int) {\r\n            //Set persist delay\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 2\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.PERSIST_DELAY.value\r\n            val dataBytes = byteArrayOf((delay and 0xFF).toByte(), ((delay and 0xFF00) shr 8).toByte())\r\n            val buff = bleHeader.toByteArray() + dataBytes\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun setBridgePersistQDelay(delay: Int) {\r\n            //Set persist Q delay\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 2\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.PERSIST_Q_DELAY.value\r\n            val dataBytes = byteArrayOf((delay and 0xFF).toByte(), ((delay and 0xFF00) shr 8).toByte())\r\n            val buff = bleHeader.toByteArray() + dataBytes\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun setBridgeLED(r: Int, g: Int, b: Int) {\r\n            //Set LED color\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 4\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.LED_COLOR.value\r\n            val dataBytes = byteArrayOf((b and 0xFF).toByte(), (r and 0xFF).toByte(), (g and 0xFF).toByte(), 0x00.toByte())\r\n            val buff = bleHeader.toByteArray() + dataBytes\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun setBridgeSTMIN(amount: Int) {\r\n            //set STMIN\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = 2\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.ISOTP_STMIN.value\r\n            val buff = bleHeader.toByteArray() + byteArrayOf((amount shr 0).toByte(), (amount shr 8).toByte())\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun buildBLEFrame(udsCommand: ByteArray): ByteArray{\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = udsCommand.size\r\n            bleHeader.cmdFlags = BLECommandFlags.PER_CLEAR.value\r\n\r\n            return bleHeader.toByteArray() + udsCommand\r\n        }\r\n\r\n        private fun setPassword(password: String) {\r\n            //set password\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = password.length\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.PASSWORD.value\r\n            val buff = bleHeader.toByteArray() + password.toByteArray()\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun sendPassword(password: String) {\r\n            //send password\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = password.length\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLECommandFlags.SET_GET.value or BLESettings.PASSWORD.value\r\n            val buff = bleHeader.toByteArray() + password.toByteArray()\r\n            writePacket(buff)\r\n        }\r\n\r\n        private fun changeGAPName(gap: String) {\r\n            //set GAP name\r\n            val bleHeader = BLEHeader()\r\n            bleHeader.cmdSize = gap.length\r\n            bleHeader.cmdFlags = BLECommandFlags.SETTINGS.value or BLESettings.GAP.value\r\n            val buff = bleHeader.toByteArray() + gap.toByteArray()\r\n            writePacket(buff)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/BTService.kt b/app/src/main/java/com/app/simostools/BTService.kt
--- a/app/src/main/java/com/app/simostools/BTService.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/BTService.kt	(date 1639320649350)
@@ -101,7 +101,7 @@
                 BTServiceTask.DO_DISCONNECT.toString()      -> doDisconnect()
                 BTServiceTask.DO_START_LOG.toString()       -> mConnectionThread?.setTaskState(UDSTask.LOGGING)
                 BTServiceTask.DO_START_FLASH.toString()     -> mConnectionThread?.setTaskState(UDSTask.FLASHING)
-                BTServiceTask.DO_GET_TUNE_INFO.toString()     -> mConnectionThread?.setTaskState(UDSTask.TUNE_INFO)
+                BTServiceTask.DO_GET_TUNE_INFO.toString()   -> mConnectionThread?.setTaskState(UDSTask.TUNE_INFO)
                 BTServiceTask.DO_GET_INFO.toString()        -> mConnectionThread?.setTaskState(UDSTask.INFO)
                 BTServiceTask.DO_CLEAR_DTC.toString()       -> mConnectionThread?.setTaskState(UDSTask.DTC_CLEAR)
                 BTServiceTask.DO_GET_DTC.toString()         -> mConnectionThread?.setTaskState(UDSTask.DTC_GET)
@@ -460,16 +460,8 @@
         UDSLogger.clear()
         PIDs.clear()
         UDSFlasher.clear()
-        DebugLog.i(TAG, "Shutting down down service.")
+        DebugLog.i(TAG, "Shutting down service.")
         DebugLog.close()
-        /*val handler = Handler()
-        val r: Runnable = object : Runnable {
-            override fun run() {
-                stopForeground(true)
-                stopSelfResult(startId)
-            }
-        }
-        handler.postDelayed(r, 1000)*/
         stopForeground(true)
         stopSelfResult(startId)
     }
@@ -997,13 +989,11 @@
         }
 
         private fun processPacketFlashing(buff: ByteArray?) {
-
-            if(buff != null) {
-                val response = buff.copyOfRange(8, buff.size)
-
+            buff?.let {
+                val response = buff.copyOfRange(BLEHeader().size(), buff.size)
                 val flashStatus = UDSFlasher.processFlashCAL(mTaskTick, response)
 
-                if (UDSFlasher.getInfo() != "") {
+                if (UDSFlasher.getInfo().isNotEmpty()) {
                     DebugLog.d(
                         TAG,
                         "Received status message from UDSFlash: ${UDSFlasher.getInfo()}"
@@ -1014,8 +1004,7 @@
                 }
 
                 val progress = UDSFlasher.getProgress()
-
-                if(progress > 0){
+                if(progress > 0) {
                     DebugLog.d(TAG, "Total Progress: $progress")
 
                     val intentMessage = Intent(GUIMessage.FLASH_PROGRESS_SHOW.toString())
@@ -1025,14 +1014,12 @@
                     val intentMessage2 = Intent(GUIMessage.FLASH_PROGRESS.toString())
                     intentMessage2.putExtra(GUIMessage.FLASH_PROGRESS.toString(), progress)
                     sendBroadcast(intentMessage2)
-                }
-                else{
+                } else {
                     val intentMessage = Intent(GUIMessage.FLASH_PROGRESS_SHOW.toString())
                     intentMessage.putExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), false)
                     sendBroadcast(intentMessage)
                 }
 
-
                 when (flashStatus) {
                     UDSReturn.FLASH_CONFIRM -> {
                         val intentMessage = Intent(GUIMessage.FLASH_CONFIRM.toString())
@@ -1043,14 +1030,13 @@
                         sendBroadcast(intentMessage)
                     }
                     UDSReturn.ABORTED -> {
-                        val intentMessage = Intent(GUIMessage.FLASH_BUTTON_RESET.toString())
+                        var intentMessage = Intent(GUIMessage.FLASH_BUTTON_RESET.toString())
                         sendBroadcast(intentMessage)
                     }
                     UDSReturn.FLASH_COMPLETE -> {
 
                     }
                     UDSReturn.CLEAR_DTC_REQUEST -> {
-
                             //Send clear request
                             val bleHeader = BLEHeader()
                             bleHeader.rxID = 0x7E8
@@ -1060,29 +1046,23 @@
                             val dataBytes = byteArrayOf(0x04.toByte())
                             val buf = bleHeader.toByteArray() + dataBytes
                             mWriteQueue.add(buf)
-
                     }
                     UDSReturn.COMMAND_QUEUED -> {
-                        var queuedCommand = buildBLEFrame(UDSFlasher.getCommand())
+                        val queuedCommand = buildBLEFrame(UDSFlasher.getCommand())
                         //DebugLog.d(TAG,"UDSFlash, built BLE frame: " + queuedCommand.toHex())
 
                         writePacket(queuedCommand)
-
                     }
                     else -> {
                         DebugLog.d(TAG, "Received ${flashStatus} from UDSFlash")
                         setTaskState(UDSTask.NONE)
                     }
                 }
-            }
-            else{
-                if(UDSFlasher.getSubtask() == FLASH_ECU_CAL_SUBTASK.FLASH_BLOCK || UDSFlasher.getSubtask() == FLASH_ECU_CAL_SUBTASK.PATCH_BLOCK){
-                    //Do NOTHING
-                }
-                else {
-                    DebugLog.d(TAG, "Sending tester present.... Flasher is idle")
-                    mWriteQueue.add(buildBLEFrame(UDS_COMMAND.TESTER_PRESENT.bytes))
-                }
+            }?: if(UDSFlasher.getSubtask() == FLASH_ECU_CAL_SUBTASK.FLASH_BLOCK || UDSFlasher.getSubtask() == FLASH_ECU_CAL_SUBTASK.PATCH_BLOCK){
+                //Do NOTHING
+            } else {
+                DebugLog.d(TAG, "Sending tester present.... Flasher is idle")
+                mWriteQueue.add(buildBLEFrame(UDS_COMMAND.TESTER_PRESENT.bytes))
             }
         }
 
Index: app/src/main/java/com/app/simostools/SettingsGeneralFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.app.Activity\r\nimport android.app.AlertDialog\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.navigation.fragment.findNavController\r\nimport android.widget.SeekBar.OnSeekBarChangeListener\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport android.widget.Toast\r\nimport androidx.core.content.ContextCompat\r\n\r\nclass SettingsViewModel : ViewModel() {\r\n    var logMode         = UDSLoggingMode.MODE_22\r\n    var logDSG          = false\r\n    var adapterName     = \"\"\r\n}\r\n\r\nclass SettingsGeneralFragment : Fragment() {\r\n    private val TAG                                     = \"SettingsGeneral\"\r\n    private var mLoadCallback: (() -> Unit)?            = null\r\n    private lateinit var mViewModel: SettingsViewModel\r\n\r\n    var resultPickLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n        if (result.resultCode == Activity.RESULT_OK) {\r\n            val uri: Uri? = result.data?.data\r\n            uri?.let {\r\n                val addMin = mViewModel.logMode.addressMin\r\n                val addMax = mViewModel.logMode.addressMax\r\n                val pidList = PIDCSVFile.readStream(activity?.contentResolver?.openInputStream(uri), addMin, addMax)\r\n                if(pidList != null) {\r\n                    val CSVFileName = if(mViewModel.logDSG) getString(R.string.filename_pid_csv, \"DSG\")\r\n                    else getString(R.string.filename_pid_csv, mViewModel.logMode.cfgName)\r\n                    if(PIDCSVFile.write(CSVFileName, context, pidList, true)) {\r\n\r\n                        PIDs.setList(mViewModel.logMode, pidList, mViewModel.logDSG)\r\n                        TempPIDS.reset(context)\r\n                        mLoadCallback?.invoke()\r\n                        Toast.makeText(activity, \"Success\", Toast.LENGTH_SHORT).show()\r\n                    } else {\r\n                        Toast.makeText(activity, \"Failed\", Toast.LENGTH_SHORT).show()\r\n                    }\r\n                } else {\r\n                    Toast.makeText(activity, \"Failed\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n\r\n        DebugLog.d(TAG, \"resultPickLauncher\")\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        DebugLog.d(TAG, \"onCreateView\")\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_settings_general, container, false)\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n\r\n        mLoadCallback = null\r\n\r\n        DebugLog.d(TAG, \"onDestroyView\")\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        mViewModel = ViewModelProvider(this).get(SettingsViewModel::class.java)\r\n\r\n        val csv22Button = view.findViewById<SwitchButton>(R.id.button22CSV)\r\n        csv22Button.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                var chooseFile = Intent(Intent.ACTION_GET_CONTENT).apply {\r\n                    addCategory(Intent.CATEGORY_OPENABLE)\r\n                    type = \"text/*\"\r\n                }\r\n                chooseFile = Intent.createChooser(chooseFile, \"Choose a 22 A CSV\")\r\n                mViewModel.logMode = UDSLoggingMode.MODE_22\r\n                mViewModel.logDSG = false\r\n                resultPickLauncher.launch(chooseFile)\r\n            }\r\n        }\r\n\r\n        val csv22ButtonReset = view.findViewById<SwitchButton>(R.id.button22CSVReset)\r\n        csv22ButtonReset.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                val builder = AlertDialog.Builder(context)\r\n                //Setting message manually and performing action on button click\r\n                builder.setMessage(\"Do you want to load mode 22 csv defaults?\")\r\n                    .setCancelable(false)\r\n                    .setPositiveButton(\"Yes\") { _, _ ->\r\n                        PIDs.loadDefaultPIDS(UDSLoggingMode.MODE_22)\r\n                        TempPIDS.reset(context)\r\n                        TempPIDS.save(context)\r\n                        mLoadCallback?.invoke()\r\n                    }\r\n                    .setNegativeButton(\"No\") { _, _ -> }\r\n                //Creating dialog box\r\n                val alert: AlertDialog = builder.create()\r\n\r\n                //Setting the title manually\r\n                alert.setTitle(\"Reset mode 22 CSV\")\r\n                alert.show()\r\n            }\r\n        }\r\n\r\n        val csv3EButton = view.findViewById<SwitchButton>(R.id.button3ECSV)\r\n        csv3EButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                var chooseFile = Intent(Intent.ACTION_GET_CONTENT).apply {\r\n                    addCategory(Intent.CATEGORY_OPENABLE)\r\n                    type = \"text/*\"\r\n                }\r\n                chooseFile = Intent.createChooser(chooseFile, \"Choose a 3E A CSV\")\r\n                mViewModel.logMode = UDSLoggingMode.MODE_3E\r\n                mViewModel.logDSG = false\r\n                resultPickLauncher.launch(chooseFile)\r\n            }\r\n        }\r\n\r\n        val csv3EButtonReset = view.findViewById<SwitchButton>(R.id.button3ECSVReset)\r\n        csv3EButtonReset.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                val builder = AlertDialog.Builder(context)\r\n                //Setting message manually and performing action on button click\r\n                builder.setMessage(\"Do you want to load mode 3E csv defaults?\")\r\n                    .setCancelable(false)\r\n                    .setPositiveButton(\"Yes\") { _, _ ->\r\n                        PIDs.loadDefaultPIDS(UDSLoggingMode.MODE_3E)\r\n                        TempPIDS.reset(context)\r\n                        TempPIDS.save(context)\r\n                        mLoadCallback?.invoke()\r\n                    }\r\n                    .setNegativeButton(\"No\") { _, _ -> }\r\n                //Creating dialog box\r\n                val alert: AlertDialog = builder.create()\r\n\r\n                //Setting the title manually\r\n                alert.setTitle(\"Reset mode 3E CSV\")\r\n                alert.show()\r\n            }\r\n        }\r\n\r\n        val csvDSGButton = view.findViewById<SwitchButton>(R.id.buttonDSGCSV)\r\n        csvDSGButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                var chooseFile = Intent(Intent.ACTION_GET_CONTENT).apply {\r\n                    addCategory(Intent.CATEGORY_OPENABLE)\r\n                    type = \"text/*\"\r\n                }\r\n                chooseFile = Intent.createChooser(chooseFile, \"Choose a DSG A CSV\")\r\n                mViewModel.logMode = UDSLoggingMode.MODE_22\r\n                mViewModel.logDSG = true\r\n                resultPickLauncher.launch(chooseFile)\r\n            }\r\n        }\r\n\r\n        val csvDSGButtonReset = view.findViewById<SwitchButton>(R.id.buttonDSGCSVReset)\r\n        csvDSGButtonReset.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                val builder = AlertDialog.Builder(context)\r\n                //Setting message manually and performing action on button click\r\n                builder.setMessage(\"Do you want to load mode DSG csv defaults?\")\r\n                    .setCancelable(false)\r\n                    .setPositiveButton(\"Yes\") { _, _ ->\r\n                        PIDs.loadDefaultPIDSDSG()\r\n                        TempPIDS.reset(context)\r\n                        TempPIDS.save(context)\r\n                        mLoadCallback?.invoke()\r\n                    }\r\n                    .setNegativeButton(\"No\") { _, _ -> }\r\n                //Creating dialog box\r\n                val alert: AlertDialog = builder.create()\r\n\r\n                //Setting the title manually\r\n                alert.setTitle(\"Reset mode DSG CSV\")\r\n                alert.show()\r\n            }\r\n        }\r\n\r\n        val setAdapterButton = view.findViewById<SwitchButton>(R.id.buttonAdapterName)\r\n        setAdapterButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                val builder = AlertDialog.Builder(context)\r\n                var adapterName = view.findViewById<EditText>(R.id.editTextAdapterName).text.toString()\r\n                if(adapterName.length > MAX_GAP_LENGTH)\r\n                    adapterName = adapterName.subSequence(0, MAX_GAP_LENGTH).toString()\r\n                adapterName = adapterName.uppercase()\r\n                adapterName = adapterName.replace(\" \", \"_\")\r\n\r\n                if(adapterName.isNotEmpty()) {\r\n                    //Setting message manually and performing action on button click\r\n                    builder.setMessage(\"Are you sure you would like to set the name of the adapter to $adapterName?\")\r\n                        .setCancelable(false)\r\n                        .setPositiveButton(\"Yes\") { _, _ ->\r\n                            mViewModel.adapterName = adapterName\r\n                            ConfigSettings.ADAPTER_NAME.value = adapterName\r\n                            view.findViewById<EditText>(R.id.editTextAdapterName)\r\n                                .setText(adapterName)\r\n                            sendServiceMessage(BTServiceTask.DO_SET_ADAPTER.toString())\r\n                        }\r\n                        .setNegativeButton(\"No\") { _, _ -> }\r\n                    //Creating dialog box\r\n                    val alert: AlertDialog = builder.create()\r\n\r\n                    //Setting the title manually\r\n                    alert.setTitle(\"Set adapter name\")\r\n                    alert.show()\r\n                }\r\n            }\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetBGNormalColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.BG_NORMAL)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetBGWarningColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.BG_WARN)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetTextColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.TEXT)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetGaugeNormalColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.GAUGE_NORMAL)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetGaugeWarnColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.GAUGE_WARN)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetGaugeBGColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.GAUGE_BG)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetGaugeValueColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.GAUGE_VALUE)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetErrorColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.ST_ERROR)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetNoneColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.ST_NONE)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetConnectingColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.ST_CONNECTING)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetConnectedColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.ST_CONNECTED)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetLoggingColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.ST_LOGGING)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetWritingColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.ST_WRITING)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetBTTextColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.BT_TEXT)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetBTBGColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.BT_BG)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<Button>(R.id.buttonSetBTRimColor).setOnClickListener {\r\n            ColorSettings.getColor(ColorList.BT_RIM)\r\n            findNavController().navigate(R.id.action_SettingsFragment_to_ColorFragment)\r\n        }\r\n\r\n        view.findViewById<SeekBar>(R.id.seekBarDisplayRate).setOnSeekBarChangeListener(object :\r\n            OnSeekBarChangeListener {\r\n            override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n            }\r\n\r\n            override fun onStartTrackingTouch(seekBar: SeekBar) {\r\n            }\r\n\r\n            override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n                view.findViewById<TextView>(R.id.textViewDisplayRate).text = getString(R.string.textview_settings_display_rate, view.findViewById<SeekBar>(R.id.seekBarDisplayRate).progress)\r\n            }\r\n        })\r\n\r\n        view.findViewById<SeekBar>(R.id.seekBarLoggingRate).setOnSeekBarChangeListener(object :\r\n            OnSeekBarChangeListener {\r\n            override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n            }\r\n\r\n            override fun onStartTrackingTouch(seekBar: SeekBar) {\r\n            }\r\n\r\n            override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n                view.findViewById<TextView>(R.id.textViewLoggingRate).text = getString(R.string.textview_settings_logging_rate, view.findViewById<SeekBar>(R.id.seekBarLoggingRate).progress)\r\n            }\r\n        })\r\n\r\n        view.findViewById<SeekBar>(R.id.seekBarQCorrection).setOnSeekBarChangeListener(object :\r\n            OnSeekBarChangeListener {\r\n            override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n            }\r\n\r\n            override fun onStartTrackingTouch(seekBar: SeekBar) {\r\n            }\r\n\r\n            override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n                view.findViewById<TextView>(R.id.textViewQCorrection).text = getString(R.string.textview_settings_q_correction, view.findViewById<SeekBar>(R.id.seekBarQCorrection).progress)\r\n            }\r\n        })\r\n\r\n        doReset()\r\n\r\n        DebugLog.d(TAG, \"onViewCreated\")\r\n    }\r\n\r\n    private fun doReset() {\r\n        view?.let { currentView ->\r\n            //Get update rate\r\n            currentView.findViewById<SeekBar>(R.id.seekBarDisplayRate)?.let { updateRate ->\r\n                updateRate.min = 5\r\n                updateRate.max = 30\r\n                updateRate.progress = ConfigSettings.DISPLAY_RATE.toInt()\r\n                updateRate.callOnClick()\r\n            }\r\n\r\n            //Get Logging rate\r\n            currentView.findViewById<SeekBar>(R.id.seekBarLoggingRate)?.let { persistDelay ->\r\n                persistDelay.min = 10\r\n                persistDelay.max = 150\r\n                persistDelay.progress = ConfigSettings.LOGGING_RATE.toInt()\r\n                persistDelay.callOnClick()\r\n            }\r\n\r\n            //Get queue delay\r\n            currentView.findViewById<SeekBar>(R.id.seekBarQCorrection)?.let { persistQDelay ->\r\n                persistQDelay.min = 1\r\n                persistQDelay.max = 25\r\n                persistQDelay.progress = ConfigSettings.Q_CORRECTION.toInt()\r\n                persistQDelay.callOnClick()\r\n            }\r\n\r\n            //Get gauge mode\r\n            when(ConfigSettings.GAUGE_TYPE.toGaugeType()) {\r\n                GaugeType.BAR_H -> currentView.findViewById<RadioButton>(R.id.radioButtonBARH).isChecked    = true\r\n                GaugeType.BAR_V -> currentView.findViewById<RadioButton>(R.id.radioButtonBARV).isChecked    = true\r\n                GaugeType.BASIC -> currentView.findViewById<RadioButton>(R.id.radioButtonBASIC).isChecked   = true\r\n                GaugeType.ROUND -> currentView.findViewById<RadioButton>(R.id.radioButtonROUND).isChecked   = true\r\n            }\r\n\r\n            //Get logging mode\r\n            when(UDSLogger.getMode()) {\r\n                UDSLoggingMode.MODE_22  -> currentView.findViewById<RadioButton>(R.id.radioButton22).isChecked  = true\r\n                else                    -> currentView.findViewById<RadioButton>(R.id.radioButton3E).isChecked  = true\r\n            }\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxLogDSG).isChecked = ConfigSettings.LOG_DSG.toBoolean()\r\n\r\n            //Get output directory\r\n            if(RequiredPermissions.READ_STORAGE.result == PackageManager.PERMISSION_DENIED) {\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonApplication).isChecked = true\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonDownloads).isEnabled = false\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonDocuments).isEnabled = false\r\n            } else {\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonDownloads).isEnabled = true\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonDocuments).isEnabled = true\r\n                when (ConfigSettings.OUT_DIRECTORY.toDirectory()) {\r\n                    DirectoryList.DOWNLOADS -> currentView.findViewById<RadioButton>(R.id.radioButtonDownloads).isChecked = true\r\n                    DirectoryList.DOCUMENTS -> currentView.findViewById<RadioButton>(R.id.radioButtonDocuments).isChecked = true\r\n                    DirectoryList.APP -> currentView.findViewById<RadioButton>(R.id.radioButtonApplication).isChecked = true\r\n                }\r\n            }\r\n            currentView.findViewById<EditText>(R.id.editTextLogSubFolder).setText(ConfigSettings.LOG_SUB_FOLDER.toString())\r\n\r\n            //Get draw minmax\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxDrawMinMax).isChecked = ConfigSettings.DRAW_MIN_MAX.toBoolean()\r\n\r\n            //Get draw graduations\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxDrawGrad).isChecked = ConfigSettings.DRAW_GRADUATIONS.toBoolean()\r\n\r\n            //Get cruise invert\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxInvertCruise).isChecked = ConfigSettings.INVERT_CRUISE.toBoolean()\r\n\r\n            //Get keep screen on\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxScreenOn).isChecked = ConfigSettings.KEEP_SCREEN_ON.toBoolean()\r\n\r\n            //Get calculate HP\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxCalcHP).isChecked = ConfigSettings.CALCULATE_HP.toBoolean()\r\n\r\n            //Get use MS2\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxUseAccel).isChecked = ConfigSettings.USE_MS2.toBoolean()\r\n\r\n            //Get always use portrait\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxAlwaysPortrait).isChecked = ConfigSettings.ALWAYS_PORTRAIT.toBoolean()\r\n\r\n            //Get auto log\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxAutoLog).isChecked = ConfigSettings.AUTO_LOG.toBoolean()\r\n\r\n            //Get log name\r\n            currentView.findViewById<EditText>(R.id.editTextLogName).setText(ConfigSettings.LOG_NAME.toString())\r\n\r\n            //Get adapter name\r\n            mViewModel.adapterName = ConfigSettings.ADAPTER_NAME.toString()\r\n            currentView.findViewById<EditText>(R.id.editTextAdapterName).setText(mViewModel.adapterName)\r\n\r\n            //Set colors\r\n            doSetColor()\r\n        }\r\n\r\n        DebugLog.d(TAG, \"doReset\")\r\n    }\r\n\r\n    fun doSetColor() {\r\n        view?.let { currentView ->\r\n            //Set font color\r\n            val color = ColorList.TEXT.value\r\n            currentView.findViewById<TextView>(R.id.textViewConnectionSettings).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewDisplayRate).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewLoggingRate).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewQCorrection).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewPIDCSV).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewOutputDirectory).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewLogSubFolder).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewDisplayType).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewLoggingMode).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewMiscOptions).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewLogName).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewAdapterName).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewCalcHPOptions).setTextColor(color)\r\n            currentView.findViewById<TextView>(R.id.textViewColorOptions).setTextColor(color)\r\n            currentView.findViewById<RadioButton>(R.id.radioButtonDownloads).setTextColor(color)\r\n            currentView.findViewById<RadioButton>(R.id.radioButtonDocuments).setTextColor(color)\r\n            currentView.findViewById<RadioButton>(R.id.radioButtonApplication).setTextColor(color)\r\n            currentView.findViewById<RadioButton>(R.id.radioButtonBARH).setTextColor(color)\r\n            currentView.findViewById<RadioButton>(R.id.radioButtonBARV).setTextColor(color)\r\n            currentView.findViewById<RadioButton>(R.id.radioButtonBASIC).setTextColor(color)\r\n            currentView.findViewById<RadioButton>(R.id.radioButtonROUND).setTextColor(color)\r\n            currentView.findViewById<RadioButton>(R.id.radioButton3E).setTextColor(color)\r\n            currentView.findViewById<RadioButton>(R.id.radioButton22).setTextColor(color)\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxDrawMinMax).setTextColor(color)\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxDrawGrad).setTextColor(color)\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxInvertCruise).setTextColor(color)\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxScreenOn).setTextColor(color)\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxAlwaysPortrait).setTextColor(color)\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxAutoLog).setTextColor(color)\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxCalcHP).setTextColor(color)\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxUseAccel).setTextColor(color)\r\n            currentView.findViewById<CheckBox>(R.id.checkBoxLogDSG).setTextColor(color)\r\n            currentView.findViewById<EditText>(R.id.editTextLogSubFolder).setTextColor(color)\r\n            currentView.findViewById<EditText>(R.id.editTextLogName).setTextColor(color)\r\n            currentView.findViewById<EditText>(R.id.editTextAdapterName).setTextColor(color)\r\n\r\n            //Set color boxes\r\n            currentView.findViewById<Button>(R.id.buttonSetBGNormalColor).setTextColor(ColorSettings.mColorList[ColorList.BG_NORMAL.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetBGNormalColor).setBackgroundColor(ColorSettings.mColorList[ColorList.BG_NORMAL.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetBGWarningColor).setTextColor(ColorSettings.mColorList[ColorList.BG_WARN.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetBGWarningColor).setBackgroundColor(ColorSettings.mColorList[ColorList.BG_WARN.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetTextColor).setTextColor(ColorSettings.mColorList[ColorList.TEXT.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetTextColor).setBackgroundColor(ColorSettings.mColorList[ColorList.TEXT.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetGaugeNormalColor).setTextColor(ColorSettings.mColorList[ColorList.GAUGE_NORMAL.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetGaugeNormalColor).setBackgroundColor(ColorSettings.mColorList[ColorList.GAUGE_NORMAL.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetGaugeWarnColor).setTextColor(ColorSettings.mColorList[ColorList.GAUGE_WARN.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetGaugeWarnColor).setBackgroundColor(ColorSettings.mColorList[ColorList.GAUGE_WARN.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetGaugeBGColor).setTextColor(ColorSettings.mColorList[ColorList.GAUGE_BG.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetGaugeBGColor).setBackgroundColor(ColorSettings.mColorList[ColorList.GAUGE_BG.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetGaugeValueColor).setTextColor(ColorSettings.mColorList[ColorList.GAUGE_VALUE.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetGaugeValueColor).setBackgroundColor(ColorSettings.mColorList[ColorList.GAUGE_VALUE.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetErrorColor).setTextColor(ColorSettings.mColorList[ColorList.ST_ERROR.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetErrorColor).setBackgroundColor(ColorSettings.mColorList[ColorList.ST_ERROR.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetNoneColor).setTextColor(ColorSettings.mColorList[ColorList.ST_NONE.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetNoneColor).setBackgroundColor(ColorSettings.mColorList[ColorList.ST_NONE.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetConnectingColor).setTextColor(ColorSettings.mColorList[ColorList.ST_CONNECTING.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetConnectingColor).setBackgroundColor(ColorSettings.mColorList[ColorList.ST_CONNECTING.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetConnectedColor).setTextColor(ColorSettings.mColorList[ColorList.ST_CONNECTED.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetConnectedColor).setBackgroundColor(ColorSettings.mColorList[ColorList.ST_CONNECTED.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetLoggingColor).setTextColor(ColorSettings.mColorList[ColorList.ST_LOGGING.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetLoggingColor).setBackgroundColor(ColorSettings.mColorList[ColorList.ST_LOGGING.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetWritingColor).setTextColor(ColorSettings.mColorList[ColorList.ST_WRITING.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetWritingColor).setBackgroundColor(ColorSettings.mColorList[ColorList.ST_WRITING.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetBTTextColor).setTextColor(ColorSettings.mColorList[ColorList.BT_TEXT.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetBTTextColor).setBackgroundColor(ColorSettings.mColorList[ColorList.BT_TEXT.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetBTRimColor).setTextColor(ColorSettings.mColorList[ColorList.BT_RIM.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetBTRimColor).setBackgroundColor(ColorSettings.mColorList[ColorList.BT_RIM.ordinal])\r\n            currentView.findViewById<Button>(R.id.buttonSetBTBGColor).setTextColor(ColorSettings.mColorList[ColorList.BT_BG.ordinal].toColorInverse())\r\n            currentView.findViewById<Button>(R.id.buttonSetBTBGColor).setBackgroundColor(ColorSettings.mColorList[ColorList.BT_BG.ordinal])\r\n\r\n            //Set dividers\r\n            currentView.findViewById<View>(R.id.divider1).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider2).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider3).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider4).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider5).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider6).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider7).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider8).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider9).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider10).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider11).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider12).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider13).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider14).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider15).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider16).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider17).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider18).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider19).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider20).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider21).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider22).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider23).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider24).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider25).setBackgroundColor(ColorList.BT_RIM.value)\r\n            currentView.findViewById<View>(R.id.divider26).setBackgroundColor(ColorList.BT_RIM.value)\r\n\r\n            //Set background color\r\n            currentView.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n        }\r\n        DebugLog.d(TAG, \"doSetColor\")\r\n    }\r\n\r\n    fun setLoadCallback(callback: (() -> Unit)?) {\r\n        mLoadCallback = callback\r\n    }\r\n\r\n    fun doSave() {\r\n        view?.let { currentView ->\r\n            // Set update rate\r\n            ConfigFile.set(ConfigSettings.DISPLAY_RATE.cfgName, currentView.findViewById<SeekBar>(R.id.seekBarDisplayRate).progress.toString())\r\n\r\n            // Set persist delay\r\n            ConfigFile.set(ConfigSettings.LOGGING_RATE.cfgName, currentView.findViewById<SeekBar>(R.id.seekBarLoggingRate).progress.toString())\r\n\r\n            // Set persist delay\r\n            ConfigFile.set(ConfigSettings.Q_CORRECTION.cfgName, currentView.findViewById<SeekBar>(R.id.seekBarQCorrection).progress.toString())\r\n\r\n            // Set gauge type\r\n            when {\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonBARH).isChecked -> ConfigFile.set(\r\n                    ConfigSettings.GAUGE_TYPE.cfgName,\r\n                    GaugeType.BAR_H.cfgName\r\n                )\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonBARV).isChecked -> ConfigFile.set(\r\n                    ConfigSettings.GAUGE_TYPE.cfgName,\r\n                    GaugeType.BAR_V.cfgName\r\n                )\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonBASIC).isChecked -> ConfigFile.set(\r\n                    ConfigSettings.GAUGE_TYPE.cfgName,\r\n                    GaugeType.BASIC.cfgName\r\n                )\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonROUND).isChecked -> ConfigFile.set(\r\n                    ConfigSettings.GAUGE_TYPE.cfgName,\r\n                    GaugeType.ROUND.cfgName\r\n                )\r\n            }\r\n\r\n            // Set logging mode\r\n            when (currentView.findViewById<RadioButton>(R.id.radioButton22).isChecked) {\r\n                true -> ConfigFile.set(UDSLoggingMode.MODE_22.key, UDSLoggingMode.MODE_22.cfgName)\r\n                false -> ConfigFile.set(UDSLoggingMode.MODE_3E.key, UDSLoggingMode.MODE_3E.cfgName)\r\n            }\r\n            ConfigFile.set(ConfigSettings.LOG_DSG.cfgName, currentView.findViewById<CheckBox>(R.id.checkBoxLogDSG).isChecked.toString())\r\n\r\n            // Set default output folder\r\n            when {\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonDownloads).isChecked -> ConfigFile.set(\r\n                    ConfigSettings.OUT_DIRECTORY.cfgName,\r\n                    DirectoryList.DOWNLOADS.cfgName\r\n                )\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonDocuments).isChecked -> ConfigFile.set(\r\n                    ConfigSettings.OUT_DIRECTORY.cfgName,\r\n                    DirectoryList.DOCUMENTS.cfgName\r\n                )\r\n                currentView.findViewById<RadioButton>(R.id.radioButtonApplication).isChecked -> ConfigFile.set(\r\n                    ConfigSettings.OUT_DIRECTORY.cfgName,\r\n                    DirectoryList.APP.cfgName\r\n                )\r\n            }\r\n            ConfigFile.set(ConfigSettings.LOG_SUB_FOLDER.cfgName, currentView.findViewById<EditText>(R.id.editTextLogSubFolder).text.toString())\r\n\r\n            //Set draw min/max\r\n            ConfigFile.set(ConfigSettings.DRAW_MIN_MAX.cfgName, currentView.findViewById<CheckBox>(R.id.checkBoxDrawMinMax).isChecked.toString())\r\n\r\n            //Set draw min/max\r\n            ConfigFile.set(ConfigSettings.DRAW_GRADUATIONS.cfgName, currentView.findViewById<CheckBox>(R.id.checkBoxDrawGrad).isChecked.toString())\r\n\r\n            //Set invert cruise\r\n            ConfigFile.set(ConfigSettings.INVERT_CRUISE.cfgName, currentView.findViewById<CheckBox>(R.id.checkBoxInvertCruise).isChecked.toString())\r\n\r\n            //Set screen on\r\n            ConfigFile.set(ConfigSettings.KEEP_SCREEN_ON.cfgName, currentView.findViewById<CheckBox>(R.id.checkBoxScreenOn).isChecked.toString())\r\n\r\n            //Calculate HP\r\n            ConfigFile.set(ConfigSettings.CALCULATE_HP.cfgName, currentView.findViewById<CheckBox>(R.id.checkBoxCalcHP).isChecked.toString())\r\n\r\n            //Calculate HP\r\n            ConfigFile.set(ConfigSettings.USE_MS2.cfgName, currentView.findViewById<CheckBox>(R.id.checkBoxUseAccel).isChecked.toString())\r\n\r\n            //Always use portrait view\r\n            ConfigFile.set(ConfigSettings.ALWAYS_PORTRAIT.cfgName, currentView.findViewById<CheckBox>(R.id.checkBoxAlwaysPortrait).isChecked.toString())\r\n\r\n            //Auto log when idle\r\n            ConfigFile.set(ConfigSettings.AUTO_LOG.cfgName, currentView.findViewById<CheckBox>(R.id.checkBoxAutoLog).isChecked.toString())\r\n\r\n            //Set log name\r\n            ConfigFile.set(ConfigSettings.LOG_NAME.cfgName, currentView.findViewById<EditText>(R.id.editTextLogName).text.toString())\r\n\r\n            //Set adapter name\r\n            ConfigFile.set(ConfigSettings.ADAPTER_NAME.cfgName, mViewModel.adapterName)\r\n\r\n            //Set Colors\r\n            ColorList.values().forEachIndexed { i, color ->\r\n                ConfigFile.set(\r\n                    \"${color.key}.${color.cfgName}\",\r\n                    ColorSettings.mColorList[i].toColorHex()\r\n                )\r\n            }\r\n        }\r\n        DebugLog.d(TAG, \"doSave\")\r\n    }\r\n\r\n    private fun sendServiceMessage(type: String) {\r\n        activity?.let {\r\n            val serviceIntent = Intent(it, BTService::class.java)\r\n            serviceIntent.action = type\r\n            ContextCompat.startForegroundService(it, serviceIntent)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/SettingsGeneralFragment.kt b/app/src/main/java/com/app/simostools/SettingsGeneralFragment.kt
--- a/app/src/main/java/com/app/simostools/SettingsGeneralFragment.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/SettingsGeneralFragment.kt	(date 1639241440728)
@@ -46,11 +46,7 @@
                         TempPIDS.reset(context)
                         mLoadCallback?.invoke()
                         Toast.makeText(activity, "Success", Toast.LENGTH_SHORT).show()
-                    } else {
-                        Toast.makeText(activity, "Failed", Toast.LENGTH_SHORT).show()
                     }
-                } else {
-                    Toast.makeText(activity, "Failed", Toast.LENGTH_SHORT).show()
                 }
             }
         }
Index: app/src/main/java/com/app/simostools/CockpitFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.core.content.ContextCompat.startForegroundService\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport java.lang.Exception\r\n\r\nclass CockpitViewModel : ViewModel() {\r\n    var currentTask: UDSTask = UDSTask.NONE\r\n}\r\n\r\nclass CockpitFragment : Fragment() {\r\n    private val TAG = \"CockpitFragment\"\r\n    private var mCockpitView: SwitchCockpit?    = null\r\n    private var mPIDVelocity                    = -1\r\n    private var mPIDRPM                         = -1\r\n    private var mPIDBoost                       = -1\r\n    private var mPIDAccelerationLatitude        = -1\r\n    private var mPIDAccelerationLongitude       = -1\r\n    private lateinit var mViewModel: CockpitViewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_cockpit, container, false)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n\r\n        DebugLog.d(TAG, \"onDestroy\")\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        mViewModel = ViewModelProvider(this).get(CockpitViewModel::class.java)\r\n\r\n        mCockpitView = view.findViewById(R.id.cockpitMain)\r\n        mCockpitView?.apply {\r\n            setOnClickListener() {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n\r\n        //Build our list of PIDS in this layout\r\n        PIDs.getList()?.let { list ->\r\n            //get list of custom PIDS\r\n            for (i in 0 until list.count()) {\r\n                list[i]?.let { pid ->\r\n                    when (pid.address) {\r\n                        0xf40C.toLong() -> mPIDRPM = i\r\n                        0xd0012400      -> mPIDRPM = i\r\n\r\n                        0x2033.toLong() -> mPIDVelocity = i\r\n                        0xd00155b6      -> mPIDVelocity = i\r\n\r\n                        0x39c0.toLong() -> mPIDBoost = i\r\n                        0xd00098cc      -> mPIDBoost = i\r\n\r\n                        0xd000ee2a      -> mPIDAccelerationLatitude = i\r\n                        0xd00141ba      -> mPIDAccelerationLongitude = i\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /*mCockpitView?.apply {\r\n            dataRPM = 7000f\r\n            mCockpitView?.doDraw()\r\n        }*/\r\n\r\n        DebugLog.d(TAG, \"onViewCreated\")\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = ConfigSettings.KEEP_SCREEN_ON.toBoolean()\r\n\r\n        val filter = IntentFilter()\r\n        filter.addAction(GUIMessage.READ_LOG.toString())\r\n        filter.addAction(GUIMessage.STATE_CONNECTION.toString())\r\n        filter.addAction(GUIMessage.STATE_TASK.toString())\r\n        activity?.registerReceiver(mBroadcastReceiver, filter)\r\n\r\n        DebugLog.d(TAG, \"onResume\")\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = false\r\n\r\n        activity?.unregisterReceiver(mBroadcastReceiver)\r\n\r\n        DebugLog.d(TAG, \"onPause\")\r\n    }\r\n\r\n    private fun sendServiceMessage(type: String) {\r\n        activity?.let {\r\n            val serviceIntent = Intent(it, BTService::class.java)\r\n            serviceIntent.action = type\r\n            startForegroundService(it, serviceIntent)\r\n        }\r\n    }\r\n\r\n    fun doUpdate(readCount: Int, readTime: Long) {\r\n        //Clear stats are startup\r\n        if(readCount < 50) {\r\n            PIDs.resetData()\r\n            if(UDSLogger.getModeDSG())\r\n                PIDs.resetData(true)\r\n        }\r\n\r\n        PIDs.getList()?.let { list ->\r\n            mCockpitView?.apply {\r\n                if(mPIDAccelerationLatitude > -1)\r\n                    dataAccelerationLatitude = list[mPIDAccelerationLatitude]?.value?:0f\r\n\r\n                if(mPIDAccelerationLongitude > -1)\r\n                    dataAccelerationLongitude = list[mPIDAccelerationLongitude]?.value?:0f\r\n\r\n                if(mPIDVelocity > -1)\r\n                    dataVelocity = list[mPIDVelocity]?.value?:0f\r\n\r\n                if(mPIDBoost > -1)\r\n                    dataBoost = list[mPIDBoost]?.value?:0f\r\n\r\n                if(mPIDRPM > -1)\r\n                    dataRPM = list[mPIDRPM]?.value?:0f\r\n\r\n                doDraw()\r\n            }\r\n        }\r\n    }\r\n\r\n    private val mBroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            when (intent.action) {\r\n                GUIMessage.STATE_TASK.toString() -> mViewModel.currentTask =\r\n                    intent.getSerializableExtra(GUIMessage.STATE_TASK.toString()) as UDSTask\r\n                GUIMessage.STATE_CONNECTION.toString() -> {\r\n                    mViewModel.currentTask = UDSTask.NONE\r\n                    sendServiceMessage(BTServiceTask.DO_START_LOG.toString())\r\n                }\r\n                GUIMessage.READ_LOG.toString() -> {\r\n                    val readCount = intent.getIntExtra(\"readCount\", 0)\r\n                    val readTime = intent.getLongExtra(\"readTime\", 0)\r\n                    val readResult = intent.getSerializableExtra(\"readResult\") as UDSReturn\r\n\r\n                    //Make sure we received an ok\r\n                    if (readResult != UDSReturn.OK) {\r\n                        return\r\n                    }\r\n\r\n                    //Update callback\r\n                    doUpdate(readCount, readTime)\r\n                }\r\n                else -> { }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/CockpitFragment.kt b/app/src/main/java/com/app/simostools/CockpitFragment.kt
--- a/app/src/main/java/com/app/simostools/CockpitFragment.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/CockpitFragment.kt	(date 1639242352377)
@@ -77,11 +77,6 @@
             }
         }
 
-        /*mCockpitView?.apply {
-            dataRPM = 7000f
-            mCockpitView?.doDraw()
-        }*/
-
         DebugLog.d(TAG, "onViewCreated")
     }
 
Index: app/src/main/java/com/app/simostools/SwitchCockpit.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.content.Context\r\nimport android.graphics.*\r\nimport android.util.AttributeSet\r\nimport android.view.View\r\n\r\nclass SwitchCockpit: View {\r\n    constructor(context: Context) : super(context) {\r\n    }\r\n    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {\r\n    }\r\n    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {\r\n    }\r\n    private val bgPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style = Paint.Style.FILL_AND_STROKE\r\n        color = Color.BLACK\r\n        strokeWidth = 100.0f\r\n    }\r\n    private val linePaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style = Paint.Style.STROKE\r\n        color = Color.RED\r\n        strokeWidth = 5.0f\r\n    }\r\n    private val gaugeRing: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style = Paint.Style.FILL_AND_STROKE\r\n        color = Color.WHITE\r\n        strokeWidth = 50.0f\r\n    }\r\n    private val boostPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style       = Paint.Style.FILL_AND_STROKE\r\n        color       = Color.WHITE\r\n        strokeWidth = 1.0f\r\n    }\r\n    private val rpmPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style       = Paint.Style.FILL_AND_STROKE\r\n        color       = Color.WHITE\r\n        strokeWidth = 1.0f\r\n    }\r\n    private val textPaint: Paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {\r\n        style       = Paint.Style.FILL_AND_STROKE\r\n        color       = Color.WHITE\r\n        strokeWidth = 1.0f\r\n        textSize    = 30f\r\n        textAlign   = Paint.Align.CENTER\r\n    }\r\n    private var mCurrentWidth                       = 0f\r\n    private var mCurrentHeight                      = 0f\r\n    private var mCurrentWidthCenter                 = 0f\r\n    private var mCurrentHeightCenter                = 0f\r\n    private var mRect                               = RectF()\r\n    var dataVelocity                                = 0f\r\n    var dataRPM                                     = 0f\r\n    var dataBoost                                   = 0f\r\n    var dataAccelerationLatitude                    = 0f\r\n    var dataAccelerationLongitude                   = 0f\r\n\r\n    fun doDraw() {\r\n        invalidate()\r\n    }\r\n\r\n    private fun drawBoostGauge(canvas: Canvas, boost: Float, rpm: Float, size: Float) {\r\n        val boostSegmentCount = 20\r\n        val boostSegmentSize = 350f / boostSegmentCount\r\n        val angleSegment = 50f / boostSegmentCount\r\n        val strokeWidth = boostPaint.strokeWidth / 2.0f\r\n        val boostAmount = boost / 300f * boostSegmentCount\r\n        val rpmAmount = rpm / 7000f * boostSegmentCount\r\n        val colorSegment = 1f / boostSegmentCount.toFloat()\r\n\r\n        boostPaint.color = Color.GREEN\r\n        rpmPaint.color = Color.GREEN\r\n        for(i in 0 .. boostSegmentCount) {\r\n            if(i >= boostAmount.toInt()) boostPaint.color = Color.WHITE\r\n            else boostPaint.color = Color.rgb(colorSegment * i.toFloat(), 1f - (colorSegment * i.toFloat()), 0f)\r\n            if(i >= rpmAmount.toInt()) rpmPaint.color = Color.WHITE\r\n            else rpmPaint.color = Color.rgb(colorSegment * i.toFloat(), 1f - (colorSegment * i.toFloat()), 0f)\r\n\r\n            canvas.drawRoundRect(mCurrentWidthCenter - 300f, mCurrentHeightCenter + 140f - (boostSegmentSize * (i - 0.5f)), mCurrentWidthCenter - 100f, mCurrentHeightCenter + 140f - (boostSegmentSize * i), 50f, 50f, boostPaint)\r\n            canvas.drawRoundRect(mCurrentWidthCenter + 300f, mCurrentHeightCenter + 140f - (boostSegmentSize * (i - 0.5f)), mCurrentWidthCenter + 100f, mCurrentHeightCenter + 140f - (boostSegmentSize * i), 50f, 50f, rpmPaint)\r\n        }\r\n\r\n        canvas.drawCircle(mCurrentWidthCenter, mCurrentHeightCenter, 200f, bgPaint)\r\n    }\r\n\r\n    private fun drawVelocityGauge(canvas: Canvas, velocity: Float, size: Float) {\r\n        val angleStart = 140f\r\n        val angleSegmentCount = 50\r\n        val angleSegment = 260f / angleSegmentCount\r\n        val amount = velocity / 220f * angleSegmentCount\r\n        val strokeWidth = linePaint.strokeWidth / 2.0f\r\n        mRect.set(mCurrentWidthCenter - 200f, mCurrentHeightCenter - 200f, 200f + mCurrentWidthCenter, 200f + mCurrentHeightCenter)\r\n\r\n        gaugeRing.color = Color.RED\r\n        for(i in 0 .. angleSegmentCount) {\r\n            if(i == amount.toInt())\r\n                gaugeRing.color = Color.WHITE\r\n            canvas.drawArc(mRect, angleStart+(angleSegment * i)-(angleSegment*0.25f), angleSegment * 0.5f, false, gaugeRing)\r\n        }\r\n    }\r\n\r\n    private fun drawAccelerationGauge(canvas: Canvas, latitude: Float, longitude: Float, size: Float) {\r\n\r\n    }\r\n\r\n    private fun drawVelocityText(canvas: Canvas, velocity: Float, size: Float) {\r\n        textPaint.textSize = 30f * size\r\n        canvas.drawText(\r\n            \"$velocity Km/h\",\r\n            mCurrentWidthCenter,\r\n            mCurrentHeightCenter+(100f*size),\r\n            textPaint\r\n        )\r\n    }\r\n\r\n    override fun onDraw(canvas: Canvas) {\r\n        //draw background\r\n        canvas.drawRect(0f, 0f, mCurrentWidth, mCurrentHeight, bgPaint)\r\n\r\n        drawBoostGauge(canvas, dataBoost, dataRPM, 1.0f)\r\n        drawAccelerationGauge(canvas, dataAccelerationLatitude, dataAccelerationLongitude, 1.0f)\r\n        drawVelocityGauge(canvas, dataVelocity, 1.0f)\r\n        drawVelocityText(canvas, dataVelocity, 1.0f)\r\n\r\n        super.onDraw(canvas)\r\n    }\r\n\r\n    override fun onSizeChanged(width: Int, height: Int, oldWidth: Int, oldHeight: Int) {\r\n        mCurrentWidth = width.toFloat()\r\n        mCurrentHeight = height.toFloat()\r\n        mCurrentWidthCenter = mCurrentWidth / 2.0f\r\n        mCurrentHeightCenter = mCurrentHeight / 2.0f\r\n\r\n        invalidate()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/SwitchCockpit.kt b/app/src/main/java/com/app/simostools/SwitchCockpit.kt
--- a/app/src/main/java/com/app/simostools/SwitchCockpit.kt	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/java/com/app/simostools/SwitchCockpit.kt	(date 1639247890990)
@@ -68,8 +68,6 @@
         val rpmAmount = rpm / 7000f * boostSegmentCount
         val colorSegment = 1f / boostSegmentCount.toFloat()
 
-        boostPaint.color = Color.GREEN
-        rpmPaint.color = Color.GREEN
         for(i in 0 .. boostSegmentCount) {
             if(i >= boostAmount.toInt()) boostPaint.color = Color.WHITE
             else boostPaint.color = Color.rgb(colorSegment * i.toFloat(), 1f - (colorSegment * i.toFloat()), 0f)
Index: app/src/main/res/layout/fragment_color.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".ColorFragment\"\r\n    android:id=\"@+id/ColorLayout\">\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imageViewColor\"\r\n        android:contentDescription=\"@string/app_name\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"75dp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonColorBack\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"64dp\"\r\n        android:text=\"@string/button_back\"\r\n        android:textSize=\"24sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/buttonColorSet\" />\r\n\r\n    <com.app.simostools.SwitchButton\r\n        android:id=\"@+id/buttonColorSet\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"64dp\"\r\n        android:text=\"@string/button_set\"\r\n        android:textSize=\"24sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/buttonColorBack\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorR\"\r\n        android:contentDescription=\"@string/textview_color_r\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorR\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorG\"\r\n        android:contentDescription=\"@string/textview_color_g\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorG\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/seekBarColorB\"\r\n        android:contentDescription=\"@string/textview_color_b\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewColorB\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorR\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:text=\"@string/textview_color_r\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/imageViewColor\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorB\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"8dp\"\r\n        android:text=\"@string/textview_color_b\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/seekBarColorG\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textViewColorG\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginStart=\"4dp\"\r\n        android:text=\"@string/textview_color_g\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/seekBarColorR\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_color.xml b/app/src/main/res/layout/fragment_color.xml
--- a/app/src/main/res/layout/fragment_color.xml	(revision 1b49741e86d594564f23f6bcdfbdeca5b557117d)
+++ b/app/src/main/res/layout/fragment_color.xml	(date 1639187022436)
@@ -72,21 +72,21 @@
         app:layout_constraintTop_toBottomOf="@+id/imageViewColor" />
 
     <TextView
-        android:id="@+id/textViewColorB"
+        android:id="@+id/textViewColorG"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_marginStart="8dp"
-        android:text="@string/textview_color_b"
+        android:text="@string/textview_color_g"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/seekBarColorG" />
+        app:layout_constraintTop_toBottomOf="@+id/seekBarColorR" />
 
     <TextView
-        android:id="@+id/textViewColorG"
+        android:id="@+id/textViewColorB"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_marginStart="4dp"
-        android:text="@string/textview_color_g"
+        android:layout_marginStart="8dp"
+        android:text="@string/textview_color_b"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/seekBarColorR" />
+        app:layout_constraintTop_toBottomOf="@+id/seekBarColorG" />
 
 </androidx.constraintlayout.widget.ConstraintLayout>
