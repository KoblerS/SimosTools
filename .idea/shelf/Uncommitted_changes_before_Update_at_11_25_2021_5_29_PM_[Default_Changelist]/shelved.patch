Index: app/src/main/java/com/app/simostools/UtilitiesFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.simostools\r\n\r\nimport android.app.Activity\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.graphics.Color\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.SystemClock\r\nimport android.view.LayoutInflater\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport android.widget.*\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.core.content.ContextCompat.startForegroundService\r\nimport android.widget.ArrayAdapter\r\nimport androidx.core.view.isVisible\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\n\r\nvar gUtilitiesMsgList: Array<String>? = null\r\n\r\nclass UtilitiesViewModel : ViewModel() {\r\n    var connectionState: BLEConnectionState = BLEConnectionState.NONE\r\n}\r\n\r\nclass UtilitiesFragment : Fragment() {\r\n    private val TAG = \"UtilitiesFragment\"\r\n    private var mArrayAdapter: ArrayAdapter<String>? = null\r\n    private lateinit var mViewModel: FlashViewModel\r\n\r\n    var resultPickLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n        if (result.resultCode == Activity.RESULT_OK) {\r\n            val uri: Uri? = result.data?.data\r\n            uri?.let {\r\n                UDSFlasher.setBinFile(requireActivity().contentResolver.openInputStream(uri)!!)\r\n\r\n                // Tell the service to start flashing\r\n                sendServiceMessage(BTServiceTask.DO_START_FLASH.toString())\r\n\r\n                Toast.makeText(activity, \"Success\", Toast.LENGTH_SHORT).show()\r\n            }?: Toast.makeText(activity, \"Failed\", Toast.LENGTH_SHORT).show()\r\n        } else {\r\n            Toast.makeText(activity, \"Failed\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_utilities, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        mViewModel = ViewModelProvider(this).get(FlashViewModel::class.java)\r\n\r\n        mArrayAdapter = ArrayAdapter(requireContext(), R.layout.flashing_message)\r\n        mArrayAdapter?.let { adapter ->\r\n            gUtilitiesMsgList?.forEach {\r\n                adapter.add(it)\r\n            }\r\n        }\r\n\r\n        view.findViewById<ListView>(R.id.listViewMessage)?.let { messageBox ->\r\n            messageBox.adapter = mArrayAdapter\r\n            messageBox.setBackgroundColor(Color.WHITE)\r\n        }\r\n\r\n        val ecuInfoButton = view.findViewById<SwitchButton>(R.id.buttonGetInfo)\r\n        ecuInfoButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {\r\n                    sendServiceMessage(BTServiceTask.DO_GET_INFO.toString())\r\n                } else {\r\n                    doWriteMessage(\"Not connected\")\r\n                }\r\n            }\r\n        }\r\n\r\n        val getDTCButton = view.findViewById<SwitchButton>(R.id.buttonGetDTC)\r\n        getDTCButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                clickDTC(false)\r\n            }\r\n        }\r\n\r\n        val clearDTCButton = view.findViewById<SwitchButton>(R.id.buttonClearDTC)\r\n        clearDTCButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                doWriteMessage(\"Hold button to clear DTC codes.\")\r\n            }\r\n            setOnLongClickListener {\r\n                clickDTC(true)\r\n            }\r\n        }\r\n\r\n        val backButton = view.findViewById<SwitchButton>(R.id.buttonBack)\r\n        backButton.apply {\r\n            paintBG.color = ColorList.BT_BG.value\r\n            paintRim.color = ColorList.BT_RIM.value\r\n            setTextColor(ColorList.BT_TEXT.value)\r\n            setOnClickListener {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n\r\n        view.findViewById<ProgressBar>(R.id.progressBarUtilities)?.apply {\r\n            progress = 0\r\n            isVisible = false\r\n            max = 100\r\n            min = 0\r\n            scaleY = 3F\r\n        }\r\n\r\n        setColor()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        setColor()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = ConfigSettings.KEEP_SCREEN_ON.toBoolean()\r\n\r\n        //register broadcast receiver\r\n        val filter = IntentFilter()\r\n        filter.addAction(GUIMessage.STATE_CONNECTION.toString())\r\n        filter.addAction(GUIMessage.STATE_TASK.toString())\r\n        filter.addAction(GUIMessage.UTILITY_INFO.toString())\r\n        filter.addAction(GUIMessage.UTILITY_PROGRESS.toString())\r\n        filter.addAction(GUIMessage.UTILITY_PROGRESS_MAX.toString())\r\n        filter.addAction(GUIMessage.UTILITY_PROGRESS_SHOW.toString())\r\n        activity?.registerReceiver(mBroadcastReceiver, filter)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n\r\n        //Do we keep the screen on?\r\n        view?.keepScreenOn = false\r\n\r\n        //unregister broadcast receiver\r\n        activity?.unregisterReceiver(mBroadcastReceiver)\r\n    }\r\n\r\n    private val mBroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            DebugLog.d(TAG, \"Utility Fragment received action: \" + intent.action.toString())\r\n            when (intent.action) {\r\n                GUIMessage.STATE_CONNECTION.toString()      -> mViewModel.connectionState = intent.getSerializableExtra(GUIMessage.STATE_CONNECTION.toString()) as BLEConnectionState\r\n                GUIMessage.STATE_TASK.toString()            -> mViewModel.connectionState = BLEConnectionState.CONNECTED\r\n                GUIMessage.UTILITY_INFO.toString()          -> doWriteMessage(intent.getStringExtra(GUIMessage.FLASH_INFO.toString())?: \"\")\r\n                GUIMessage.UTILITY_INFO_CLEAR.toString()    -> doClearMessages()\r\n                GUIMessage.UTILITY_PROGRESS.toString()      -> setProgressBar(intent.getIntExtra(GUIMessage.FLASH_PROGRESS.toString(), 0))\r\n                GUIMessage.UTILITY_PROGRESS_MAX.toString()  -> setProgressBarMax(intent.getIntExtra(GUIMessage.FLASH_PROGRESS_MAX.toString(), 0))\r\n                GUIMessage.UTILITY_PROGRESS_SHOW.toString() -> setProgressBarShow(intent.getBooleanExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), false))\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun clickDTC(clear: Boolean):Boolean {\r\n        if (mViewModel.connectionState == BLEConnectionState.CONNECTED) {\r\n            if(clear) sendServiceMessage(BTServiceTask.DO_CLEAR_DTC.toString())\r\n            else sendServiceMessage(BTServiceTask.DO_GET_DTC.toString())\r\n        } else {\r\n            doWriteMessage(\"Not connected\")\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    private fun doClearMessages() {\r\n        gUtilitiesMsgList = arrayOf()\r\n        mArrayAdapter?.let {\r\n            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)\r\n            btMessage?.setSelection(0)\r\n        }\r\n    }\r\n\r\n    private fun doWriteMessage(message: String) {\r\n        // construct a string from the valid bytes in the buffer\r\n        val value = gUtilitiesMsgList?: arrayOf()\r\n        gUtilitiesMsgList = value + message\r\n        mArrayAdapter?.let {\r\n            it.add(message)\r\n\r\n            val btMessage = view?.findViewById<ListView>(R.id.listViewMessage)\r\n            btMessage?.setSelection(it.count - 1)\r\n        }\r\n    }\r\n\r\n    private fun setColor() {\r\n        //Set background color\r\n        view?.setBackgroundColor(ColorList.BG_NORMAL.value)\r\n    }\r\n\r\n    private fun setProgressBar(amount: Int) {\r\n        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarUtilities)\r\n        pBar?.progress = amount\r\n\r\n    }\r\n\r\n    private fun setProgressBarMax(amount: Int) {\r\n        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarUtilities)\r\n        pBar?.max = amount\r\n    }\r\n\r\n    private fun setProgressBarShow(allow: Boolean) {\r\n        val pBar = view?.findViewById<ProgressBar>(R.id.progressBarUtilities)\r\n        pBar?.isVisible = allow\r\n    }\r\n\r\n    private fun sendServiceMessage(type: String) {\r\n        activity?.let {\r\n            val serviceIntent = Intent(it, BTService::class.java)\r\n            serviceIntent.action = type\r\n            startForegroundService(it, serviceIntent)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/UtilitiesFragment.kt b/app/src/main/java/com/app/simostools/UtilitiesFragment.kt
--- a/app/src/main/java/com/app/simostools/UtilitiesFragment.kt	(revision 1675dcc610557eded35e6ec40c3a54593aacb243)
+++ b/app/src/main/java/com/app/simostools/UtilitiesFragment.kt	(date 1637849890513)
@@ -69,9 +69,9 @@
             }
         }
 
-        view.findViewById<ListView>(R.id.listViewMessage)?.let { messageBox ->
-            messageBox.adapter = mArrayAdapter
-            messageBox.setBackgroundColor(Color.WHITE)
+        view.findViewById<ListView>(R.id.listViewMessage)?.apply {
+            adapter = mArrayAdapter
+            setBackgroundColor(Color.WHITE)
         }
 
         val ecuInfoButton = view.findViewById<SwitchButton>(R.id.buttonGetInfo)
@@ -167,11 +167,11 @@
             when (intent.action) {
                 GUIMessage.STATE_CONNECTION.toString()      -> mViewModel.connectionState = intent.getSerializableExtra(GUIMessage.STATE_CONNECTION.toString()) as BLEConnectionState
                 GUIMessage.STATE_TASK.toString()            -> mViewModel.connectionState = BLEConnectionState.CONNECTED
-                GUIMessage.UTILITY_INFO.toString()          -> doWriteMessage(intent.getStringExtra(GUIMessage.FLASH_INFO.toString())?: "")
+                GUIMessage.UTILITY_INFO.toString()          -> doWriteMessage(intent.getStringExtra(GUIMessage.UTILITY_INFO.toString())?: "")
                 GUIMessage.UTILITY_INFO_CLEAR.toString()    -> doClearMessages()
-                GUIMessage.UTILITY_PROGRESS.toString()      -> setProgressBar(intent.getIntExtra(GUIMessage.FLASH_PROGRESS.toString(), 0))
-                GUIMessage.UTILITY_PROGRESS_MAX.toString()  -> setProgressBarMax(intent.getIntExtra(GUIMessage.FLASH_PROGRESS_MAX.toString(), 0))
-                GUIMessage.UTILITY_PROGRESS_SHOW.toString() -> setProgressBarShow(intent.getBooleanExtra(GUIMessage.FLASH_PROGRESS_SHOW.toString(), false))
+                GUIMessage.UTILITY_PROGRESS.toString()      -> setProgressBar(intent.getIntExtra(GUIMessage.UTILITY_PROGRESS.toString(), 0))
+                GUIMessage.UTILITY_PROGRESS_MAX.toString()  -> setProgressBarMax(intent.getIntExtra(GUIMessage.UTILITY_PROGRESS_MAX.toString(), 0))
+                GUIMessage.UTILITY_PROGRESS_SHOW.toString() -> setProgressBarShow(intent.getBooleanExtra(GUIMessage.UTILITY_PROGRESS_SHOW.toString(), false))
 
             }
         }
Index: app/src/main/res/layout/flashing_message.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n          android:layout_width=\"match_parent\"\r\n          android:layout_height=\"wrap_content\"\r\n          android:padding=\"5dp\"\r\n          android:textSize=\"18sp\" />\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/flashing_message.xml b/app/src/main/res/layout/flashing_message.xml
--- a/app/src/main/res/layout/flashing_message.xml	(revision 1675dcc610557eded35e6ec40c3a54593aacb243)
+++ b/app/src/main/res/layout/flashing_message.xml	(date 1637849267615)
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
 <TextView xmlns:android="http://schemas.android.com/apk/res/android"
-          android:layout_width="match_parent"
-          android:layout_height="wrap_content"
-          android:padding="5dp"
-          android:textSize="18sp" />
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="5dp"
+            android:textSize="18sp"
+            android:id="@+id/textView"/>
Index: app/src/main/java/com/app/simostools/SwitchAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/app/simostools/SwitchAdapter.kt b/app/src/main/java/com/app/simostools/SwitchAdapter.kt
new file mode 100644
--- /dev/null	(date 1637849790519)
+++ b/app/src/main/java/com/app/simostools/SwitchAdapter.kt	(date 1637849790519)
@@ -0,0 +1,33 @@
+package com.app.simostools
+
+import android.content.Context
+import android.graphics.Color
+import android.widget.TextView
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ArrayAdapter
+
+class SwitchArrayAdapter(context: Context, textViewResourceId: Int, list: Array<String?>) :
+    ArrayAdapter<String?>(context, textViewResourceId, list) {
+    private val mContext: Context = context
+    private val id: Int = textViewResourceId
+    private val items: Array<String?> = list
+
+    override fun getView(position: Int, v: View?, parent: ViewGroup): View {
+        var mView = v
+        if (mView == null) {
+            val vi = mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater
+            mView = vi.inflate(id, null)
+        }
+        val text = mView!!.findViewById<View>(R.id.textView) as TextView
+        if (items[position] != null) {
+            text.setTextColor(Color.WHITE)
+            text.text = items[position]
+            text.setBackgroundColor(Color.RED)
+            val color = Color.argb(200, 255, 64, 64)
+            text.setBackgroundColor(color)
+        }
+        return mView
+    }
+}
\ No newline at end of file
